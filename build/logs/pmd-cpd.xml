<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd version="phpcpd 1.3.5">
  <duplication lines="54" tokens="202">
    <file path="/mnt/share/buddypress/src/api/ApiDB.php" line="22"/>
    <file path="/mnt/share/buddypress/src/api/Restler/examples/_006_crud/db_pdo_mysql.php" line="19"/>
    <codefragment>            'mysql:host='.DB_HOST.';dbname='.DB_NAME, DB_USER, DB_PASSWORD);&#13;
            $this-&gt;db-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, &#13;
            PDO::FETCH_ASSOC);&#13;
        } catch (PDOException $e) {&#13;
            throw new RestException(501, 'MySQL: ' . $e-&gt;getMessage());&#13;
        }&#13;
    }&#13;
    &#13;
    function get ($id, $installTableOnFailure = FALSE)&#13;
    {&#13;
        $this-&gt;db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);&#13;
        try {&#13;
            $sql = 'SELECT * FROM authors WHERE id = ' . mysql_escape_string(&#13;
            $id);&#13;
            return $this-&gt;id2int($this-&gt;db-&gt;query($sql)&#13;
                -&gt;fetch());&#13;
        } catch (PDOException $e) {&#13;
            if (! $installTableOnFailure &amp;&amp; $e-&gt;getCode() == '42S02') {&#13;
//SQLSTATE[42S02]: Base table or view not found: 1146 Table 'authors' doesn't exist&#13;
                $this-&gt;install();&#13;
                return $this-&gt;get($id, TRUE);&#13;
            }&#13;
            throw new RestException(501, 'MySQL: ' . $e-&gt;getMessage());&#13;
        }&#13;
    }&#13;
    function getAll ($installTableOnFailure = FALSE)&#13;
    {&#13;
        $this-&gt;db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);&#13;
        try {&#13;
            $stmt = $this-&gt;db-&gt;query('SELECT * FROM authors');&#13;
            return $this-&gt;id2int($stmt-&gt;fetchAll());&#13;
        } catch (PDOException $e) {&#13;
            if (! $installTableOnFailure &amp;&amp; $e-&gt;getCode() == '42S02') {&#13;
//SQLSTATE[42S02]: Base table or view not found: 1146 Table 'authors' doesn't exist&#13;
                $this-&gt;install();&#13;
                return $this-&gt;getAll(TRUE);&#13;
            }&#13;
            throw new RestException(501, 'MySQL: ' . $e-&gt;getMessage());&#13;
        }&#13;
    }&#13;
    function insert ($rec)&#13;
    {&#13;
        $name = mysql_escape_string($rec['name']);&#13;
        $email = mysql_escape_string($rec['email']);&#13;
        $sql = "INSERT INTO authors (name, email) VALUES ('$name', '$email')";&#13;
        if (! $this-&gt;db-&gt;query($sql))&#13;
            return FALSE;&#13;
        return $this-&gt;get($this-&gt;db-&gt;lastInsertId());&#13;
    }&#13;
    function update ($id, $rec)&#13;
    {&#13;
        $id = mysql_escape_string($id);&#13;
        $name = mysql_escape_string($rec['name']);&#13;
        $email = mysql_escape_string($rec['email']);&#13;
</codefragment>
  </duplication>
  <duplication lines="16" tokens="62">
    <file path="/mnt/share/buddypress/src/api/ApiDB.php" line="61"/>
    <file path="/mnt/share/buddypress/src/api/Restler/examples/_006_crud/db_pdo_sqlite.php" line="31"/>
    <codefragment>    }&#13;
    function insert ($rec)&#13;
    {&#13;
        $name = mysql_escape_string($rec['name']);&#13;
        $email = mysql_escape_string($rec['email']);&#13;
        $sql = "INSERT INTO authors (name, email) VALUES ('$name', '$email')";&#13;
        if (! $this-&gt;db-&gt;query($sql))&#13;
            return FALSE;&#13;
        return $this-&gt;get($this-&gt;db-&gt;lastInsertId());&#13;
    }&#13;
    function update ($id, $rec)&#13;
    {&#13;
        $id = mysql_escape_string($id);&#13;
        $name = mysql_escape_string($rec['name']);&#13;
        $email = mysql_escape_string($rec['email']);&#13;
        $sql = "UPDATE authors SET name = '$name', email ='$email' WHERE id = $id";&#13;
</codefragment>
  </duplication>
  <duplication lines="7" tokens="18">
    <file path="/mnt/share/buddypress/src/wp-admin/includes/class-wp-filesystem-ftpext.php" line="171"/>
    <file path="/mnt/share/buddypress/src/wp-admin/includes/class-wp-filesystem-ftpsockets.php" line="177"/>
    <codefragment>	function chown($file, $owner, $recursive = false ) {
		return false;
	}
	function owner($file) {
		$dir = $this-&gt;dirlist($file);
		return $dir[$file]['owner'];
	}
</codefragment>
  </duplication>
  <duplication lines="19" tokens="78">
    <file path="/mnt/share/buddypress/src/wp-admin/includes/class-wp-filesystem-direct.php" line="326"/>
    <file path="/mnt/share/buddypress/src/wp-admin/includes/class-wp-filesystem-ssh2.php" line="349"/>
    <codefragment>		while (false !== ($entry = $dir-&gt;read()) ) {
			$struc = array();
			$struc['name'] = $entry;

			if ( '.' == $struc['name'] || '..' == $struc['name'] )
				continue;

			if ( ! $include_hidden &amp;&amp; '.' == $struc['name'][0] )
				continue;

			if ( $limit_file &amp;&amp; $struc['name'] != $limit_file)
				continue;

			$struc['perms'] 	= $this-&gt;gethchmod($path.'/'.$entry);
			$struc['permsn']	= $this-&gt;getnumchmodfromh($struc['perms']);
			$struc['number'] 	= false;
			$struc['owner']    	= $this-&gt;owner($path.'/'.$entry);
			$struc['group']    	= $this-&gt;group($path.'/'.$entry);
			$struc['size']    	= $this-&gt;size($path.'/'.$entry);
</codefragment>
  </duplication>
  <duplication lines="18" tokens="55">
    <file path="/mnt/share/buddypress/src/wp-admin/includes/file.php" line="753"/>
    <file path="/mnt/share/buddypress/src/wp-admin/includes/update-core.php" line="561"/>
    <codefragment>function copy_dir($from, $to, $skip_list = array() ) {
	global $wp_filesystem;

	$dirlist = $wp_filesystem-&gt;dirlist($from);

	$from = trailingslashit($from);
	$to = trailingslashit($to);

	$skip_regex = '';
	foreach ( (array)$skip_list as $key =&gt; $skip_file )
		$skip_regex .= preg_quote($skip_file, '!') . '|';

	if ( !empty($skip_regex) )
		$skip_regex = '!(' . rtrim($skip_regex, '|') . ')$!i';

	foreach ( (array) $dirlist as $filename =&gt; $fileinfo ) {
		if ( !empty($skip_regex) )
			if ( preg_match($skip_regex, $from . $filename) )
</codefragment>
  </duplication>
  <duplication lines="14" tokens="32">
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-info.php" line="11"/>
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-settings.php" line="11"/>
    <codefragment>require_once( './admin.php' );

if ( ! is_multisite() )
	wp_die( __( 'Multisite support is not enabled.' ) );

if ( ! current_user_can( 'manage_sites' ) )
	wp_die( __( 'You do not have sufficient permissions to edit this site.' ) );

	get_current_screen()-&gt;add_help_tab( array(
		'id'      =&gt; 'overview',
		'title'   =&gt; __('Overview'),
		'content' =&gt;
			'&lt;p&gt;' . __('The menu is for editing information specific to individual sites, particularly if the admin area of a site is unavailable.') . '&lt;/p&gt;' .
			'&lt;p&gt;' . __('&lt;strong&gt;Info&lt;/strong&gt; - The domain and path are rarely edited as this can cause the site to not work properly. The Registered date and Last Updated date are displayed. Network admins can mark a site as archived, spam, deleted and mature, to remove from public listings or disable.') . '&lt;/p&gt;' .
</codefragment>
  </duplication>
  <duplication lines="19" tokens="44">
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-info.php" line="87"/>
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-settings.php" line="77"/>
    <codefragment>$site_url_no_http = preg_replace( '#^http(s)?://#', '', get_blogaddress_by_id( $id ) );
$title_site_url_linked = sprintf( __('Edit Site: &lt;a href="%1$s"&gt;%2$s&lt;/a&gt;'), get_blogaddress_by_id( $id ), $site_url_no_http );
$title = sprintf( __('Edit Site: %s'), $site_url_no_http );

$parent_file = 'sites.php';
$submenu_file = 'sites.php';

require('../admin-header.php');

?&gt;

&lt;div class="wrap"&gt;
&lt;?php screen_icon('ms-admin'); ?&gt;
&lt;h2 id="edit-site"&gt;&lt;?php echo $title_site_url_linked ?&gt;&lt;/h2&gt;
&lt;h3 class="nav-tab-wrapper"&gt;
&lt;?php
$tabs = array(
	'site-info'     =&gt; array( 'label' =&gt; __( 'Info' ),     'url' =&gt; 'site-info.php'     ),
	'site-users'    =&gt; array( 'label' =&gt; __( 'Users' ),    'url' =&gt; 'site-users.php'    ),
</codefragment>
  </duplication>
  <duplication lines="15" tokens="29">
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-info.php" line="87"/>
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-themes.php" line="133"/>
    <codefragment>$site_url_no_http = preg_replace( '#^http(s)?://#', '', get_blogaddress_by_id( $id ) );
$title_site_url_linked = sprintf( __('Edit Site: &lt;a href="%1$s"&gt;%2$s&lt;/a&gt;'), get_blogaddress_by_id( $id ), $site_url_no_http );
$title = sprintf( __('Edit Site: %s'), $site_url_no_http );

$parent_file = 'sites.php';
$submenu_file = 'sites.php';

require('../admin-header.php');

?&gt;

&lt;div class="wrap"&gt;
&lt;?php screen_icon('ms-admin'); ?&gt;
&lt;h2 id="edit-site"&gt;&lt;?php echo $title_site_url_linked ?&gt;&lt;/h2&gt;
&lt;h3 class="nav-tab-wrapper"&gt;
</codefragment>
  </duplication>
  <duplication lines="16" tokens="31">
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-info.php" line="87"/>
    <file path="/mnt/share/buddypress/src/wp-admin/network/site-users.php" line="167"/>
    <codefragment>$site_url_no_http = preg_replace( '#^http(s)?://#', '', get_blogaddress_by_id( $id ) );
$title_site_url_linked = sprintf( __('Edit Site: &lt;a href="%1$s"&gt;%2$s&lt;/a&gt;'), get_blogaddress_by_id( $id ), $site_url_no_http );
$title = sprintf( __('Edit Site: %s'), $site_url_no_http );

$parent_file = 'sites.php';
$submenu_file = 'sites.php';

require('../admin-header.php');

?&gt;

&lt;div class="wrap"&gt;
&lt;?php screen_icon('ms-admin'); ?&gt;
&lt;h2 id="edit-site"&gt;&lt;?php echo $title_site_url_linked ?&gt;&lt;/h2&gt;
&lt;h3 class="nav-tab-wrapper"&gt;
&lt;?php
</codefragment>
  </duplication>
  <duplication lines="12" tokens="39">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/akismet/admin.php" line="488"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/akismet/admin.php" line="537"/>
    <codefragment>		return;
		
	// use the original version stored in comment_meta if available	
	$as_submitted = get_comment_meta( $comment_id, 'akismet_as_submitted', true);
	if ( $as_submitted &amp;&amp; is_array($as_submitted) &amp;&amp; isset($as_submitted['comment_content']) ) {
		$comment = (object) array_merge( (array)$comment, $as_submitted );
	}
	
	$comment-&gt;blog = get_bloginfo('url');
	$comment-&gt;blog_lang = get_locale();
	$comment-&gt;blog_charset = get_option('blog_charset');
	$comment-&gt;permalink = get_permalink($comment-&gt;comment_post_ID);
</codefragment>
  </duplication>
  <duplication lines="14" tokens="66">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/akismet/legacy.php" line="234"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/akismet/legacy.php" line="301"/>
    <codefragment>&lt;?php if ( $total &gt; 50 ) {
$total_pages = ceil( $total / 50 );
$r = '';
if ( 1 &lt; $page ) {
	$args['apage'] = ( 1 == $page - 1 ) ? '' : $page - 1;
	$r .=  '&lt;a class="prev" href="' . clean_url(add_query_arg( $args )) . '"&gt;'. __('&amp;laquo; Previous Page') .'&lt;/a&gt;' . "\n";
}
if ( ( $total_pages = ceil( $total / 50 ) ) &gt; 1 ) {
	for ( $page_num = 1; $page_num &lt;= $total_pages; $page_num++ ) :
		if ( $page == $page_num ) :
			$r .=  "&lt;strong&gt;$page_num&lt;/strong&gt;\n";
		else :
			$p = false;
			if ( $page_num &lt; 3 || ( $page_num &gt;= $page - 3 &amp;&amp; $page_num &lt;= $page + 3 ) || $page_num &gt; $total_pages - 3 ) :
</codefragment>
  </duplication>
  <duplication lines="15" tokens="40">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-template.php" line="2468"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-template.php" line="2653"/>
    <codefragment>				$type = 'text';
			}

			$checked = false;
			if ( in_array( $key, $error_codes ) ) {
				$class .= ' form-invalid error';
				$data = $errors-&gt;get_error_data( $key );
				if ( 'checkbox' == $type ) {
					if ( isset($data['data']) )
						$checked = $data['data'];
					else
						$checked = $_POST[$key];
					$value = $label[3];
					$checked = $checked == $value;
				} else {
</codefragment>
  </duplication>
  <duplication lines="13" tokens="20">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/xmlrpc.php" line="571"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/xmlrpc.php" line="695"/>
    <codefragment>		if ( $this-&gt;error ) {
			return $this-&gt;error;
		}

		// Setup an array to store arguments to pass to bb_get_forums() function
		$get_forums_args = array(
			'child_of' =&gt; 0,
			'hierarchical' =&gt; 0,
			'depth' =&gt; 0
		);

		// Can be numeric id or slug
		$forum_id = isset( $args[2] ) ? $args[2] : false;
</codefragment>
  </duplication>
  <duplication lines="66" tokens="222">
    <file path="/mnt/share/buddypress/src/wp-admin/includes/upgrade.php" line="1539"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bp-forums-bbpress-sa.php" line="313"/>
    <codefragment>		foreach ($tablefields as $tablefield) {
			// If the table field exists in the field array...
			if (array_key_exists(strtolower($tablefield-&gt;Field), $cfields)) {
				// Get the field type from the query
				preg_match("|".$tablefield-&gt;Field." ([^ ]*( unsigned)?)|i", $cfields[strtolower($tablefield-&gt;Field)], $matches);
				$fieldtype = $matches[1];

				// Is actual field type different from the field type in query?
				if ($tablefield-&gt;Type != $fieldtype) {
					// Add a query to change the column type
					$cqueries[] = "ALTER TABLE {$table} CHANGE COLUMN {$tablefield-&gt;Field} " . $cfields[strtolower($tablefield-&gt;Field)];
					$for_update[$table.'.'.$tablefield-&gt;Field] = "Changed type of {$table}.{$tablefield-&gt;Field} from {$tablefield-&gt;Type} to {$fieldtype}";
				}

				// Get the default value from the array
					//echo "{$cfields[strtolower($tablefield-&gt;Field)]}&lt;br&gt;";
				if (preg_match("| DEFAULT '(.*)'|i", $cfields[strtolower($tablefield-&gt;Field)], $matches)) {
					$default_value = $matches[1];
					if ($tablefield-&gt;Default != $default_value) {
						// Add a query to change the column's default value
						$cqueries[] = "ALTER TABLE {$table} ALTER COLUMN {$tablefield-&gt;Field} SET DEFAULT '{$default_value}'";
						$for_update[$table.'.'.$tablefield-&gt;Field] = "Changed default value of {$table}.{$tablefield-&gt;Field} from {$tablefield-&gt;Default} to {$default_value}";
					}
				}

				// Remove the field from the array (so it's not added)
				unset($cfields[strtolower($tablefield-&gt;Field)]);
			} else {
				// This field exists in the table, but not in the creation queries?
			}
		}

		// For every remaining field specified for the table
		foreach ($cfields as $fieldname =&gt; $fielddef) {
			// Push a query line into $cqueries that adds the field to that table
			$cqueries[] = "ALTER TABLE {$table} ADD COLUMN $fielddef";
			$for_update[$table.'.'.$fieldname] = 'Added column '.$table.'.'.$fieldname;
		}

		// Index stuff goes here
		// Fetch the table index structure from the database
		$tableindices = $wpdb-&gt;get_results("SHOW INDEX FROM {$table};");

		if ($tableindices) {
			// Clear the index array
			unset($index_ary);

			// For every index in the table
			foreach ($tableindices as $tableindex) {
				// Add the index to the index data array
				$keyname = $tableindex-&gt;Key_name;
				$index_ary[$keyname]['columns'][] = array('fieldname' =&gt; $tableindex-&gt;Column_name, 'subpart' =&gt; $tableindex-&gt;Sub_part);
				$index_ary[$keyname]['unique'] = ($tableindex-&gt;Non_unique == 0)?true:false;
			}

			// For each actual index in the index array
			foreach ($index_ary as $index_name =&gt; $index_data) {
				// Build a create string to compare to the query
				$index_string = '';
				if ($index_name == 'PRIMARY') {
					$index_string .= 'PRIMARY ';
				} else if($index_data['unique']) {
					$index_string .= 'UNIQUE ';
				}
				$index_string .= 'KEY ';
				if ($index_name != 'PRIMARY') {
</codefragment>
  </duplication>
  <duplication lines="7" tokens="27">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-groups/bp-groups-classes.php" line="869"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-groups/bp-groups-classes.php" line="891"/>
    <codefragment>	function get_recently_joined( $user_id, $limit = false, $page = false, $filter = false ) {
		global $wpdb, $bp;

		$pag_sql = $hidden_sql = $filter_sql = '';

		if ( $limit &amp;&amp; $page )
			$pag_sql = $wpdb-&gt;prepare( " LIMIT %d, %d", intval( ( $page - 1 ) * $limit), intval( $limit ) );
</codefragment>
  </duplication>
  <duplication lines="7" tokens="27">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-groups/bp-groups-classes.php" line="869"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-groups/bp-groups-classes.php" line="913"/>
    <codefragment>	function get_recently_joined( $user_id, $limit = false, $page = false, $filter = false ) {
		global $wpdb, $bp;

		$pag_sql = $hidden_sql = $filter_sql = '';

		if ( $limit &amp;&amp; $page )
			$pag_sql = $wpdb-&gt;prepare( " LIMIT %d, %d", intval( ( $page - 1 ) * $limit), intval( $limit ) );
</codefragment>
  </duplication>
  <duplication lines="6" tokens="4">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-groups/bp-groups-template.php" line="1709"/>
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-members/bp-members-template.php" line="214"/>
    <codefragment>			'mid_size' =&gt; 1
		));
	}

	function has_members() {
		if ( $this-&gt;member_count )
</codefragment>
  </duplication>
  <duplication lines="637" tokens="1586">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/_inc/ajax.php" line="17"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/_inc/ajax.php" line="17"/>
    <codefragment>function bp_dtheme_ajax_querystring( $query_string, $object ) {
	global $bp;

	if ( empty( $object ) )
		return false;

	/* Set up the cookies passed on this AJAX request. Store a local var to avoid conflicts */
	if ( !empty( $_POST['cookie'] ) )
		$_BP_COOKIE = wp_parse_args( str_replace( '; ', '&amp;', urldecode( $_POST['cookie'] ) ) );
	else
		$_BP_COOKIE = &amp;$_COOKIE;

	$qs = false;

	/***
	 * Check if any cookie values are set. If there are then override the default params passed to the
	 * template loop
	 */
	if ( !empty( $_BP_COOKIE['bp-' . $object . '-filter'] ) &amp;&amp; '-1' != $_BP_COOKIE['bp-' . $object . '-filter'] ) {
		$qs[] = 'type=' . $_BP_COOKIE['bp-' . $object . '-filter'];
		$qs[] = 'action=' . $_BP_COOKIE['bp-' . $object . '-filter']; // Activity stream filtering on action
	}

	if ( !empty( $_BP_COOKIE['bp-' . $object . '-scope'] ) ) {
		if ( 'personal' == $_BP_COOKIE['bp-' . $object . '-scope'] ) {
			$user_id = ( $bp-&gt;displayed_user-&gt;id ) ? $bp-&gt;displayed_user-&gt;id : $bp-&gt;loggedin_user-&gt;id;
			$qs[] = 'user_id=' . $user_id;
		}
		if ( 'all' != $_BP_COOKIE['bp-' . $object . '-scope'] &amp;&amp; empty( $bp-&gt;displayed_user-&gt;id ) &amp;&amp; !$bp-&gt;is_single_item )
			$qs[] = 'scope=' . $_BP_COOKIE['bp-' . $object . '-scope']; // Activity stream scope only on activity directory.
	}

	/* If page and search_terms have been passed via the AJAX post request, use those */
	if ( !empty( $_POST['page'] ) &amp;&amp; '-1' != $_POST['page'] )
		$qs[] = 'page=' . $_POST['page'];

	$object_search_text = bp_get_search_default_text( $object );
 	if ( !empty( $_POST['search_terms'] ) &amp;&amp; $object_search_text != $_POST['search_terms'] &amp;&amp; 'false' != $_POST['search_terms'] &amp;&amp; 'undefined' != $_POST['search_terms'] )
		$qs[] = 'search_terms=' . $_POST['search_terms'];

	/* Now pass the querystring to override default values. */
	$query_string = empty( $qs ) ? '' : join( '&amp;', (array)$qs );

	$object_filter = '';
	if ( isset( $_BP_COOKIE['bp-' . $object . '-filter'] ) )
		$object_filter = $_BP_COOKIE['bp-' . $object . '-filter'];

	$object_scope = '';
	if ( isset( $_BP_COOKIE['bp-' . $object . '-scope'] ) )
		$object_scope = $_BP_COOKIE['bp-' . $object . '-scope'];

	$object_page = '';
	if ( isset( $_BP_COOKIE['bp-' . $object . '-page'] ) )
		$object_page = $_BP_COOKIE['bp-' . $object . '-page'];

	$object_search_terms = '';
	if ( isset( $_BP_COOKIE['bp-' . $object . '-search-terms'] ) )
		$object_search_terms = $_BP_COOKIE['bp-' . $object . '-search-terms'];

	$object_extras = '';
	if ( isset( $_BP_COOKIE['bp-' . $object . '-extras'] ) )
		$object_extras = $_BP_COOKIE['bp-' . $object . '-extras'];

	return apply_filters( 'bp_dtheme_ajax_querystring', $query_string, $object, $object_filter, $object_scope, $object_page, $object_search_terms, $object_extras );
}
add_filter( 'bp_ajax_querystring', 'bp_dtheme_ajax_querystring', 10, 2 );

/* This function will simply load the template loop for the current object. On an AJAX request */
function bp_dtheme_object_template_loader() {

 	/**
	 * AJAX requests happen too early to be seen by bp_update_is_directory()
	 * so we do it manually here to ensure templates load with the correct
	 * context. Without this check, templates will load the 'single' version
	 * of themselves rather than the directory version.
	 */
	if ( !bp_current_action() )
		bp_update_is_directory( true, bp_current_component() );

	// Sanitize the post object
	$object = esc_attr( $_POST['object'] );

	// Locate the object template
	locate_template( array( "$object/$object-loop.php" ), true );
}
add_action( 'wp_ajax_members_filter', 'bp_dtheme_object_template_loader' );
add_action( 'wp_ajax_groups_filter',  'bp_dtheme_object_template_loader' );
add_action( 'wp_ajax_blogs_filter',   'bp_dtheme_object_template_loader' );
add_action( 'wp_ajax_forums_filter',  'bp_dtheme_object_template_loader' );

// This function will load the activity loop template when activity is requested via AJAX
function bp_dtheme_activity_template_loader() {
	global $bp;

	$scope = '';
	if ( !empty( $_POST['scope'] ) )
		$scope = $_POST['scope'];

	// We need to calculate and return the feed URL for each scope
	switch ( $scope ) {
		case 'friends':
			$feed_url = $bp-&gt;loggedin_user-&gt;domain . bp_get_activity_slug() . '/friends/feed/';
			break;
		case 'groups':
			$feed_url = $bp-&gt;loggedin_user-&gt;domain . bp_get_activity_slug() . '/groups/feed/';
			break;
		case 'favorites':
			$feed_url = $bp-&gt;loggedin_user-&gt;domain . bp_get_activity_slug() . '/favorites/feed/';
			break;
		case 'mentions':
			$feed_url = $bp-&gt;loggedin_user-&gt;domain . bp_get_activity_slug() . '/mentions/feed/';
			bp_activity_clear_new_mentions( $bp-&gt;loggedin_user-&gt;id );
			break;
		default:
			$feed_url = home_url( bp_get_activity_root_slug() . '/feed/' );
			break;
	}

	/* Buffer the loop in the template to a var for JS to spit out. */
	ob_start();
	locate_template( array( 'activity/activity-loop.php' ), true );
	$result['contents'] = ob_get_contents();
	$result['feed_url'] = apply_filters( 'bp_dtheme_activity_feed_url', $feed_url, $scope );
	ob_end_clean();

	echo json_encode( $result );
}
add_action( 'wp_ajax_activity_widget_filter', 'bp_dtheme_activity_template_loader' );
add_action( 'wp_ajax_activity_get_older_updates', 'bp_dtheme_activity_template_loader' );

/* AJAX update posting */
function bp_dtheme_post_update() {
	global $bp;

	// Check the nonce
	check_admin_referer( 'post_update', '_wpnonce_post_update' );

	if ( !is_user_logged_in() ) {
		echo '-1';
		return false;
	}

	if ( empty( $_POST['content'] ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'Please enter some content to post.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	$activity_id = 0;
	if ( empty( $_POST['object'] ) &amp;&amp; bp_is_active( 'activity' ) ) {
		$activity_id = bp_activity_post_update( array( 'content' =&gt; $_POST['content'] ) );

	} elseif ( $_POST['object'] == 'groups' ) {
		if ( !empty( $_POST['item_id'] ) &amp;&amp; bp_is_active( 'groups' ) )
			$activity_id = groups_post_update( array( 'content' =&gt; $_POST['content'], 'group_id' =&gt; $_POST['item_id'] ) );

	} else {
		$activity_id = apply_filters( 'bp_activity_custom_update', $_POST['object'], $_POST['item_id'], $_POST['content'] );
	}

	if ( empty( $activity_id ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'There was a problem posting your update, please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	if ( bp_has_activities ( 'include=' . $activity_id ) ) : ?&gt;
		&lt;?php while ( bp_activities() ) : bp_the_activity(); ?&gt;
			&lt;?php locate_template( array( 'activity/entry.php' ), true ) ?&gt;
		&lt;?php endwhile; ?&gt;
	 &lt;?php endif;
}
add_action( 'wp_ajax_post_update', 'bp_dtheme_post_update' );

/* AJAX activity comment posting */
function bp_dtheme_new_activity_comment() {
	global $bp;

	// Check the nonce
	check_admin_referer( 'new_activity_comment', '_wpnonce_new_activity_comment' );

	if ( !is_user_logged_in() ) {
		echo '-1';
		return false;
	}

	if ( empty( $_POST['content'] ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'Please do not leave the comment area blank.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	if ( empty( $_POST['form_id'] ) || empty( $_POST['comment_id'] ) || !is_numeric( $_POST['form_id'] ) || !is_numeric( $_POST['comment_id'] ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'There was an error posting that reply, please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	$comment_id = bp_activity_new_comment( array(
		'activity_id' =&gt; $_POST['form_id'],
		'content'     =&gt; $_POST['content'],
		'parent_id'   =&gt; $_POST['comment_id']
	) );

	if ( !$comment_id ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'There was an error posting that reply, please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	global $activities_template;

	// Load the new activity item into the $activities_template global
	bp_has_activities( 'display_comments=stream&amp;include=' . $comment_id );

	// Swap the current comment with the activity item we just loaded
	$activities_template-&gt;activity-&gt;id              = $activities_template-&gt;activities[0]-&gt;item_id;
	$activities_template-&gt;activity-&gt;current_comment = $activities_template-&gt;activities[0];

	$template = locate_template( 'activity/comment.php', false, false );

	// Backward compatibility. In older versions of BP, the markup was
	// generated in the PHP instead of a template. This ensures that
	// older themes (which are not children of bp-default and won't
	// have the new template) will still work.
	if ( empty( $template ) )
		$template = BP_PLUGIN_DIR . '/bp-themes/bp-default/activity/comment.php';

	load_template( $template, false );

	unset( $activities_template );
}
add_action( 'wp_ajax_new_activity_comment', 'bp_dtheme_new_activity_comment' );

/* AJAX delete an activity */
function bp_dtheme_delete_activity() {
	global $bp;

	// Check the nonce
	check_admin_referer( 'bp_activity_delete_link' );

	if ( !is_user_logged_in() ) {
		echo '-1';
		return false;
	}

	if ( empty( $_POST['id'] ) || !is_numeric( $_POST['id'] ) ) {
		echo '-1';
		return false;
	}

	$activity = new BP_Activity_Activity( (int) $_POST['id'] );

	// Check access
	if ( empty( $activity-&gt;user_id ) || !bp_activity_user_can_delete( $activity ) ) {
		echo '-1';
		return false;
	}

	// Call the action before the delete so plugins can still fetch information about it
	do_action( 'bp_activity_before_action_delete_activity', $activity-&gt;id, $activity-&gt;user_id );

	if ( !bp_activity_delete( array( 'id' =&gt; $activity-&gt;id, 'user_id' =&gt; $activity-&gt;user_id ) ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'There was a problem when deleting. Please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	do_action( 'bp_activity_action_delete_activity', $activity-&gt;id, $activity-&gt;user_id );

	return true;
}
add_action( 'wp_ajax_delete_activity', 'bp_dtheme_delete_activity' );

/* AJAX delete an activity comment */
function bp_dtheme_delete_activity_comment() {
	global $bp;

	/* Check the nonce */
	check_admin_referer( 'bp_activity_delete_link' );

	if ( !is_user_logged_in() ) {
		echo '-1';
		return false;
	}

	$comment = new BP_Activity_Activity( $_POST['id'] );

	/* Check access */
	if ( !is_super_admin() &amp;&amp; $comment-&gt;user_id != $bp-&gt;loggedin_user-&gt;id )
		return false;

	if ( empty( $_POST['id'] ) || !is_numeric( $_POST['id'] ) )
		return false;

	/* Call the action before the delete so plugins can still fetch information about it */
	do_action( 'bp_activity_before_action_delete_activity', $_POST['id'], $comment-&gt;user_id );

	if ( !bp_activity_delete_comment( $comment-&gt;item_id, $comment-&gt;id ) ) {
		echo '-1&lt;div id="message" class="error"&gt;&lt;p&gt;' . __( 'There was a problem when deleting. Please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
		return false;
	}

	do_action( 'bp_activity_action_delete_activity', $_POST['id'], $comment-&gt;user_id );

	return true;
}
add_action( 'wp_ajax_delete_activity_comment', 'bp_dtheme_delete_activity_comment' );

/* AJAX mark an activity as a favorite */
function bp_dtheme_mark_activity_favorite() {
	global $bp;

	bp_activity_add_user_favorite( $_POST['id'] );
	_e( 'Remove Favorite', 'buddypress' );
}
add_action( 'wp_ajax_activity_mark_fav', 'bp_dtheme_mark_activity_favorite' );

/* AJAX mark an activity as not a favorite */
function bp_dtheme_unmark_activity_favorite() {
	global $bp;

	bp_activity_remove_user_favorite( $_POST['id'] );
	_e( 'Favorite', 'buddypress' );
}
add_action( 'wp_ajax_activity_mark_unfav', 'bp_dtheme_unmark_activity_favorite' );

/**
 * AJAX handler for Read More link on long activity items
 *
 * @package BuddyPress
 * @since 1.5
 */
function bp_dtheme_get_single_activity_content() {
	$activity_array = bp_activity_get_specific( array(
		'activity_ids'     =&gt; $_POST['activity_id'],
		'display_comments' =&gt; 'stream'
	) );

	$activity = !empty( $activity_array['activities'][0] ) ? $activity_array['activities'][0] : false;

	if ( !$activity )
		exit(); // todo: error?

	do_action_ref_array( 'bp_dtheme_get_single_activity_content', array( &amp;$activity ) );

	// Activity content retrieved through AJAX should run through normal filters, but not be truncated
	remove_filter( 'bp_get_activity_content_body', 'bp_activity_truncate_entry', 5 );
	$content = apply_filters( 'bp_get_activity_content_body', $activity-&gt;content );

	echo $content;
	exit();
}
add_action( 'wp_ajax_get_single_activity_content', 'bp_dtheme_get_single_activity_content' );

/* AJAX invite a friend to a group functionality */
function bp_dtheme_ajax_invite_user() {
	global $bp;

	check_ajax_referer( 'groups_invite_uninvite_user' );

	if ( !$_POST['friend_id'] || !$_POST['friend_action'] || !$_POST['group_id'] )
		return false;

	if ( !bp_groups_user_can_send_invites( $_POST['group_id'] ) )
		return false;

	if ( !friends_check_friendship( $bp-&gt;loggedin_user-&gt;id, $_POST['friend_id'] ) )
		return false;

	if ( 'invite' == $_POST['friend_action'] ) {

		if ( !groups_invite_user( array( 'user_id' =&gt; $_POST['friend_id'], 'group_id' =&gt; $_POST['group_id'] ) ) )
			return false;

		$user = new BP_Core_User( $_POST['friend_id'] );

		echo '&lt;li id="uid-' . $user-&gt;id . '"&gt;';
		echo $user-&gt;avatar_thumb;
		echo '&lt;h4&gt;' . $user-&gt;user_link . '&lt;/h4&gt;';
		echo '&lt;span class="activity"&gt;' . esc_attr( $user-&gt;last_active ) . '&lt;/span&gt;';
		echo '&lt;div class="action"&gt;
				&lt;a class="button remove" href="' . wp_nonce_url( $bp-&gt;loggedin_user-&gt;domain . bp_get_groups_slug() . '/' . $_POST['group_id'] . '/invites/remove/' . $user-&gt;id, 'groups_invite_uninvite_user' ) . '" id="uid-' . esc_attr( $user-&gt;id ) . '"&gt;' . __( 'Remove Invite', 'buddypress' ) . '&lt;/a&gt;
			  &lt;/div&gt;';
		echo '&lt;/li&gt;';

	} else if ( 'uninvite' == $_POST['friend_action'] ) {

		if ( !groups_uninvite_user( $_POST['friend_id'], $_POST['group_id'] ) )
			return false;

		return true;

	} else {
		return false;
	}
}
add_action( 'wp_ajax_groups_invite_user', 'bp_dtheme_ajax_invite_user' );

/* AJAX add/remove a user as a friend when clicking the button */
function bp_dtheme_ajax_addremove_friend() {
	global $bp;

	if ( 'is_friend' == BP_Friends_Friendship::check_is_friend( $bp-&gt;loggedin_user-&gt;id, $_POST['fid'] ) ) {

		check_ajax_referer('friends_remove_friend');

		if ( !friends_remove_friend( $bp-&gt;loggedin_user-&gt;id, $_POST['fid'] ) ) {
			echo __("Friendship could not be canceled.", 'buddypress');
		} else {
			echo '&lt;a id="friend-' . $_POST['fid'] . '" class="add" rel="add" title="' . __( 'Add Friend', 'buddypress' ) . '" href="' . wp_nonce_url( $bp-&gt;loggedin_user-&gt;domain . bp_get_friends_slug() . '/add-friend/' . $_POST['fid'], 'friends_add_friend' ) . '"&gt;' . __( 'Add Friend', 'buddypress' ) . '&lt;/a&gt;';
		}

	} else if ( 'not_friends' == BP_Friends_Friendship::check_is_friend( $bp-&gt;loggedin_user-&gt;id, $_POST['fid'] ) ) {

		check_ajax_referer('friends_add_friend');

		if ( !friends_add_friend( $bp-&gt;loggedin_user-&gt;id, $_POST['fid'] ) ) {
			echo __("Friendship could not be requested.", 'buddypress');
		} else {
			echo '&lt;a href="' . $bp-&gt;loggedin_user-&gt;domain . bp_get_friends_slug() . '/requests" class="requested"&gt;' . __( 'Friendship Requested', 'buddypress' ) . '&lt;/a&gt;';
		}
	} else {
		echo __( 'Request Pending', 'buddypress' );
	}

	return false;
}
add_action( 'wp_ajax_addremove_friend', 'bp_dtheme_ajax_addremove_friend' );

/* AJAX accept a user as a friend when clicking the "accept" button */
function bp_dtheme_ajax_accept_friendship() {
	check_admin_referer( 'friends_accept_friendship' );

	if ( !friends_accept_friendship( $_POST['id'] ) )
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __( 'There was a problem accepting that request. Please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';

	return true;
}
add_action( 'wp_ajax_accept_friendship', 'bp_dtheme_ajax_accept_friendship' );

/* AJAX reject a user as a friend when clicking the "reject" button */
function bp_dtheme_ajax_reject_friendship() {
	check_admin_referer( 'friends_reject_friendship' );

	if ( !friends_reject_friendship( $_POST['id'] ) )
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __( 'There was a problem rejecting that request. Please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';

	return true;
}
add_action( 'wp_ajax_reject_friendship', 'bp_dtheme_ajax_reject_friendship' );

/* AJAX join or leave a group when clicking the "join/leave" button */
function bp_dtheme_ajax_joinleave_group() {
	global $bp;

	if ( groups_is_user_banned( $bp-&gt;loggedin_user-&gt;id, $_POST['gid'] ) )
		return false;

	if ( !$group = new BP_Groups_Group( $_POST['gid'], false, false ) )
		return false;

	if ( !groups_is_user_member( $bp-&gt;loggedin_user-&gt;id, $group-&gt;id ) ) {

		if ( 'public' == $group-&gt;status ) {

			check_ajax_referer( 'groups_join_group' );

			if ( !groups_join_group( $group-&gt;id ) ) {
				_e( 'Error joining group', 'buddypress' );
			} else {
				echo '&lt;a id="group-' . esc_attr( $group-&gt;id ) . '" class="leave-group" rel="leave" title="' . __( 'Leave Group', 'buddypress' ) . '" href="' . wp_nonce_url( bp_get_group_permalink( $group ) . 'leave-group', 'groups_leave_group' ) . '"&gt;' . __( 'Leave Group', 'buddypress' ) . '&lt;/a&gt;';
			}

		} else if ( 'private' == $group-&gt;status ) {

			check_ajax_referer( 'groups_request_membership' );

			if ( !groups_send_membership_request( $bp-&gt;loggedin_user-&gt;id, $group-&gt;id ) ) {
				_e( 'Error requesting membership', 'buddypress' );
			} else {
				echo '&lt;a id="group-' . esc_attr( $group-&gt;id ) . '" class="membership-requested" rel="membership-requested" title="' . __( 'Membership Requested', 'buddypress' ) . '" href="' . bp_get_group_permalink( $group ) . '"&gt;' . __( 'Membership Requested', 'buddypress' ) . '&lt;/a&gt;';
			}
		}

	} else {

		check_ajax_referer( 'groups_leave_group' );

		if ( !groups_leave_group( $group-&gt;id ) ) {
			_e( 'Error leaving group', 'buddypress' );
		} else {
			if ( 'public' == $group-&gt;status ) {
				echo '&lt;a id="group-' . esc_attr( $group-&gt;id ) . '" class="join-group" rel="join" title="' . __( 'Join Group', 'buddypress' ) . '" href="' . wp_nonce_url( bp_get_group_permalink( $group ) . 'join', 'groups_join_group' ) . '"&gt;' . __( 'Join Group', 'buddypress' ) . '&lt;/a&gt;';
			} else if ( 'private' == $group-&gt;status ) {
				echo '&lt;a id="group-' . esc_attr( $group-&gt;id ) . '" class="request-membership" rel="join" title="' . __( 'Request Membership', 'buddypress' ) . '" href="' . wp_nonce_url( bp_get_group_permalink( $group ) . 'request-membership', 'groups_send_membership_request' ) . '"&gt;' . __( 'Request Membership', 'buddypress' ) . '&lt;/a&gt;';
			}
		}
	}
}
add_action( 'wp_ajax_joinleave_group', 'bp_dtheme_ajax_joinleave_group' );

/* AJAX close and keep closed site wide notices from an admin in the sidebar */
function bp_dtheme_ajax_close_notice() {
	global $userdata;

	if ( !isset( $_POST['notice_id'] ) ) {
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __('There was a problem closing the notice.', 'buddypress') . '&lt;/p&gt;&lt;/div&gt;';
	} else {
		$notice_ids = bp_get_user_meta( $userdata-&gt;ID, 'closed_notices', true );

		$notice_ids[] = (int) $_POST['notice_id'];

		bp_update_user_meta( $userdata-&gt;ID, 'closed_notices', $notice_ids );
	}
}
add_action( 'wp_ajax_messages_close_notice', 'bp_dtheme_ajax_close_notice' );

/* AJAX send a private message reply to a thread */
function bp_dtheme_ajax_messages_send_reply() {
	global $bp;

	check_ajax_referer( 'messages_send_message' );

	$result = messages_new_message( array( 'thread_id' =&gt; $_REQUEST['thread_id'], 'content' =&gt; $_REQUEST['content'] ) );

	if ( $result ) { ?&gt;
		&lt;div class="message-box new-message"&gt;
			&lt;div class="message-metadata"&gt;
				&lt;?php do_action( 'bp_before_message_meta' ) ?&gt;
				&lt;?php echo bp_loggedin_user_avatar( 'type=thumb&amp;width=30&amp;height=30' ); ?&gt;

				&lt;strong&gt;&lt;a href="&lt;?php echo $bp-&gt;loggedin_user-&gt;domain ?&gt;"&gt;&lt;?php echo $bp-&gt;loggedin_user-&gt;fullname ?&gt;&lt;/a&gt; &lt;span class="activity"&gt;&lt;?php printf( __( 'Sent %s', 'buddypress' ), bp_core_time_since( bp_core_current_time() ) ) ?&gt;&lt;/span&gt;&lt;/strong&gt;

				&lt;?php do_action( 'bp_after_message_meta' ) ?&gt;
			&lt;/div&gt;

			&lt;?php do_action( 'bp_before_message_content' ) ?&gt;

			&lt;div class="message-content"&gt;
				&lt;?php echo stripslashes( apply_filters( 'bp_get_the_thread_message_content', $_REQUEST['content'] ) ) ?&gt;
			&lt;/div&gt;

			&lt;?php do_action( 'bp_after_message_content' ) ?&gt;

			&lt;div class="clear"&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;?php
	} else {
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __( 'There was a problem sending that reply. Please try again.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
	}
}
add_action( 'wp_ajax_messages_send_reply', 'bp_dtheme_ajax_messages_send_reply' );

/* AJAX mark a private message as unread in your inbox */
function bp_dtheme_ajax_message_markunread() {
	global $bp;

	if ( !isset($_POST['thread_ids']) ) {
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __('There was a problem marking messages as unread.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
	} else {
		$thread_ids = explode( ',', $_POST['thread_ids'] );

		for ( $i = 0, $count = count( $thread_ids ); $i &lt; $count; ++$i ) {
			BP_Messages_Thread::mark_as_unread($thread_ids[$i]);
		}
	}
}
add_action( 'wp_ajax_messages_markunread', 'bp_dtheme_ajax_message_markunread' );

/* AJAX mark a private message as read in your inbox */
function bp_dtheme_ajax_message_markread() {
	global $bp;

	if ( !isset($_POST['thread_ids']) ) {
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __('There was a problem marking messages as read.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
	} else {
		$thread_ids = explode( ',', $_POST['thread_ids'] );

		for ( $i = 0, $count = count( $thread_ids ); $i &lt; $count; ++$i ) {
			BP_Messages_Thread::mark_as_read($thread_ids[$i]);
		}
	}
}
add_action( 'wp_ajax_messages_markread', 'bp_dtheme_ajax_message_markread' );

/* AJAX delete a private message or array of messages in your inbox */
function bp_dtheme_ajax_messages_delete() {
	global $bp;

	if ( !isset($_POST['thread_ids']) ) {
		echo "-1&lt;div id='message' class='error'&gt;&lt;p&gt;" . __( 'There was a problem deleting messages.', 'buddypress' ) . '&lt;/p&gt;&lt;/div&gt;';
	} else {
		$thread_ids = explode( ',', $_POST['thread_ids'] );

		for ( $i = 0, $count = count( $thread_ids ); $i &lt; $count; ++$i )
			BP_Messages_Thread::delete($thread_ids[$i]);

		_e( 'Messages deleted.', 'buddypress' );
	}
}
add_action( 'wp_ajax_messages_delete', 'bp_dtheme_ajax_messages_delete' );

/**
 * bp_dtheme_ajax_messages_autocomplete_results()
 *
 * AJAX handler for autocomplete. Displays friends only, unless BP_MESSAGES_AUTOCOMPLETE_ALL is defined
 *
 * @global object object $bp Global BuddyPress settings object
 * @return none
 */
function bp_dtheme_ajax_messages_autocomplete_results() {
	global $bp;

	// Include everyone in the autocomplete, or just friends?
	if ( $bp-&gt;messages-&gt;slug == $bp-&gt;current_component )
		$autocomplete_all = $bp-&gt;messages-&gt;autocomplete_all;

	$friends  = false;
	$pag_page = 1;

	$limit = $_GET['limit'] ? $_GET['limit'] : apply_filters( 'bp_autocomplete_max_results', 10 );

	// Get the user ids based on the search terms
	if ( !empty( $autocomplete_all ) ) {
		$users = BP_Core_User::search_users( $_GET['q'], $limit, $pag_page );

		if ( !empty( $users['users'] ) ) {
			// Build an array with the correct format
			$user_ids = array();
			foreach( $users['users'] as $user ) {
				if ( $user-&gt;id != $bp-&gt;loggedin_user-&gt;id )
					$user_ids[] = $user-&gt;id;
			}

			$user_ids = apply_filters( 'bp_core_autocomplete_ids', $user_ids, $_GET['q'], $limit );
		}
	} else {
		if ( bp_is_active( 'friends' ) ) {
			$users = friends_search_friends( $_GET['q'], $bp-&gt;loggedin_user-&gt;id, $limit, 1 );

			// Keeping the bp_friends_autocomplete_list filter for backward compatibility
			$users = apply_filters( 'bp_friends_autocomplete_list', $users, $_GET['q'], $limit );
</codefragment>
  </duplication>
  <duplication lines="46" tokens="40">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/activity/entry.php" line="15"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/activity/entry.php" line="15"/>
    <codefragment>&lt;?php do_action( 'bp_before_activity_entry' ); ?&gt;

&lt;li class="&lt;?php bp_activity_css_class(); ?&gt;" id="activity-&lt;?php bp_activity_id(); ?&gt;"&gt;
	&lt;div class="activity-avatar"&gt;
		&lt;a href="&lt;?php bp_activity_user_link(); ?&gt;"&gt;

			&lt;?php bp_activity_avatar(); ?&gt;

		&lt;/a&gt;
	&lt;/div&gt;

	&lt;div class="activity-content"&gt;

		&lt;div class="activity-header"&gt;

			&lt;?php bp_activity_action(); ?&gt;

		&lt;/div&gt;

		&lt;?php if ( 'activity_comment' == bp_get_activity_type() ) : ?&gt;

			&lt;div class="activity-inreplyto"&gt;
				&lt;strong&gt;&lt;?php _e( 'In reply to: ', 'buddypress' ); ?&gt;&lt;/strong&gt;&lt;?php bp_activity_parent_content(); ?&gt; &lt;a href="&lt;?php bp_activity_thread_permalink(); ?&gt;" class="view" title="&lt;?php _e( 'View Thread / Permalink', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'View', 'buddypress' ); ?&gt;&lt;/a&gt;
			&lt;/div&gt;

		&lt;?php endif; ?&gt;

		&lt;?php if ( bp_activity_has_content() ) : ?&gt;

			&lt;div class="activity-inner"&gt;

				&lt;?php bp_activity_content_body(); ?&gt;

			&lt;/div&gt;

		&lt;?php endif; ?&gt;

		&lt;?php do_action( 'bp_activity_entry_content' ); ?&gt;

		&lt;?php if ( is_user_logged_in() ) : ?&gt;

			&lt;div class="activity-meta"&gt;

				&lt;?php if ( bp_activity_can_comment() ) : ?&gt;

					&lt;a href="&lt;?php bp_get_activity_comment_link(); ?&gt;" class="button acomment-reply bp-primary-action" id="acomment-comment-&lt;?php bp_activity_id(); ?&gt;"&gt;&lt;?php printf( __( 'Comment &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_activity_get_comment_count() ); ?&gt;&lt;/a&gt;
</codefragment>
  </duplication>
  <duplication lines="83" tokens="146">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/activity/index.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/activity/index.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;?php do_action( 'bp_before_directory_activity_page' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

			&lt;?php do_action( 'bp_before_directory_activity' ); ?&gt;

			&lt;?php if ( !is_user_logged_in() ) : ?&gt;

				&lt;h3&gt;&lt;?php _e( 'Site Activity', 'buddypress' ); ?&gt;&lt;/h3&gt;

			&lt;?php endif; ?&gt;

			&lt;?php do_action( 'bp_before_directory_activity_content' ); ?&gt;

			&lt;?php if ( is_user_logged_in() ) : ?&gt;

				&lt;?php locate_template( array( 'activity/post-form.php'), true ); ?&gt;

			&lt;?php endif; ?&gt;

			&lt;?php do_action( 'template_notices' ); ?&gt;

			&lt;div class="item-list-tabs activity-type-tabs" role="navigation"&gt;
				&lt;ul&gt;
					&lt;?php do_action( 'bp_before_activity_type_tab_all' ); ?&gt;

					&lt;li class="selected" id="activity-all"&gt;&lt;a href="&lt;?php echo bp_loggedin_user_domain() . bp_get_activity_slug() . '/'; ?&gt;" title="&lt;?php _e( 'The public activity for everyone on this site.', 'buddypress' ); ?&gt;"&gt;&lt;?php printf( __( 'All Members &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_total_site_member_count() ); ?&gt;&lt;/a&gt;&lt;/li&gt;

					&lt;?php if ( is_user_logged_in() ) : ?&gt;

						&lt;?php do_action( 'bp_before_activity_type_tab_friends' ) ?&gt;

						&lt;?php if ( bp_is_active( 'friends' ) ) : ?&gt;

							&lt;?php if ( bp_get_total_friend_count( bp_loggedin_user_id() ) ) : ?&gt;

								&lt;li id="activity-friends"&gt;&lt;a href="&lt;?php echo bp_loggedin_user_domain() . bp_get_activity_slug() . '/' . bp_get_friends_slug() . '/'; ?&gt;" title="&lt;?php _e( 'The activity of my friends only.', 'buddypress' ); ?&gt;"&gt;&lt;?php printf( __( 'My Friends &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_total_friend_count( bp_loggedin_user_id() ) ); ?&gt;&lt;/a&gt;&lt;/li&gt;

							&lt;?php endif; ?&gt;

						&lt;?php endif; ?&gt;

						&lt;?php do_action( 'bp_before_activity_type_tab_groups' ) ?&gt;

						&lt;?php if ( bp_is_active( 'groups' ) ) : ?&gt;

							&lt;?php if ( bp_get_total_group_count_for_user( bp_loggedin_user_id() ) ) : ?&gt;

								&lt;li id="activity-groups"&gt;&lt;a href="&lt;?php echo bp_loggedin_user_domain() . bp_get_activity_slug() . '/' . bp_get_groups_slug() . '/'; ?&gt;" title="&lt;?php _e( 'The activity of groups I am a member of.', 'buddypress' ); ?&gt;"&gt;&lt;?php printf( __( 'My Groups &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_total_group_count_for_user( bp_loggedin_user_id() ) ); ?&gt;&lt;/a&gt;&lt;/li&gt;

							&lt;?php endif; ?&gt;

						&lt;?php endif; ?&gt;

						&lt;?php do_action( 'bp_before_activity_type_tab_favorites' ); ?&gt;

						&lt;?php if ( bp_get_total_favorite_count_for_user( bp_loggedin_user_id() ) ) : ?&gt;

							&lt;li id="activity-favorites"&gt;&lt;a href="&lt;?php echo bp_loggedin_user_domain() . bp_get_activity_slug() . '/favorites/'; ?&gt;" title="&lt;?php _e( "The activity I've marked as a favorite.", 'buddypress' ); ?&gt;"&gt;&lt;?php printf( __( 'My Favorites &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_total_favorite_count_for_user( bp_loggedin_user_id() ) ); ?&gt;&lt;/a&gt;&lt;/li&gt;

						&lt;?php endif; ?&gt;

						&lt;?php do_action( 'bp_before_activity_type_tab_mentions' ); ?&gt;

						&lt;li id="activity-mentions"&gt;&lt;a href="&lt;?php echo bp_loggedin_user_domain() . bp_get_activity_slug() . '/mentions/'; ?&gt;" title="&lt;?php _e( 'Activity that I have been mentioned in.', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Mentions', 'buddypress' ); ?&gt;&lt;?php if ( bp_get_total_mention_count_for_user( bp_loggedin_user_id() ) ) : ?&gt; &lt;strong&gt;&lt;?php printf( __( '&lt;span&gt;%s new&lt;/span&gt;', 'buddypress' ), bp_get_total_mention_count_for_user( bp_loggedin_user_id() ) ); ?&gt;&lt;/strong&gt;&lt;?php endif; ?&gt;&lt;/a&gt;&lt;/li&gt;

					&lt;?php endif; ?&gt;

					&lt;?php do_action( 'bp_activity_type_tabs' ); ?&gt;
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!-- .item-list-tabs --&gt;

			&lt;div class="item-list-tabs no-ajax" id="subnav" role="navigation"&gt;
				&lt;ul&gt;
					&lt;li class="feed"&gt;&lt;a href="&lt;?php bp_sitewide_activity_feed_link() ?&gt;" title="&lt;?php _e( 'RSS Feed', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'RSS', 'buddypress' ); ?&gt;&lt;/a&gt;&lt;/li&gt;

					&lt;?php do_action( 'bp_activity_syndication_options' ); ?&gt;

					&lt;li id="activity-filter-select" class="last"&gt;
						&lt;label for="activity-filter-by"&gt;&lt;?php _e( 'Show:', 'buddypress' ); ?&gt;&lt;/label&gt; 
</codefragment>
  </duplication>
  <duplication lines="6" tokens="5">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/activity/post-form.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/activity/post-form.php" line="12"/>
    <codefragment>&lt;form action="&lt;?php bp_activity_post_form_action(); ?&gt;" method="post" id="whats-new-form" name="whats-new-form" role="complementary"&gt;

	&lt;?php do_action( 'bp_before_activity_post_form' ); ?&gt;

	&lt;div id="whats-new-avatar"&gt;
		&lt;a href="&lt;?php echo bp_loggedin_user_domain(); ?&gt;"&gt;
</codefragment>
  </duplication>
  <duplication lines="12" tokens="17">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/blogs/index.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/blogs/index.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;?php do_action( 'bp_before_directory_blogs_page' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

		&lt;?php do_action( 'bp_before_directory_blogs' ); ?&gt;

		&lt;form action="" method="post" id="blogs-directory-form" class="dir-form"&gt;

			&lt;h3&gt;&lt;?php _e( 'Site Directory', 'buddypress' ); ?&gt;&lt;?php if ( is_user_logged_in() &amp;&amp; bp_blog_signup_enabled() ) : ?&gt; &amp;nbsp;&lt;a class="button" href="&lt;?php echo bp_get_root_domain() . '/' . bp_get_blogs_root_slug() . '/create/' ?&gt;"&gt;&lt;?php _e( 'Create a Site', 'buddypress' ); ?&gt;&lt;/a&gt;&lt;?php endif; ?&gt;&lt;/h3&gt;
</codefragment>
  </duplication>
  <duplication lines="42" tokens="50">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/functions.php" line="104"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/bp-functions.php" line="66"/>
    <codefragment>	if ( !is_admin() ) {
		// Register buttons for the relevant component templates
		// Friends button
		if ( bp_is_active( 'friends' ) )
			add_action( 'bp_member_header_actions',    'bp_add_friend_button' );

		// Activity button
		if ( bp_is_active( 'activity' ) )
			add_action( 'bp_member_header_actions',    'bp_send_public_message_button' );

		// Messages button
		if ( bp_is_active( 'messages' ) )
			add_action( 'bp_member_header_actions',    'bp_send_private_message_button' );

		// Group buttons
		if ( bp_is_active( 'groups' ) ) {
			add_action( 'bp_group_header_actions',     'bp_group_join_button' );
			add_action( 'bp_group_header_actions',     'bp_group_new_topic_button' );
			add_action( 'bp_directory_groups_actions', 'bp_group_join_button' );
		}

		// Blog button
		if ( bp_is_active( 'blogs' ) )
			add_action( 'bp_directory_blogs_actions',  'bp_blogs_visit_blog_button' );
	}
}
add_action( 'after_setup_theme', 'bp_dtheme_setup' );
endif;

if ( !function_exists( 'bp_dtheme_enqueue_scripts' ) ) :
/**
 * Enqueue theme javascript safely
 *
 * @see http://codex.wordpress.org/Function_Reference/wp_enqueue_script
 * @since 1.5
 */
function bp_dtheme_enqueue_scripts() {
	// Bump this when changes are made to bust cache
	$version = '20120110';

	// Enqueue the global JS - Ajax will not work without it
	wp_enqueue_script( 'dtheme-ajax-js', get_template_directory_uri() . '/_inc/global.js', array( 'jquery' ), $version );
</codefragment>
  </duplication>
  <duplication lines="20" tokens="22">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/functions.php" line="504"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/bp-functions.php" line="126"/>
    <codefragment>endif;

if ( !function_exists( 'bp_dtheme_page_on_front' ) ) :
/**
 * Return the ID of a page set as the home page.
 *
 * @return false|int ID of page set as the home page
 * @since 1.2
 */
function bp_dtheme_page_on_front() {
	if ( 'page' != get_option( 'show_on_front' ) )
		return false;

	return apply_filters( 'bp_dtheme_page_on_front', get_option( 'page_on_front' ) );
}
endif;

if ( !function_exists( 'bp_dtheme_activity_secondary_avatars' ) ) :
/**
 * Add secondary avatar image to this activity stream's record, if supported.
</codefragment>
  </duplication>
  <duplication lines="27" tokens="15">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/forums/forums-loop.php" line="14"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/forums/forums-loop.php" line="14"/>
    <codefragment>&lt;?php do_action( 'bp_before_forums_loop' ); ?&gt;

&lt;?php if ( bp_has_forum_topics( bp_ajax_querystring( 'forums' ) ) ) : ?&gt;

	&lt;div id="pag-top" class="pagination"&gt;

		&lt;div class="pag-count" id="topic-count-top"&gt;

			&lt;?php bp_forum_pagination_count(); ?&gt;

		&lt;/div&gt;

		&lt;div class="pagination-links" id="topic-pag-top"&gt;

			&lt;?php bp_forum_pagination(); ?&gt;

		&lt;/div&gt;

	&lt;/div&gt;

	&lt;?php do_action( 'bp_before_directory_forums_list' ); ?&gt;

	&lt;table class="forum"&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th id="th-title"&gt;&lt;?php _e( 'Topic', 'buddypress' ); ?&gt;&lt;/th&gt;
				&lt;th id="th-postcount"&gt;&lt;?php _e( 'Posts', 'buddypress' ); ?&gt;&lt;/th&gt;
</codefragment>
  </duplication>
  <duplication lines="89" tokens="92">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/forums/index.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/forums/index.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;?php do_action( 'bp_before_directory_forums_page' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

			&lt;?php do_action( 'bp_before_directory_forums' ); ?&gt;

			&lt;form action="" method="post" id="forums-search-form" class="dir-form"&gt;

				&lt;h3&gt;&lt;?php _e( 'Forums Directory', 'buddypress' ); ?&gt;&lt;?php if ( is_user_logged_in() ) : ?&gt; &amp;nbsp;&lt;a class="button show-hide-new" href="#new-topic" id="new-topic-button"&gt;&lt;?php _e( 'New Topic', 'buddypress' ); ?&gt;&lt;/a&gt;&lt;?php endif; ?&gt;&lt;/h3&gt;

				&lt;?php do_action( 'bp_before_directory_forums_content' ); ?&gt;

				&lt;div id="forums-dir-search" class="dir-search" role="search"&gt;

					&lt;?php bp_directory_forums_search_form(); ?&gt;

				&lt;/div&gt;
			&lt;/form&gt;

			&lt;?php do_action( 'bp_before_topics' ); ?&gt;

			&lt;form action="" method="post" id="forums-directory-form" class="dir-form"&gt;

				&lt;div class="item-list-tabs" role="navigation"&gt;
					&lt;ul&gt;
						&lt;li class="selected" id="forums-all"&gt;&lt;a href="&lt;?php echo trailingslashit( bp_get_root_domain() . '/' . bp_get_forums_root_slug() ); ?&gt;"&gt;&lt;?php printf( __( 'All Topics &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_forum_topic_count() ); ?&gt;&lt;/a&gt;&lt;/li&gt;

						&lt;?php if ( is_user_logged_in() &amp;&amp; bp_get_forum_topic_count_for_user( bp_loggedin_user_id() ) ) : ?&gt;

							&lt;li id="forums-personal"&gt;&lt;a href="&lt;?php echo trailingslashit( bp_loggedin_user_domain() . bp_get_forums_slug() . '/topics' ); ?&gt;"&gt;&lt;?php printf( __( 'My Topics &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_forum_topic_count_for_user( bp_loggedin_user_id() ) ); ?&gt;&lt;/a&gt;&lt;/li&gt;

						&lt;?php endif; ?&gt;

						&lt;?php do_action( 'bp_forums_directory_group_types' ); ?&gt;

					&lt;/ul&gt;
				&lt;/div&gt;

				&lt;div class="item-list-tabs" id="subnav" role="navigation"&gt;
					&lt;ul&gt;

						&lt;?php do_action( 'bp_forums_directory_group_sub_types' ); ?&gt;

						&lt;li id="forums-order-select" class="last filter"&gt;

							&lt;label for="forums-order-by"&gt;&lt;?php _e( 'Order By:', 'buddypress' ); ?&gt;&lt;/label&gt;
							&lt;select id="forums-order-by"&gt;
								&lt;option value="active"&gt;&lt;?php _e( 'Last Active', 'buddypress' ); ?&gt;&lt;/option&gt;
								&lt;option value="popular"&gt;&lt;?php _e( 'Most Posts', 'buddypress' ); ?&gt;&lt;/option&gt;
								&lt;option value="unreplied"&gt;&lt;?php _e( 'Unreplied', 'buddypress' ); ?&gt;&lt;/option&gt;

								&lt;?php do_action( 'bp_forums_directory_order_options' ); ?&gt;

							&lt;/select&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
				&lt;/div&gt;

				&lt;div id="forums-dir-list" class="forums dir-list" role="main"&gt;

					&lt;?php locate_template( array( 'forums/forums-loop.php' ), true ); ?&gt;

				&lt;/div&gt;

				&lt;?php do_action( 'bp_directory_forums_content' ); ?&gt;

				&lt;?php wp_nonce_field( 'directory_forums', '_wpnonce-forums-filter' ); ?&gt;

			&lt;/form&gt;

			&lt;?php do_action( 'bp_after_directory_forums' ); ?&gt;

			&lt;?php do_action( 'bp_before_new_topic_form' ); ?&gt;

			&lt;div id="new-topic-post"&gt;

				&lt;?php if ( is_user_logged_in() ) : ?&gt;

					&lt;?php if ( bp_is_active( 'groups' ) &amp;&amp; bp_has_groups( 'user_id=' . bp_loggedin_user_id() . '&amp;type=alphabetical&amp;max=100&amp;per_page=100' ) ) : ?&gt;

						&lt;form action="" method="post" id="forum-topic-form" class="standard-form"&gt;

							&lt;?php do_action( 'groups_forum_new_topic_before' ) ?&gt;

							&lt;a name="post-new"&gt;&lt;/a&gt;
							&lt;h5&gt;&lt;?php _e( 'Create New Topic:', 'buddypress' ); ?&gt;&lt;/h5&gt;
</codefragment>
  </duplication>
  <duplication lines="219" tokens="219">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/create.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/create.php" line="12"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

		&lt;form action="&lt;?php bp_group_creation_form_action(); ?&gt;" method="post" id="create-group-form" class="standard-form" enctype="multipart/form-data"&gt;
			&lt;h3&gt;&lt;?php _e( 'Create a Group', 'buddypress' ); ?&gt; &amp;nbsp;&lt;a class="button" href="&lt;?php echo trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() ); ?&gt;"&gt;&lt;?php _e( 'Groups Directory', 'buddypress' ); ?&gt;&lt;/a&gt;&lt;/h3&gt;

			&lt;?php do_action( 'bp_before_create_group' ); ?&gt;

			&lt;div class="item-list-tabs no-ajax" id="group-create-tabs" role="navigation"&gt;
				&lt;ul&gt;

					&lt;?php bp_group_creation_tabs(); ?&gt;

				&lt;/ul&gt;
			&lt;/div&gt;

			&lt;?php do_action( 'template_notices' ); ?&gt;

			&lt;div class="item-body" id="group-create-body"&gt;

				&lt;?php /* Group creation step 1: Basic group details */ ?&gt;
				&lt;?php if ( bp_is_group_creation_step( 'group-details' ) ) : ?&gt;

					&lt;?php do_action( 'bp_before_group_details_creation_step' ); ?&gt;

					&lt;label for="group-name"&gt;&lt;?php _e( 'Group Name (required)', 'buddypress' ); ?&gt;&lt;/label&gt;
					&lt;input type="text" name="group-name" id="group-name" aria-required="true" value="&lt;?php bp_new_group_name(); ?&gt;" /&gt;

					&lt;label for="group-desc"&gt;&lt;?php _e( 'Group Description (required)', 'buddypress' ) ?&gt;&lt;/label&gt;
					&lt;textarea name="group-desc" id="group-desc" aria-required="true"&gt;&lt;?php bp_new_group_description(); ?&gt;&lt;/textarea&gt;

					&lt;?php
					do_action( 'bp_after_group_details_creation_step' );
					do_action( 'groups_custom_group_fields_editable' ); // @Deprecated

					wp_nonce_field( 'groups_create_save_group-details' ); ?&gt;

				&lt;?php endif; ?&gt;

				&lt;?php /* Group creation step 2: Group settings */ ?&gt;
				&lt;?php if ( bp_is_group_creation_step( 'group-settings' ) ) : ?&gt;

					&lt;?php do_action( 'bp_before_group_settings_creation_step' ); ?&gt;

					&lt;?php if ( bp_is_active( 'forums' ) ) : ?&gt;
						&lt;?php if ( bp_forums_is_installed_correctly() ) : ?&gt;

							&lt;div class="checkbox"&gt;
								&lt;label&gt;&lt;input type="checkbox" name="group-show-forum" id="group-show-forum" value="1"&lt;?php checked( bp_get_new_group_enable_forum(), true, true ); ?&gt; /&gt; &lt;?php _e( 'Enable discussion forum', 'buddypress' ); ?&gt;&lt;/label&gt;
							&lt;/div&gt;

						&lt;?php else : ?&gt;
							&lt;?php if ( is_super_admin() ) : ?&gt;

								&lt;div class="checkbox"&gt;
									&lt;label&gt;&lt;input type="checkbox" disabled="disabled" name="disabled" id="disabled" value="0" /&gt; &lt;?php printf( __( '&lt;strong&gt;Attention Site Admin:&lt;/strong&gt; Group forums require the &lt;a href="%s"&gt;correct setup and configuration&lt;/a&gt; of a bbPress installation.', 'buddypress' ), bp_get_root_domain() . '/wp-admin/admin.php?page=bb-forums-setup' ); ?&gt;&lt;/label&gt;
								&lt;/div&gt;

							&lt;?php endif; ?&gt;
						&lt;?php endif; ?&gt;
					&lt;?php endif; ?&gt;

					&lt;hr /&gt;

					&lt;h4&gt;&lt;?php _e( 'Privacy Options', 'buddypress' ); ?&gt;&lt;/h4&gt;

					&lt;div class="radio"&gt;
						&lt;label&gt;&lt;input type="radio" name="group-status" value="public"&lt;?php if ( 'public' == bp_get_new_group_status() || !bp_get_new_group_status() ) { ?&gt; checked="checked"&lt;?php } ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e( 'This is a public group', 'buddypress' ); ?&gt;&lt;/strong&gt;
							&lt;ul&gt;
								&lt;li&gt;&lt;?php _e( 'Any site member can join this group.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'This group will be listed in the groups directory and in search results.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'Group content and activity will be visible to any site member.', 'buddypress' ); ?&gt;&lt;/li&gt;
							&lt;/ul&gt;
						&lt;/label&gt;

						&lt;label&gt;&lt;input type="radio" name="group-status" value="private"&lt;?php if ( 'private' == bp_get_new_group_status() ) { ?&gt; checked="checked"&lt;?php } ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e( 'This is a private group', 'buddypress' ); ?&gt;&lt;/strong&gt;
							&lt;ul&gt;
								&lt;li&gt;&lt;?php _e( 'Only users who request membership and are accepted can join the group.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'This group will be listed in the groups directory and in search results.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'Group content and activity will only be visible to members of the group.', 'buddypress' ); ?&gt;&lt;/li&gt;
							&lt;/ul&gt;
						&lt;/label&gt;

						&lt;label&gt;&lt;input type="radio" name="group-status" value="hidden"&lt;?php if ( 'hidden' == bp_get_new_group_status() ) { ?&gt; checked="checked"&lt;?php } ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e('This is a hidden group', 'buddypress'); ?&gt;&lt;/strong&gt;
							&lt;ul&gt;
								&lt;li&gt;&lt;?php _e( 'Only users who are invited can join the group.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'This group will not be listed in the groups directory or search results.', 'buddypress' ); ?&gt;&lt;/li&gt;
								&lt;li&gt;&lt;?php _e( 'Group content and activity will only be visible to members of the group.', 'buddypress' ); ?&gt;&lt;/li&gt;
							&lt;/ul&gt;
						&lt;/label&gt;
					&lt;/div&gt;

					&lt;hr /&gt;

					&lt;h4&gt;&lt;?php _e( 'Group Invitations', 'buddypress' ); ?&gt;&lt;/h4&gt;

					&lt;p&gt;&lt;?php _e( 'Which members of this group are allowed to invite others?', 'buddypress' ) ?&gt;&lt;/p&gt;

					&lt;div class="radio"&gt;
						&lt;label&gt;
							&lt;input type="radio" name="group-invite-status" value="members"&lt;?php bp_group_show_invite_status_setting( 'members' ) ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e( 'All group members', 'buddypress' ) ?&gt;&lt;/strong&gt;
						&lt;/label&gt;

						&lt;label&gt;
							&lt;input type="radio" name="group-invite-status" value="mods"&lt;?php bp_group_show_invite_status_setting( 'mods' ) ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e( 'Group admins and mods only', 'buddypress' ) ?&gt;&lt;/strong&gt;
						&lt;/label&gt;

						&lt;label&gt;
							&lt;input type="radio" name="group-invite-status" value="admins"&lt;?php bp_group_show_invite_status_setting( 'admins' ) ?&gt; /&gt;
							&lt;strong&gt;&lt;?php _e( 'Group admins only', 'buddypress' ) ?&gt;&lt;/strong&gt;
						&lt;/label&gt;
					&lt;/div&gt;

					&lt;hr /&gt;

					&lt;?php do_action( 'bp_after_group_settings_creation_step' ); ?&gt;

					&lt;?php wp_nonce_field( 'groups_create_save_group-settings' ); ?&gt;

				&lt;?php endif; ?&gt;

				&lt;?php /* Group creation step 3: Avatar Uploads */ ?&gt;
				&lt;?php if ( bp_is_group_creation_step( 'group-avatar' ) ) : ?&gt;

					&lt;?php do_action( 'bp_before_group_avatar_creation_step' ); ?&gt;

					&lt;?php if ( 'upload-image' == bp_get_avatar_admin_step() ) : ?&gt;

						&lt;div class="left-menu"&gt;

							&lt;?php bp_new_group_avatar(); ?&gt;

						&lt;/div&gt;&lt;!-- .left-menu --&gt;

						&lt;div class="main-column"&gt;
							&lt;p&gt;&lt;?php _e( "Upload an image to use as an avatar for this group. The image will be shown on the main group page, and in search results.", 'buddypress' ); ?&gt;&lt;/p&gt;

							&lt;p&gt;
								&lt;input type="file" name="file" id="file" /&gt;
								&lt;input type="submit" name="upload" id="upload" value="&lt;?php _e( 'Upload Image', 'buddypress' ); ?&gt;" /&gt;
								&lt;input type="hidden" name="action" id="action" value="bp_avatar_upload" /&gt;
							&lt;/p&gt;

							&lt;p&gt;&lt;?php _e( 'To skip the avatar upload process, hit the "Next Step" button.', 'buddypress' ); ?&gt;&lt;/p&gt;
						&lt;/div&gt;&lt;!-- .main-column --&gt;

					&lt;?php endif; ?&gt;

					&lt;?php if ( 'crop-image' == bp_get_avatar_admin_step() ) : ?&gt;

						&lt;h3&gt;&lt;?php _e( 'Crop Group Avatar', 'buddypress' ); ?&gt;&lt;/h3&gt;

						&lt;img src="&lt;?php bp_avatar_to_crop(); ?&gt;" id="avatar-to-crop" class="avatar" alt="&lt;?php _e( 'Avatar to crop', 'buddypress' ); ?&gt;" /&gt;

						&lt;div id="avatar-crop-pane"&gt;
							&lt;img src="&lt;?php bp_avatar_to_crop(); ?&gt;" id="avatar-crop-preview" class="avatar" alt="&lt;?php _e( 'Avatar preview', 'buddypress' ); ?&gt;" /&gt;
						&lt;/div&gt;

						&lt;input type="submit" name="avatar-crop-submit" id="avatar-crop-submit" value="&lt;?php _e( 'Crop Image', 'buddypress' ); ?&gt;" /&gt;

						&lt;input type="hidden" name="image_src" id="image_src" value="&lt;?php bp_avatar_to_crop_src(); ?&gt;" /&gt;
						&lt;input type="hidden" name="upload" id="upload" /&gt;
						&lt;input type="hidden" id="x" name="x" /&gt;
						&lt;input type="hidden" id="y" name="y" /&gt;
						&lt;input type="hidden" id="w" name="w" /&gt;
						&lt;input type="hidden" id="h" name="h" /&gt;

					&lt;?php endif; ?&gt;

					&lt;?php do_action( 'bp_after_group_avatar_creation_step' ); ?&gt;

					&lt;?php wp_nonce_field( 'groups_create_save_group-avatar' ); ?&gt;

				&lt;?php endif; ?&gt;

				&lt;?php /* Group creation step 4: Invite friends to group */ ?&gt;
				&lt;?php if ( bp_is_group_creation_step( 'group-invites' ) ) : ?&gt;

					&lt;?php do_action( 'bp_before_group_invites_creation_step' ); ?&gt;

					&lt;?php if ( bp_is_active( 'friends' ) &amp;&amp; bp_get_total_friend_count( bp_loggedin_user_id() ) ) : ?&gt;

						&lt;div class="left-menu"&gt;

							&lt;div id="invite-list"&gt;
								&lt;ul&gt;
									&lt;?php bp_new_group_invite_friend_list(); ?&gt;
								&lt;/ul&gt;

								&lt;?php wp_nonce_field( 'groups_invite_uninvite_user', '_wpnonce_invite_uninvite_user' ); ?&gt;
							&lt;/div&gt;

						&lt;/div&gt;&lt;!-- .left-menu --&gt;

						&lt;div class="main-column"&gt;

							&lt;div id="message" class="info"&gt;
								&lt;p&gt;&lt;?php _e('Select people to invite from your friends list.', 'buddypress'); ?&gt;&lt;/p&gt;
							&lt;/div&gt;

							&lt;?php /* The ID 'friend-list' is important for AJAX support. */ ?&gt;
							&lt;ul id="friend-list" class="item-list" role="main"&gt;

							&lt;?php if ( bp_group_has_invites() ) : ?&gt;

								&lt;?php while ( bp_group_invites() ) : bp_group_the_invite(); ?&gt;

									&lt;li id="&lt;?php bp_group_invite_item_id(); ?&gt;"&gt;

										&lt;?php bp_group_invite_user_avatar(); ?&gt;

										&lt;h4&gt;&lt;?php bp_group_invite_user_link(); ?&gt;&lt;/h4&gt;
</codefragment>
  </duplication>
  <duplication lines="22" tokens="28">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/index.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/index.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;?php do_action( 'bp_before_directory_groups_page' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

		&lt;?php do_action( 'bp_before_directory_groups' ); ?&gt;

		&lt;form action="" method="post" id="groups-directory-form" class="dir-form"&gt;

			&lt;h3&gt;&lt;?php _e( 'Groups Directory', 'buddypress' ); ?&gt;&lt;?php if ( is_user_logged_in() &amp;&amp; bp_user_can_create_groups() ) : ?&gt; &amp;nbsp;&lt;a class="button" href="&lt;?php echo trailingslashit( bp_get_root_domain() . '/' . bp_get_groups_root_slug() . '/create' ); ?&gt;"&gt;&lt;?php _e( 'Create a Group', 'buddypress' ); ?&gt;&lt;/a&gt;&lt;?php endif; ?&gt;&lt;/h3&gt;

			&lt;?php do_action( 'bp_before_directory_groups_content' ); ?&gt;

			&lt;div id="group-dir-search" class="dir-search" role="search"&gt;

				&lt;?php bp_directory_groups_search_form() ?&gt;

			&lt;/div&gt;&lt;!-- #group-dir-search --&gt;

			&lt;?php do_action( 'template_notices' ); ?&gt;
</codefragment>
  </duplication>
  <duplication lines="316" tokens="399">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/single/admin.php" line="3"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/single/admin.php" line="3"/>
    <codefragment>		&lt;?php bp_group_admin_tabs(); ?&gt;
	&lt;/ul&gt;
&lt;/div&gt;&lt;!-- .item-list-tabs --&gt;

&lt;form action="&lt;?php bp_group_admin_form_action() ?&gt;" name="group-settings-form" id="group-settings-form" class="standard-form" method="post" enctype="multipart/form-data" role="main"&gt;

&lt;?php do_action( 'bp_before_group_admin_content' ) ?&gt;

&lt;?php /* Edit Group Details */ ?&gt;
&lt;?php if ( bp_is_group_admin_screen( 'edit-details' ) ) : ?&gt;

	&lt;?php do_action( 'bp_before_group_details_admin' ); ?&gt;

	&lt;label for="group-name"&gt;&lt;?php _e( 'Group Name (required)', 'buddypress' ); ?&gt;&lt;/label&gt;
	&lt;input type="text" name="group-name" id="group-name" value="&lt;?php bp_group_name() ?&gt;" aria-required="true" /&gt;

	&lt;label for="group-desc"&gt;&lt;?php _e( 'Group Description (required)', 'buddypress' ); ?&gt;&lt;/label&gt;
	&lt;textarea name="group-desc" id="group-desc" aria-required="true"&gt;&lt;?php bp_group_description_editable() ?&gt;&lt;/textarea&gt;

	&lt;?php do_action( 'groups_custom_group_fields_editable' ) ?&gt;

	&lt;p&gt;
		&lt;label for="group-notifiy-members"&gt;&lt;?php _e( 'Notify group members of changes via email', 'buddypress' ); ?&gt;&lt;/label&gt;
		&lt;input type="radio" name="group-notify-members" value="1" /&gt; &lt;?php _e( 'Yes', 'buddypress' ); ?&gt;&amp;nbsp;
		&lt;input type="radio" name="group-notify-members" value="0" checked="checked" /&gt; &lt;?php _e( 'No', 'buddypress' ); ?&gt;&amp;nbsp;
	&lt;/p&gt;

	&lt;?php do_action( 'bp_after_group_details_admin' ); ?&gt;

	&lt;p&gt;&lt;input type="submit" value="&lt;?php _e( 'Save Changes', 'buddypress' ) ?&gt;" id="save" name="save" /&gt;&lt;/p&gt;
	&lt;?php wp_nonce_field( 'groups_edit_group_details' ) ?&gt;

&lt;?php endif; ?&gt;

&lt;?php /* Manage Group Settings */ ?&gt;
&lt;?php if ( bp_is_group_admin_screen( 'group-settings' ) ) : ?&gt;

	&lt;?php do_action( 'bp_before_group_settings_admin' ); ?&gt;

	&lt;?php if ( bp_is_active( 'forums' ) ) : ?&gt;

		&lt;?php if ( bp_forums_is_installed_correctly() ) : ?&gt;

			&lt;div class="checkbox"&gt;
				&lt;label&gt;&lt;input type="checkbox" name="group-show-forum" id="group-show-forum" value="1"&lt;?php bp_group_show_forum_setting() ?&gt; /&gt; &lt;?php _e( 'Enable discussion forum', 'buddypress' ) ?&gt;&lt;/label&gt;
			&lt;/div&gt;

			&lt;hr /&gt;

		&lt;?php endif; ?&gt;

	&lt;?php endif; ?&gt;

	&lt;h4&gt;&lt;?php _e( 'Privacy Options', 'buddypress' ); ?&gt;&lt;/h4&gt;

	&lt;div class="radio"&gt;
		&lt;label&gt;
			&lt;input type="radio" name="group-status" value="public"&lt;?php bp_group_show_status_setting( 'public' ) ?&gt; /&gt;
			&lt;strong&gt;&lt;?php _e( 'This is a public group', 'buddypress' ) ?&gt;&lt;/strong&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;?php _e( 'Any site member can join this group.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'This group will be listed in the groups directory and in search results.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'Group content and activity will be visible to any site member.', 'buddypress' ) ?&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/label&gt;

		&lt;label&gt;
			&lt;input type="radio" name="group-status" value="private"&lt;?php bp_group_show_status_setting( 'private' ) ?&gt; /&gt;
			&lt;strong&gt;&lt;?php _e( 'This is a private group', 'buddypress' ) ?&gt;&lt;/strong&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;?php _e( 'Only users who request membership and are accepted can join the group.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'This group will be listed in the groups directory and in search results.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'Group content and activity will only be visible to members of the group.', 'buddypress' ) ?&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/label&gt;

		&lt;label&gt;
			&lt;input type="radio" name="group-status" value="hidden"&lt;?php bp_group_show_status_setting( 'hidden' ) ?&gt; /&gt;
			&lt;strong&gt;&lt;?php _e( 'This is a hidden group', 'buddypress' ) ?&gt;&lt;/strong&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;?php _e( 'Only users who are invited can join the group.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'This group will not be listed in the groups directory or search results.', 'buddypress' ) ?&gt;&lt;/li&gt;
				&lt;li&gt;&lt;?php _e( 'Group content and activity will only be visible to members of the group.', 'buddypress' ) ?&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/label&gt;
	&lt;/div&gt;

	&lt;hr /&gt; 
	 
	&lt;h4&gt;&lt;?php _e( 'Group Invitations', 'buddypress' ); ?&gt;&lt;/h4&gt; 

	&lt;p&gt;&lt;?php _e( 'Which members of this group are allowed to invite others?', 'buddypress' ) ?&gt;&lt;/p&gt; 

	&lt;div class="radio"&gt; 
		&lt;label&gt; 
			&lt;input type="radio" name="group-invite-status" value="members"&lt;?php bp_group_show_invite_status_setting( 'members' ) ?&gt; /&gt; 
			&lt;strong&gt;&lt;?php _e( 'All group members', 'buddypress' ) ?&gt;&lt;/strong&gt; 
		&lt;/label&gt; 

		&lt;label&gt; 
			&lt;input type="radio" name="group-invite-status" value="mods"&lt;?php bp_group_show_invite_status_setting( 'mods' ) ?&gt; /&gt; 
			&lt;strong&gt;&lt;?php _e( 'Group admins and mods only', 'buddypress' ) ?&gt;&lt;/strong&gt; 
		&lt;/label&gt;
		
		&lt;label&gt; 
			&lt;input type="radio" name="group-invite-status" value="admins"&lt;?php bp_group_show_invite_status_setting( 'admins' ) ?&gt; /&gt; 
			&lt;strong&gt;&lt;?php _e( 'Group admins only', 'buddypress' ) ?&gt;&lt;/strong&gt; 
		&lt;/label&gt; 
 	&lt;/div&gt; 

	&lt;hr /&gt; 

	&lt;?php do_action( 'bp_after_group_settings_admin' ); ?&gt;

	&lt;p&gt;&lt;input type="submit" value="&lt;?php _e( 'Save Changes', 'buddypress' ) ?&gt;" id="save" name="save" /&gt;&lt;/p&gt;
	&lt;?php wp_nonce_field( 'groups_edit_group_settings' ) ?&gt;

&lt;?php endif; ?&gt;

&lt;?php /* Group Avatar Settings */ ?&gt;
&lt;?php if ( bp_is_group_admin_screen( 'group-avatar' ) ) : ?&gt;

	&lt;?php if ( 'upload-image' == bp_get_avatar_admin_step() ) : ?&gt;

			&lt;p&gt;&lt;?php _e("Upload an image to use as an avatar for this group. The image will be shown on the main group page, and in search results.", 'buddypress') ?&gt;&lt;/p&gt;

			&lt;p&gt;
				&lt;input type="file" name="file" id="file" /&gt;
				&lt;input type="submit" name="upload" id="upload" value="&lt;?php _e( 'Upload Image', 'buddypress' ) ?&gt;" /&gt;
				&lt;input type="hidden" name="action" id="action" value="bp_avatar_upload" /&gt;
			&lt;/p&gt;

			&lt;?php if ( bp_get_group_has_avatar() ) : ?&gt;

				&lt;p&gt;&lt;?php _e( "If you'd like to remove the existing avatar but not upload a new one, please use the delete avatar button.", 'buddypress' ) ?&gt;&lt;/p&gt;

				&lt;?php bp_button( array( 'id' =&gt; 'delete_group_avatar', 'component' =&gt; 'groups', 'wrapper_id' =&gt; 'delete-group-avatar-button', 'link_class' =&gt; 'edit', 'link_href' =&gt; bp_get_group_avatar_delete_link(), 'link_title' =&gt; __( 'Delete Avatar', 'buddypress' ), 'link_text' =&gt; __( 'Delete Avatar', 'buddypress' ) ) ); ?&gt;

			&lt;?php endif; ?&gt;

			&lt;?php wp_nonce_field( 'bp_avatar_upload' ) ?&gt;

	&lt;?php endif; ?&gt;

	&lt;?php if ( 'crop-image' == bp_get_avatar_admin_step() ) : ?&gt;

		&lt;h3&gt;&lt;?php _e( 'Crop Avatar', 'buddypress' ) ?&gt;&lt;/h3&gt;

		&lt;img src="&lt;?php bp_avatar_to_crop() ?&gt;" id="avatar-to-crop" class="avatar" alt="&lt;?php _e( 'Avatar to crop', 'buddypress' ) ?&gt;" /&gt;

		&lt;div id="avatar-crop-pane"&gt;
			&lt;img src="&lt;?php bp_avatar_to_crop() ?&gt;" id="avatar-crop-preview" class="avatar" alt="&lt;?php _e( 'Avatar preview', 'buddypress' ) ?&gt;" /&gt;
		&lt;/div&gt;

		&lt;input type="submit" name="avatar-crop-submit" id="avatar-crop-submit" value="&lt;?php _e( 'Crop Image', 'buddypress' ) ?&gt;" /&gt;

		&lt;input type="hidden" name="image_src" id="image_src" value="&lt;?php bp_avatar_to_crop_src() ?&gt;" /&gt;
		&lt;input type="hidden" id="x" name="x" /&gt;
		&lt;input type="hidden" id="y" name="y" /&gt;
		&lt;input type="hidden" id="w" name="w" /&gt;
		&lt;input type="hidden" id="h" name="h" /&gt;

		&lt;?php wp_nonce_field( 'bp_avatar_cropstore' ) ?&gt;

	&lt;?php endif; ?&gt;

&lt;?php endif; ?&gt;

&lt;?php /* Manage Group Members */ ?&gt;
&lt;?php if ( bp_is_group_admin_screen( 'manage-members' ) ) : ?&gt;

	&lt;?php do_action( 'bp_before_group_manage_members_admin' ); ?&gt;
	
	&lt;div class="bp-widget"&gt;
		&lt;h4&gt;&lt;?php _e( 'Administrators', 'buddypress' ); ?&gt;&lt;/h4&gt;

		&lt;?php if ( bp_has_members( '&amp;include='. bp_group_admin_ids() ) ) : ?&gt;
		
		&lt;ul id="admins-list" class="item-list single-line&gt;"&gt;
			
			&lt;?php while ( bp_members() ) : bp_the_member(); ?&gt;
			&lt;li&gt;
				&lt;?php echo bp_core_fetch_avatar( array( 'item_id' =&gt; bp_get_member_user_id(), 'type' =&gt; 'thumb', 'width' =&gt; 30, 'height' =&gt; 30, 'alt' =&gt; __( 'Profile picture of %s', 'buddypress' ) ) ) ?&gt;
				&lt;h5&gt;
					&lt;a href="&lt;?php bp_member_permalink(); ?&gt;"&gt; &lt;?php bp_member_name(); ?&gt;&lt;/a&gt;
					&lt;span class="small"&gt;
						&lt;a class="button confirm admin-demote-to-member" href="&lt;?php bp_group_member_demote_link( bp_get_member_user_id() ) ?&gt;"&gt;&lt;?php _e( 'Demote to Member', 'buddypress' ) ?&gt;&lt;/a&gt;
					&lt;/span&gt;			
				&lt;/h5&gt;		
			&lt;/li&gt;
			&lt;?php endwhile; ?&gt;
		
		&lt;/ul&gt;
		
		&lt;?php endif; ?&gt;

	&lt;/div&gt;
	
	&lt;?php if ( bp_group_has_moderators() ) : ?&gt;
		&lt;div class="bp-widget"&gt;
			&lt;h4&gt;&lt;?php _e( 'Moderators', 'buddypress' ) ?&gt;&lt;/h4&gt;		
			
			&lt;?php if ( bp_has_members( '&amp;include=' . bp_group_mod_ids() ) ) : ?&gt;
				&lt;ul id="mods-list" class="item-list"&gt;
				
					&lt;?php while ( bp_members() ) : bp_the_member(); ?&gt;					
					&lt;li&gt;
						&lt;?php echo bp_core_fetch_avatar( array( 'item_id' =&gt; bp_get_member_user_id(), 'type' =&gt; 'thumb', 'width' =&gt; 30, 'height' =&gt; 30, 'alt' =&gt; __( 'Profile picture of %s', 'buddypress' ) ) ) ?&gt;
						&lt;h5&gt;
							&lt;a href="&lt;?php bp_member_permalink(); ?&gt;"&gt; &lt;?php bp_member_name(); ?&gt;&lt;/a&gt;
							&lt;span class="small"&gt;
								&lt;a href="&lt;?php bp_group_member_promote_admin_link( array( 'user_id' =&gt; bp_get_member_user_id() ) ) ?&gt;" class="button confirm mod-promote-to-admin" title="&lt;?php _e( 'Promote to Admin', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Promote to Admin', 'buddypress' ); ?&gt;&lt;/a&gt;
								&lt;a class="button confirm mod-demote-to-member" href="&lt;?php bp_group_member_demote_link( bp_get_member_user_id() ) ?&gt;"&gt;&lt;?php _e( 'Demote to Member', 'buddypress' ) ?&gt;&lt;/a&gt;
							&lt;/span&gt;		
						&lt;/h5&gt;		
					&lt;/li&gt;	
					&lt;?php endwhile; ?&gt;			
				
				&lt;/ul&gt;
			
			&lt;?php endif; ?&gt;
		&lt;/div&gt;
	&lt;?php endif ?&gt;


	&lt;div class="bp-widget"&gt;
		&lt;h4&gt;&lt;?php _e("Members", "buddypress"); ?&gt;&lt;/h4&gt;

		&lt;?php if ( bp_group_has_members( 'per_page=15&amp;exclude_banned=false' ) ) : ?&gt;

			&lt;?php if ( bp_group_member_needs_pagination() ) : ?&gt;

				&lt;div class="pagination no-ajax"&gt;

					&lt;div id="member-count" class="pag-count"&gt;
						&lt;?php bp_group_member_pagination_count() ?&gt;
					&lt;/div&gt;

					&lt;div id="member-admin-pagination" class="pagination-links"&gt;
						&lt;?php bp_group_member_admin_pagination() ?&gt;
					&lt;/div&gt;

				&lt;/div&gt;

			&lt;?php endif; ?&gt;

			&lt;ul id="members-list" class="item-list single-line"&gt;
				&lt;?php while ( bp_group_members() ) : bp_group_the_member(); ?&gt;

					&lt;li class="&lt;?php bp_group_member_css_class(); ?&gt;"&gt;
						&lt;?php bp_group_member_avatar_mini() ?&gt;

						&lt;h5&gt;
							&lt;?php bp_group_member_link() ?&gt;

							&lt;?php if ( bp_get_group_member_is_banned() ) _e( '(banned)', 'buddypress'); ?&gt;

							&lt;span class="small"&gt;

							&lt;?php if ( bp_get_group_member_is_banned() ) : ?&gt;

								&lt;a href="&lt;?php bp_group_member_unban_link() ?&gt;" class="button confirm member-unban" title="&lt;?php _e( 'Unban this member', 'buddypress' ) ?&gt;"&gt;&lt;?php _e( 'Remove Ban', 'buddypress' ); ?&gt;&lt;/a&gt;

							&lt;?php else : ?&gt;

								&lt;a href="&lt;?php bp_group_member_ban_link() ?&gt;" class="button confirm member-ban" title="&lt;?php _e( 'Kick and ban this member', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Kick &amp;amp; Ban', 'buddypress' ); ?&gt;&lt;/a&gt;
								&lt;a href="&lt;?php bp_group_member_promote_mod_link() ?&gt;" class="button confirm member-promote-to-mod" title="&lt;?php _e( 'Promote to Mod', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Promote to Mod', 'buddypress' ); ?&gt;&lt;/a&gt;
								&lt;a href="&lt;?php bp_group_member_promote_admin_link() ?&gt;" class="button confirm member-promote-to-admin" title="&lt;?php _e( 'Promote to Admin', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Promote to Admin', 'buddypress' ); ?&gt;&lt;/a&gt;

							&lt;?php endif; ?&gt;

								&lt;a href="&lt;?php bp_group_member_remove_link() ?&gt;" class="button confirm" title="&lt;?php _e( 'Remove this member', 'buddypress' ); ?&gt;"&gt;&lt;?php _e( 'Remove from group', 'buddypress' ); ?&gt;&lt;/a&gt;

								&lt;?php do_action( 'bp_group_manage_members_admin_item' ); ?&gt;

							&lt;/span&gt;
						&lt;/h5&gt;
					&lt;/li&gt;

				&lt;?php endwhile; ?&gt;
			&lt;/ul&gt;

		&lt;?php else: ?&gt;

			&lt;div id="message" class="info"&gt;
				&lt;p&gt;&lt;?php _e( 'This group has no members.', 'buddypress' ); ?&gt;&lt;/p&gt;
			&lt;/div&gt;

		&lt;?php endif; ?&gt;

	&lt;/div&gt;

	&lt;?php do_action( 'bp_after_group_manage_members_admin' ); ?&gt;

&lt;?php endif; ?&gt;

&lt;?php /* Manage Membership Requests */ ?&gt;
&lt;?php if ( bp_is_group_admin_screen( 'membership-requests' ) ) : ?&gt;

	&lt;?php do_action( 'bp_before_group_membership_requests_admin' ); ?&gt;

	&lt;?php if ( bp_group_has_membership_requests() ) : ?&gt;

		&lt;ul id="request-list" class="item-list"&gt;
			&lt;?php while ( bp_group_membership_requests() ) : bp_group_the_membership_request(); ?&gt;

				&lt;li&gt;
					&lt;?php bp_group_request_user_avatar_thumb() ?&gt;
					&lt;h4&gt;&lt;?php bp_group_request_user_link() ?&gt; &lt;span class="comments"&gt;&lt;?php bp_group_request_comment() ?&gt;&lt;/span&gt;&lt;/h4&gt;
					&lt;span class="activity"&gt;&lt;?php bp_group_request_time_since_requested() ?&gt;&lt;/span&gt;

					&lt;?php do_action( 'bp_group_membership_requests_admin_item' ); ?&gt;

					&lt;div class="action"&gt;

						&lt;?php bp_button( array( 'id' =&gt; 'group_membership_accept', 'component' =&gt; 'groups', 'wrapper_class' =&gt; 'accept', 'link_href' =&gt; bp_get_group_request_accept_link(), 'link_title' =&gt; __( 'Accept', 'buddypress' ), 'link_text' =&gt; __( 'Accept', 'buddypress' ) ) ); ?&gt;
</codefragment>
  </duplication>
  <duplication lines="28" tokens="29">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/single/forum.php" line="3"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/single/forum.php" line="3"/>
    <codefragment>do_action( 'bp_before_group_forum_content' );

if ( bp_is_group_forum_topic_edit() ) :
	locate_template( array( 'groups/single/forum/edit.php' ), true );

elseif ( bp_is_group_forum_topic() ) :
	locate_template( array( 'groups/single/forum/topic.php' ), true );

else : ?&gt;

	&lt;div class="item-list-tabs no-ajax" id="subnav" role="navigation"&gt;
		&lt;ul&gt;

			&lt;?php if ( is_user_logged_in() ) : ?&gt;

				&lt;li&gt;
					&lt;a href="#post-new" class="show-hide-new"&gt;&lt;?php _e( 'New Topic', 'buddypress' ) ?&gt;&lt;/a&gt;
				&lt;/li&gt;

			&lt;?php endif; ?&gt;

			&lt;?php if ( bp_forums_has_directory() ) : ?&gt;

				&lt;li&gt;
					&lt;a href="&lt;?php bp_forums_directory_permalink() ?&gt;"&gt;&lt;?php _e( 'Forum Directory', 'buddypress') ?&gt;&lt;/a&gt;
				&lt;/li&gt;

			&lt;?php endif; ?&gt;
</codefragment>
  </duplication>
  <duplication lines="10" tokens="8">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/single/forum/edit.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/single/forum/edit.php" line="1"/>
    <codefragment>&lt;?php do_action( 'bp_before_group_forum_edit_form' ); ?&gt;

&lt;?php if ( bp_has_forum_topic_posts() ) : ?&gt;

	&lt;form action="&lt;?php bp_forum_topic_action(); ?&gt;" method="post" id="forum-topic-form" class="standard-form"&gt;

		&lt;div class="item-list-tabs" id="subnav" role="navigation"&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;a href="#post-topic-reply"&gt;&lt;?php _e( 'Reply', 'buddypress' ); ?&gt;&lt;/a&gt;
</codefragment>
  </duplication>
  <duplication lines="85" tokens="59">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/single/forum/topic.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/single/forum/topic.php" line="1"/>
    <codefragment>&lt;?php do_action( 'bp_before_group_forum_topic' ); ?&gt;

&lt;?php if ( bp_has_forum_topic_posts() ) : ?&gt;

	&lt;form action="&lt;?php bp_forum_topic_action() ?&gt;" method="post" id="forum-topic-form" class="standard-form"&gt;

		&lt;div class="item-list-tabs no-ajax" id="subnav" role="navigation"&gt;
			&lt;ul&gt;
				&lt;?php if ( is_user_logged_in() ) : ?&gt;

					&lt;li&gt;
						&lt;a href="&lt;?php bp_forum_topic_new_reply_link() ?&gt;" class="new-reply-link"&gt;&lt;?php _e( 'New Reply', 'buddypress' ) ?&gt;&lt;/a&gt;
					&lt;/li&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( bp_forums_has_directory() ) : ?&gt;

					&lt;li&gt;
						&lt;a href="&lt;?php bp_forums_directory_permalink() ?&gt;"&gt;&lt;?php _e( 'Forum Directory', 'buddypress') ?&gt;&lt;/a&gt;
					&lt;/li&gt;

				&lt;?php endif; ?&gt;

			&lt;/ul&gt;
		&lt;/div&gt;

		&lt;div id="topic-meta"&gt;
			&lt;h3&gt;&lt;?php bp_the_topic_title() ?&gt; (&lt;?php bp_the_topic_total_post_count() ?&gt;)&lt;/h3&gt;

			&lt;?php if ( bp_forum_topic_has_tags() ) : ?&gt;

				&lt;div class="topic-tags"&gt;

					&lt;?php _e( 'Topic tags:', 'buddypress' ) ?&gt; &lt;?php bp_forum_topic_tag_list() ?&gt;

				&lt;/div&gt;

			&lt;?php endif; ?&gt;

			&lt;?php if ( bp_group_is_admin() || bp_group_is_mod() || bp_get_the_topic_is_mine() ) : ?&gt;

				&lt;div class="last admin-links"&gt;

					&lt;?php bp_the_topic_admin_links() ?&gt;

				&lt;/div&gt;

			&lt;?php endif; ?&gt;

			&lt;?php do_action( 'bp_group_forum_topic_meta' ); ?&gt;

		&lt;/div&gt;

		&lt;div class="pagination no-ajax"&gt;

			&lt;div id="post-count-top" class="pag-count"&gt;

				&lt;?php bp_the_topic_pagination_count() ?&gt;

			&lt;/div&gt;

			&lt;div class="pagination-links" id="topic-pag-top"&gt;

				&lt;?php bp_the_topic_pagination() ?&gt;

			&lt;/div&gt;

		&lt;/div&gt;

		&lt;?php do_action( 'bp_before_group_forum_topic_posts' ) ?&gt;

		&lt;ul id="topic-post-list" class="item-list" role="main"&gt;
			&lt;?php while ( bp_forum_topic_posts() ) : bp_the_forum_topic_post(); ?&gt;

				&lt;li id="post-&lt;?php bp_the_topic_post_id() ?&gt;" class="&lt;?php bp_the_topic_post_css_class() ?&gt;"&gt;
					&lt;div class="poster-meta"&gt;
						&lt;a href="&lt;?php bp_the_topic_post_poster_link() ?&gt;"&gt;
							&lt;?php bp_the_topic_post_poster_avatar( 'width=40&amp;height=40' ) ?&gt;
						&lt;/a&gt;
						&lt;?php echo sprintf( __( '%1$s said %2$s:', 'buddypress' ), bp_get_the_topic_post_poster_name(), bp_get_the_topic_post_time_since() ) ?&gt;
					&lt;/div&gt;

					&lt;div class="post-content"&gt;
						&lt;?php bp_the_topic_post_content() ?&gt;
</codefragment>
  </duplication>
  <duplication lines="36" tokens="32">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/groups/single/home.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/groups/single/home.php" line="1"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

			&lt;?php if ( bp_has_groups() ) : while ( bp_groups() ) : bp_the_group(); ?&gt;

			&lt;?php do_action( 'bp_before_group_home_content' ) ?&gt;

			&lt;div id="item-header" role="complementary"&gt;

				&lt;?php locate_template( array( 'groups/single/group-header.php' ), true ); ?&gt;

			&lt;/div&gt;&lt;!-- #item-header --&gt;

			&lt;div id="item-nav"&gt;
				&lt;div class="item-list-tabs no-ajax" id="object-nav" role="navigation"&gt;
					&lt;ul&gt;

						&lt;?php bp_get_options_nav(); ?&gt;

						&lt;?php do_action( 'bp_group_options_nav' ); ?&gt;

					&lt;/ul&gt;
				&lt;/div&gt;
			&lt;/div&gt;&lt;!-- #item-nav --&gt;

			&lt;div id="item-body"&gt;

				&lt;?php do_action( 'bp_before_group_body' );

				if ( bp_is_group_admin_page() &amp;&amp; bp_group_is_visible() ) :
					locate_template( array( 'groups/single/admin.php' ), true );

				elseif ( bp_is_group_members() &amp;&amp; bp_group_is_visible() ) :
					locate_template( array( 'groups/single/members.php' ), true );
</codefragment>
  </duplication>
  <duplication lines="24" tokens="15">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/index.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/index.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;?php do_action( 'bp_before_directory_members_page' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

		&lt;?php do_action( 'bp_before_directory_members' ); ?&gt;

		&lt;form action="" method="post" id="members-directory-form" class="dir-form"&gt;

			&lt;h3&gt;&lt;?php _e( 'Members Directory', 'buddypress' ); ?&gt;&lt;/h3&gt;

			&lt;?php do_action( 'bp_before_directory_members_content' ); ?&gt;

			&lt;div id="members-dir-search" class="dir-search" role="search"&gt;

				&lt;?php bp_directory_members_search_form(); ?&gt;

			&lt;/div&gt;&lt;!-- #members-dir-search --&gt;

			&lt;div class="item-list-tabs" role="navigation"&gt;
				&lt;ul&gt;
					&lt;li class="selected" id="members-all"&gt;&lt;a href="&lt;?php echo trailingslashit( bp_get_root_domain() . '/' . bp_get_members_root_slug() ); ?&gt;"&gt;&lt;?php printf( __( 'All Members &lt;span&gt;%s&lt;/span&gt;', 'buddypress' ), bp_get_total_member_count() ); ?&gt;&lt;/a&gt;&lt;/li&gt;
</codefragment>
  </duplication>
  <duplication lines="7" tokens="11">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/activity.php" line="15"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/activity.php" line="15"/>
    <codefragment>		&lt;?php bp_get_options_nav() ?&gt;

		&lt;li id="activity-filter-select" class="last"&gt;
			&lt;label for="activity-filter-by"&gt;&lt;?php _e( 'Show:', 'buddypress' ); ?&gt;&lt;/label&gt;
			&lt;select id="activity-filter-by"&gt;
				&lt;option value="-1"&gt;&lt;?php _e( 'Everything', 'buddypress' ) ?&gt;&lt;/option&gt;
				&lt;option value="activity_update"&gt;&lt;?php _e( 'Updates', 'buddypress' ) ?&gt;&lt;/option&gt;
</codefragment>
  </duplication>
  <duplication lines="18" tokens="10">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/home.php" line="12"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/home.php" line="9"/>
    <codefragment>&lt;?php get_header( 'buddypress' ); ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

			&lt;?php do_action( 'bp_before_member_home_content' ); ?&gt;

			&lt;div id="item-header" role="complementary"&gt;

				&lt;?php locate_template( array( 'members/single/member-header.php' ), true ); ?&gt;

			&lt;/div&gt;&lt;!-- #item-header --&gt;

			&lt;div id="item-nav"&gt;
				&lt;div class="item-list-tabs no-ajax" id="object-nav" role="navigation"&gt;
					&lt;ul&gt;

						&lt;?php bp_get_displayed_user_nav(); ?&gt;
</codefragment>
  </duplication>
  <duplication lines="12" tokens="10">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/messages/single.php" line="3"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/messages/single.php" line="3"/>
    <codefragment>	&lt;?php do_action( 'bp_before_message_thread_content' ) ?&gt;

	&lt;?php if ( bp_thread_has_messages() ) : ?&gt;

		&lt;h3 id="message-subject"&gt;&lt;?php bp_the_thread_subject() ?&gt;&lt;/h3&gt;

		&lt;p id="message-recipients"&gt;
			&lt;span class="highlight"&gt;

				&lt;?php if ( !bp_get_the_thread_recipients() ) : ?&gt;

					&lt;?php _e( 'You are alone in this conversation.', 'buddypress' ); ?&gt;
</codefragment>
  </duplication>
  <duplication lines="73" tokens="123">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/profile/edit.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/profile/edit.php" line="1"/>
    <codefragment>&lt;?php do_action( 'bp_before_profile_edit_content' );

if ( bp_has_profile( 'profile_group_id=' . bp_get_current_profile_group_id() ) ) :
	while ( bp_profile_groups() ) : bp_the_profile_group(); ?&gt;

&lt;form action="&lt;?php bp_the_profile_group_edit_form_action(); ?&gt;" method="post" id="profile-edit-form" class="standard-form &lt;?php bp_the_profile_group_slug(); ?&gt;"&gt;

	&lt;?php do_action( 'bp_before_profile_field_content' ); ?&gt;

		&lt;h4&gt;&lt;?php printf( __( "Editing '%s' Profile Group", "buddypress" ), bp_get_the_profile_group_name() ); ?&gt;&lt;/h4&gt;

		&lt;ul class="button-nav"&gt;

			&lt;?php bp_profile_group_tabs(); ?&gt;

		&lt;/ul&gt;

		&lt;div class="clear"&gt;&lt;/div&gt;

		&lt;?php while ( bp_profile_fields() ) : bp_the_profile_field(); ?&gt;

			&lt;div&lt;?php bp_field_css_class( 'editfield' ) ?&gt;&gt;

				&lt;?php if ( 'textbox' == bp_get_the_profile_field_type() ) : ?&gt;

					&lt;label for="&lt;?php bp_the_profile_field_input_name(); ?&gt;"&gt;&lt;?php bp_the_profile_field_name(); ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ); ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
					&lt;input type="text" name="&lt;?php bp_the_profile_field_input_name(); ?&gt;" id="&lt;?php bp_the_profile_field_input_name(); ?&gt;" value="&lt;?php bp_the_profile_field_edit_value(); ?&gt;" &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;aria-required="true"&lt;?php endif; ?&gt;/&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( 'textarea' == bp_get_the_profile_field_type() ) : ?&gt;

					&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name(); ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ); ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
					&lt;textarea rows="5" cols="40" name="&lt;?php bp_the_profile_field_input_name(); ?&gt;" id="&lt;?php bp_the_profile_field_input_name(); ?&gt;" &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;aria-required="true"&lt;?php endif; ?&gt;&gt;&lt;?php bp_the_profile_field_edit_value(); ?&gt;&lt;/textarea&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( 'selectbox' == bp_get_the_profile_field_type() ) : ?&gt;

					&lt;label for="&lt;?php bp_the_profile_field_input_name(); ?&gt;"&gt;&lt;?php bp_the_profile_field_name(); ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ); ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
					&lt;select name="&lt;?php bp_the_profile_field_input_name(); ?&gt;" id="&lt;?php bp_the_profile_field_input_name(); ?&gt;" &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;aria-required="true"&lt;?php endif; ?&gt;&gt;
						&lt;?php bp_the_profile_field_options() ?&gt;
					&lt;/select&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( 'multiselectbox' == bp_get_the_profile_field_type() ) : ?&gt;

					&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ); ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
					&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;" id="&lt;?php bp_the_profile_field_input_name() ?&gt;" multiple="multiple" &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;aria-required="true"&lt;?php endif; ?&gt;&gt;

						&lt;?php bp_the_profile_field_options(); ?&gt;

					&lt;/select&gt;

					&lt;?php if ( !bp_get_the_profile_field_is_required() ) : ?&gt;

						&lt;a class="clear-value" href="javascript:clear( '&lt;?php bp_the_profile_field_input_name(); ?&gt;' );"&gt;&lt;?php _e( 'Clear', 'buddypress' ); ?&gt;&lt;/a&gt;

					&lt;?php endif; ?&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( 'radio' == bp_get_the_profile_field_type() ) : ?&gt;

					&lt;div class="radio"&gt;
						&lt;span class="label"&gt;&lt;?php bp_the_profile_field_name(); ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ); ?&gt;&lt;?php endif; ?&gt;&lt;/span&gt;

						&lt;?php bp_the_profile_field_options(); ?&gt;

						&lt;?php if ( !bp_get_the_profile_field_is_required() ) : ?&gt;

							&lt;a class="clear-value" href="javascript:clear( '&lt;?php bp_the_profile_field_input_name(); ?&gt;' );"&gt;&lt;?php _e( 'Clear', 'buddypress' ); ?&gt;&lt;/a&gt;
</codefragment>
  </duplication>
  <duplication lines="16" tokens="28">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/profile/profile-wp.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/profile/profile-wp.php" line="1"/>
    <codefragment>&lt;?php do_action( 'bp_before_profile_loop_content' ) ?&gt;

&lt;?php $ud = get_userdata( bp_displayed_user_id() ); ?&gt;

&lt;?php do_action( 'bp_before_profile_field_content' ) ?&gt;

	&lt;div class="bp-widget wp-profile"&gt;
		&lt;h4&gt;&lt;?php bp_is_my_profile() ? _e( 'My Profile', 'buddypress' ) : printf( __( "%s's Profile", 'buddypress' ), bp_get_displayed_user_fullname() ); ?&gt;&lt;/h4&gt;

		&lt;table class="wp-profile-fields"&gt;

			&lt;?php if ( $ud-&gt;display_name ) : ?&gt;

				&lt;tr id="wp_displayname"&gt;
					&lt;td class="label"&gt;&lt;?php _e( 'Name', 'buddypress' ); ?&gt;&lt;/td&gt;
					&lt;td class="data"&gt;&lt;?php echo $ud-&gt;display_name; ?&gt;&lt;/td&gt;
</codefragment>
  </duplication>
  <duplication lines="10" tokens="7">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/members/single/settings/general.php" line="11"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/members/single/settings/general.php" line="11"/>
    <codefragment>&lt;?php get_header( 'buddypress' ) ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

			&lt;?php do_action( 'bp_before_member_settings_template' ); ?&gt;

			&lt;div id="item-header"&gt;

				&lt;?php locate_template( array( 'members/single/member-header.php' ), true ); ?&gt;
</codefragment>
  </duplication>
  <duplication lines="8" tokens="18">
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/functions.php" line="473"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/mu-plugins/bp-global-adminbar-css.php" line="8"/>
    <codefragment>if( !function_exists('colourCreator') ) {&#13;
function colourCreator($colour, $per)&#13;
{&#13;
    $colour = substr( $colour, 1 ); // Removes first character of hex string (#)&#13;
    $rgb = ''; // Empty variable&#13;
    $per = $per/100*255; // Creates a percentage to work with. Change the middle figure to control colour temperature&#13;
&#13;
    if  ($per &lt; 0 ) // Check to see if the percentage is a negative number&#13;
</codefragment>
  </duplication>
  <duplication lines="200" tokens="297">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-themes/bp-default/registration/register.php" line="1"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/registration/register.php" line="1"/>
    <codefragment>&lt;?php get_header( 'buddypress' ) ?&gt;

	&lt;div id="content"&gt;
		&lt;div class="padder"&gt;

		&lt;?php do_action( 'bp_before_register_page' ) ?&gt;

		&lt;div class="page" id="register-page"&gt;

			&lt;form action="" name="signup_form" id="signup_form" class="standard-form" method="post" enctype="multipart/form-data"&gt;

			&lt;?php if ( 'registration-disabled' == bp_get_current_signup_step() ) : ?&gt;
				&lt;?php do_action( 'template_notices' ) ?&gt;
				&lt;?php do_action( 'bp_before_registration_disabled' ) ?&gt;

					&lt;p&gt;&lt;?php _e( 'User registration is currently not allowed.', 'buddypress' ); ?&gt;&lt;/p&gt;

				&lt;?php do_action( 'bp_after_registration_disabled' ); ?&gt;
			&lt;?php endif; // registration-disabled signup setp ?&gt;

			&lt;?php if ( 'request-details' == bp_get_current_signup_step() ) : ?&gt;

				&lt;h2&gt;&lt;?php _e( 'Create an Account', 'buddypress' ) ?&gt;&lt;/h2&gt;

				&lt;?php do_action( 'template_notices' ) ?&gt;

				&lt;p&gt;&lt;?php _e( 'Registering for this site is easy, just fill in the fields below and we\'ll get a new account set up for you in no time.', 'buddypress' ) ?&gt;&lt;/p&gt;

				&lt;?php do_action( 'bp_before_account_details_fields' ) ?&gt;

				&lt;div class="register-section" id="basic-details-section"&gt;

					&lt;?php /***** Basic Account Details ******/ ?&gt;

					&lt;h4&gt;&lt;?php _e( 'Account Details', 'buddypress' ) ?&gt;&lt;/h4&gt;

					&lt;label for="signup_username"&gt;&lt;?php _e( 'Username', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
					&lt;?php do_action( 'bp_signup_username_errors' ) ?&gt;
					&lt;input type="text" name="signup_username" id="signup_username" value="&lt;?php bp_signup_username_value() ?&gt;" /&gt;

					&lt;label for="signup_email"&gt;&lt;?php _e( 'Email Address', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
					&lt;?php do_action( 'bp_signup_email_errors' ) ?&gt;
					&lt;input type="text" name="signup_email" id="signup_email" value="&lt;?php bp_signup_email_value() ?&gt;" /&gt;

					&lt;label for="signup_password"&gt;&lt;?php _e( 'Choose a Password', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
					&lt;?php do_action( 'bp_signup_password_errors' ) ?&gt;
					&lt;input type="password" name="signup_password" id="signup_password" value="" /&gt;

					&lt;label for="signup_password_confirm"&gt;&lt;?php _e( 'Confirm Password', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
					&lt;?php do_action( 'bp_signup_password_confirm_errors' ) ?&gt;
					&lt;input type="password" name="signup_password_confirm" id="signup_password_confirm" value="" /&gt;

				&lt;/div&gt;&lt;!-- #basic-details-section --&gt;

				&lt;?php do_action( 'bp_after_account_details_fields' ) ?&gt;

				&lt;?php /***** Extra Profile Details ******/ ?&gt;

				&lt;?php if ( bp_is_active( 'xprofile' ) ) : ?&gt;

					&lt;?php do_action( 'bp_before_signup_profile_fields' ) ?&gt;

					&lt;div class="register-section" id="profile-details-section"&gt;

						&lt;h4&gt;&lt;?php _e( 'Profile Details', 'buddypress' ) ?&gt;&lt;/h4&gt;

						&lt;?php /* Use the profile field loop to render input fields for the 'base' profile field group */ ?&gt;
						&lt;?php if ( bp_is_active( 'xprofile' ) ) : if ( bp_has_profile( 'profile_group_id=1' ) ) : while ( bp_profile_groups() ) : bp_the_profile_group(); ?&gt;

						&lt;?php while ( bp_profile_fields() ) : bp_the_profile_field(); ?&gt;

							&lt;div class="editfield"&gt;

								&lt;?php if ( 'textbox' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
									&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
									&lt;input type="text" name="&lt;?php bp_the_profile_field_input_name() ?&gt;" id="&lt;?php bp_the_profile_field_input_name() ?&gt;" value="&lt;?php bp_the_profile_field_edit_value() ?&gt;" /&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'textarea' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
									&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
									&lt;textarea rows="5" cols="40" name="&lt;?php bp_the_profile_field_input_name() ?&gt;" id="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_edit_value() ?&gt;&lt;/textarea&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'selectbox' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
									&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
									&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;" id="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;
										&lt;?php bp_the_profile_field_options() ?&gt;
									&lt;/select&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'multiselectbox' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
									&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
									&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;" id="&lt;?php bp_the_profile_field_input_name() ?&gt;" multiple="multiple"&gt;
										&lt;?php bp_the_profile_field_options() ?&gt;
									&lt;/select&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'radio' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;div class="radio"&gt;
										&lt;span class="label"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/span&gt;

										&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
										&lt;?php bp_the_profile_field_options() ?&gt;

										&lt;?php if ( !bp_get_the_profile_field_is_required() ) : ?&gt;
											&lt;a class="clear-value" href="javascript:clear( '&lt;?php bp_the_profile_field_input_name() ?&gt;' );"&gt;&lt;?php _e( 'Clear', 'buddypress' ) ?&gt;&lt;/a&gt;
										&lt;?php endif; ?&gt;
									&lt;/div&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'checkbox' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;div class="checkbox"&gt;
										&lt;span class="label"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/span&gt;

										&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;
										&lt;?php bp_the_profile_field_options() ?&gt;
									&lt;/div&gt;

								&lt;?php endif; ?&gt;

								&lt;?php if ( 'datebox' == bp_get_the_profile_field_type() ) : ?&gt;

									&lt;div class="datebox"&gt;
										&lt;label for="&lt;?php bp_the_profile_field_input_name() ?&gt;_day"&gt;&lt;?php bp_the_profile_field_name() ?&gt; &lt;?php if ( bp_get_the_profile_field_is_required() ) : ?&gt;&lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;?php endif; ?&gt;&lt;/label&gt;
										&lt;?php do_action( 'bp_' . bp_get_the_profile_field_input_name() . '_errors' ) ?&gt;

										&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;_day" id="&lt;?php bp_the_profile_field_input_name() ?&gt;_day"&gt;
											&lt;?php bp_the_profile_field_options( 'type=day' ) ?&gt;
										&lt;/select&gt;

										&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;_month" id="&lt;?php bp_the_profile_field_input_name() ?&gt;_month"&gt;
											&lt;?php bp_the_profile_field_options( 'type=month' ) ?&gt;
										&lt;/select&gt;

										&lt;select name="&lt;?php bp_the_profile_field_input_name() ?&gt;_year" id="&lt;?php bp_the_profile_field_input_name() ?&gt;_year"&gt;
											&lt;?php bp_the_profile_field_options( 'type=year' ) ?&gt;
										&lt;/select&gt;
									&lt;/div&gt;

								&lt;?php endif; ?&gt;

								&lt;?php do_action( 'bp_custom_profile_edit_fields' ) ?&gt;

								&lt;p class="description"&gt;&lt;?php bp_the_profile_field_description() ?&gt;&lt;/p&gt;

							&lt;/div&gt;

						&lt;?php endwhile; ?&gt;

						&lt;input type="hidden" name="signup_profile_field_ids" id="signup_profile_field_ids" value="&lt;?php bp_the_profile_group_field_ids() ?&gt;" /&gt;

						&lt;?php endwhile; endif; endif; ?&gt;

					&lt;/div&gt;&lt;!-- #profile-details-section --&gt;

					&lt;?php do_action( 'bp_after_signup_profile_fields' ) ?&gt;

				&lt;?php endif; ?&gt;

				&lt;?php if ( bp_get_blog_signup_allowed() ) : ?&gt;

					&lt;?php do_action( 'bp_before_blog_details_fields' ) ?&gt;

					&lt;?php /***** Blog Creation Details ******/ ?&gt;

					&lt;div class="register-section" id="blog-details-section"&gt;

						&lt;h4&gt;&lt;?php _e( 'Blog Details', 'buddypress' ) ?&gt;&lt;/h4&gt;

						&lt;p&gt;&lt;input type="checkbox" name="signup_with_blog" id="signup_with_blog" value="1"&lt;?php if ( (int) bp_get_signup_with_blog_value() ) : ?&gt; checked="checked"&lt;?php endif; ?&gt; /&gt; &lt;?php _e( 'Yes, I\'d like to create a new site', 'buddypress' ) ?&gt;&lt;/p&gt;

						&lt;div id="blog-details"&lt;?php if ( (int) bp_get_signup_with_blog_value() ) : ?&gt;class="show"&lt;?php endif; ?&gt;&gt;

							&lt;label for="signup_blog_url"&gt;&lt;?php _e( 'Blog URL', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
							&lt;?php do_action( 'bp_signup_blog_url_errors' ) ?&gt;

							&lt;?php if ( is_subdomain_install() ) : ?&gt;
								http:// &lt;input type="text" name="signup_blog_url" id="signup_blog_url" value="&lt;?php bp_signup_blog_url_value() ?&gt;" /&gt; .&lt;?php bp_blogs_subdomain_base() ?&gt;
							&lt;?php else : ?&gt;
								&lt;?php echo site_url() ?&gt;/ &lt;input type="text" name="signup_blog_url" id="signup_blog_url" value="&lt;?php bp_signup_blog_url_value() ?&gt;" /&gt;
							&lt;?php endif; ?&gt;

							&lt;label for="signup_blog_title"&gt;&lt;?php _e( 'Site Title', 'buddypress' ) ?&gt; &lt;?php _e( '(required)', 'buddypress' ) ?&gt;&lt;/label&gt;
							&lt;?php do_action( 'bp_signup_blog_title_errors' ) ?&gt;
							&lt;input type="text" name="signup_blog_title" id="signup_blog_title" value="&lt;?php bp_signup_blog_title_value() ?&gt;" /&gt;
</codefragment>
  </duplication>
  <duplication lines="7" tokens="18">
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/index-post.php" line="35"/>
    <file path="/mnt/share/buddypress/src/wp-content/themes/bp-corporate/template-blog.php" line="17"/>
    <codefragment>&lt;?php while (have_posts()) : the_post(); ?&gt;&#13;
&#13;
&lt;div &lt;?php if(function_exists("post_class")) : ?&gt;&lt;?php post_class(); ?&gt;&lt;?php else: ?&gt;class="post"&lt;?php endif; ?&gt; id="post-&lt;?php the_ID(); ?&gt;"&gt;&#13;
&#13;
&lt;h1 class="post-title"&gt;&lt;a href="&lt;?php the_permalink() ?&gt;" rel="bookmark" title="&lt;?php _e('Permalink to', TEMPLATE_DOMAIN); ?&gt; &lt;?php the_title(); ?&gt;"&gt;&lt;?php the_title(); ?&gt;&lt;/a&gt;&lt;/h1&gt;&#13;
&#13;
&lt;?php $post_meta_status = get_option('tn_buddycorp_post_meta_status'); if($post_meta_status != 'disable') { ?&gt;&#13;
</codefragment>
  </duplication>
  <duplication lines="148" tokens="330">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.ixr.php" line="49"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-IXR.php" line="48"/>
    <codefragment>class IXR_Value {
    var $data;
    var $type;

    function IXR_Value($data, $type = false)
    {
        $this-&gt;data = $data;
        if (!$type) {
            $type = $this-&gt;calculateType();
        }
        $this-&gt;type = $type;
        if ($type == 'struct') {
            // Turn all the values in the array in to new IXR_Value objects
            foreach ($this-&gt;data as $key =&gt; $value) {
                $this-&gt;data[$key] = new IXR_Value($value);
            }
        }
        if ($type == 'array') {
            for ($i = 0, $j = count($this-&gt;data); $i &lt; $j; $i++) {
                $this-&gt;data[$i] = new IXR_Value($this-&gt;data[$i]);
            }
        }
    }

    function calculateType()
    {
        if ($this-&gt;data === true || $this-&gt;data === false) {
            return 'boolean';
        }
        if (is_integer($this-&gt;data)) {
            return 'int';
        }
        if (is_double($this-&gt;data)) {
            return 'double';
        }

        // Deal with IXR object types base64 and date
        if (is_object($this-&gt;data) &amp;&amp; is_a($this-&gt;data, 'IXR_Date')) {
            return 'date';
        }
        if (is_object($this-&gt;data) &amp;&amp; is_a($this-&gt;data, 'IXR_Base64')) {
            return 'base64';
        }

        // If it is a normal PHP object convert it in to a struct
        if (is_object($this-&gt;data)) {
            $this-&gt;data = get_object_vars($this-&gt;data);
            return 'struct';
        }
        if (!is_array($this-&gt;data)) {
            return 'string';
        }

        // We have an array - is it an array or a struct?
        if ($this-&gt;isStruct($this-&gt;data)) {
            return 'struct';
        } else {
            return 'array';
        }
    }

    function getXml()
    {
        // Return XML for this value
        switch ($this-&gt;type) {
            case 'boolean':
                return '&lt;boolean&gt;'.(($this-&gt;data) ? '1' : '0').'&lt;/boolean&gt;';
                break;
            case 'int':
                return '&lt;int&gt;'.$this-&gt;data.'&lt;/int&gt;';
                break;
            case 'double':
                return '&lt;double&gt;'.$this-&gt;data.'&lt;/double&gt;';
                break;
            case 'string':
                return '&lt;string&gt;'.htmlspecialchars($this-&gt;data).'&lt;/string&gt;';
                break;
            case 'array':
                $return = '&lt;array&gt;&lt;data&gt;'."\n";
                foreach ($this-&gt;data as $item) {
                    $return .= '  &lt;value&gt;'.$item-&gt;getXml()."&lt;/value&gt;\n";
                }
                $return .= '&lt;/data&gt;&lt;/array&gt;';
                return $return;
                break;
            case 'struct':
                $return = '&lt;struct&gt;'."\n";
                foreach ($this-&gt;data as $name =&gt; $value) {
					$name = htmlspecialchars($name);
                    $return .= "  &lt;member&gt;&lt;name&gt;$name&lt;/name&gt;&lt;value&gt;";
                    $return .= $value-&gt;getXml()."&lt;/value&gt;&lt;/member&gt;\n";
                }
                $return .= '&lt;/struct&gt;';
                return $return;
                break;
            case 'date':
            case 'base64':
                return $this-&gt;data-&gt;getXml();
                break;
        }
        return false;
    }

    /**
     * Checks whether or not the supplied array is a struct or not
     *
     * @param unknown_type $array
     * @return boolean
     */
    function isStruct($array)
    {
        $expected = 0;
        foreach ($array as $key =&gt; $value) {
            if ((string)$key != (string)$expected) {
                return true;
            }
            $expected++;
        }
        return false;
    }
}

/**
 * IXR_MESSAGE
 *
 * @package IXR
 * @since 1.5
 *
 */
class IXR_Message
{
    var $message;
    var $messageType;  // methodCall / methodResponse / fault
    var $faultCode;
    var $faultString;
    var $methodName;
    var $params;

    // Current variable stacks
    var $_arraystructs = array();   // The stack used to keep track of the current array/struct
    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array
    var $_currentStructName = array();  // A stack as well
    var $_param;
    var $_value;
    var $_currentTag;
    var $_currentTagContents;
    // The XML parser
    var $_parser;
</codefragment>
  </duplication>
  <duplication lines="195" tokens="448">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.ixr.php" line="220"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-IXR.php" line="220"/>
    <codefragment>        do {
            if (strlen($this-&gt;message) &lt;= $chunk_size) {
                $final = true;
            }
            $part = substr($this-&gt;message, 0, $chunk_size);
            $this-&gt;message = substr($this-&gt;message, $chunk_size);
            if (!xml_parse($this-&gt;_parser, $part, $final)) {
                return false;
            }
            if ($final) {
                break;
            }
        } while (true);
        xml_parser_free($this-&gt;_parser);

        // Grab the error messages, if any
        if ($this-&gt;messageType == 'fault') {
            $this-&gt;faultCode = $this-&gt;params[0]['faultCode'];
            $this-&gt;faultString = $this-&gt;params[0]['faultString'];
        }
        return true;
    }

    function tag_open($parser, $tag, $attr)
    {
        $this-&gt;_currentTagContents = '';
        $this-&gt;currentTag = $tag;
        switch($tag) {
            case 'methodCall':
            case 'methodResponse':
            case 'fault':
                $this-&gt;messageType = $tag;
                break;
                /* Deal with stacks of arrays and structs */
            case 'data':    // data is to all intents and puposes more interesting than array
                $this-&gt;_arraystructstypes[] = 'array';
                $this-&gt;_arraystructs[] = array();
                break;
            case 'struct':
                $this-&gt;_arraystructstypes[] = 'struct';
                $this-&gt;_arraystructs[] = array();
                break;
        }
    }

    function cdata($parser, $cdata)
    {
        $this-&gt;_currentTagContents .= $cdata;
    }

    function tag_close($parser, $tag)
    {
        $valueFlag = false;
        switch($tag) {
            case 'int':
            case 'i4':
                $value = (int)trim($this-&gt;_currentTagContents);
                $valueFlag = true;
                break;
            case 'double':
                $value = (double)trim($this-&gt;_currentTagContents);
                $valueFlag = true;
                break;
            case 'string':
                $value = (string)trim($this-&gt;_currentTagContents);
                $valueFlag = true;
                break;
            case 'dateTime.iso8601':
                $value = new IXR_Date(trim($this-&gt;_currentTagContents));
                $valueFlag = true;
                break;
            case 'value':
                // "If no type is indicated, the type is string."
                if (trim($this-&gt;_currentTagContents) != '') {
                    $value = (string)$this-&gt;_currentTagContents;
                    $valueFlag = true;
                }
                break;
            case 'boolean':
                $value = (boolean)trim($this-&gt;_currentTagContents);
                $valueFlag = true;
                break;
            case 'base64':
                $value = base64_decode($this-&gt;_currentTagContents);
                $valueFlag = true;
                break;
                /* Deal with stacks of arrays and structs */
            case 'data':
            case 'struct':
                $value = array_pop($this-&gt;_arraystructs);
                array_pop($this-&gt;_arraystructstypes);
                $valueFlag = true;
                break;
            case 'member':
                array_pop($this-&gt;_currentStructName);
                break;
            case 'name':
                $this-&gt;_currentStructName[] = trim($this-&gt;_currentTagContents);
                break;
            case 'methodName':
                $this-&gt;methodName = trim($this-&gt;_currentTagContents);
                break;
        }

        if ($valueFlag) {
            if (count($this-&gt;_arraystructs) &gt; 0) {
                // Add value to struct or array
                if ($this-&gt;_arraystructstypes[count($this-&gt;_arraystructstypes)-1] == 'struct') {
                    // Add to struct
                    $this-&gt;_arraystructs[count($this-&gt;_arraystructs)-1][$this-&gt;_currentStructName[count($this-&gt;_currentStructName)-1]] = $value;
                } else {
                    // Add to array
                    $this-&gt;_arraystructs[count($this-&gt;_arraystructs)-1][] = $value;
                }
            } else {
                // Just add as a paramater
                $this-&gt;params[] = $value;
            }
        }
        $this-&gt;_currentTagContents = '';
    }
}

/**
 * IXR_Server
 *
 * @package IXR
 * @since 1.5
 */
class IXR_Server
{
    var $data;
    var $callbacks = array();
    var $message;
    var $capabilities;

    function IXR_Server($callbacks = false, $data = false, $wait = false)
    {
        $this-&gt;setCapabilities();
        if ($callbacks) {
            $this-&gt;callbacks = $callbacks;
        }
        $this-&gt;setCallbacks();
        if (!$wait) {
            $this-&gt;serve($data);
        }
    }

    function serve($data = false)
    {
        if (!$data) {
            if (isset($_SERVER['REQUEST_METHOD']) &amp;&amp; $_SERVER['REQUEST_METHOD'] !== 'POST') {
            	header('Content-Type: text/plain'); // merged from WP #9093
                die('XML-RPC server accepts POST requests only.');
            }

            global $HTTP_RAW_POST_DATA;
            if (empty($HTTP_RAW_POST_DATA)) {
                // workaround for a bug in PHP 5.2.2 - http://bugs.php.net/bug.php?id=41293
                $data = file_get_contents('php://input');
            } else {
                $data =&amp; $HTTP_RAW_POST_DATA;
            }
        }
        $this-&gt;message = new IXR_Message($data);
        if (!$this-&gt;message-&gt;parse()) {
            $this-&gt;error(-32700, 'parse error. not well formed');
        }
        if ($this-&gt;message-&gt;messageType != 'methodCall') {
            $this-&gt;error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');
        }
        $result = $this-&gt;call($this-&gt;message-&gt;methodName, $this-&gt;message-&gt;params);

        // Is the result an error?
        if (is_a($result, 'IXR_Error')) {
            $this-&gt;error($result);
        }

        // Encode the result
        $r = new IXR_Value($result);
        $resultxml = $r-&gt;getXml();

        // Create the XML
        $xml = &lt;&lt;&lt;EOD
&lt;methodResponse&gt;
  &lt;params&gt;
    &lt;param&gt;
      &lt;value&gt;
      $resultxml
      &lt;/value&gt;
    &lt;/param&gt;
  &lt;/params&gt;
&lt;/methodResponse&gt;

EOD;
</codefragment>
  </duplication>
  <duplication lines="574" tokens="1180">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.ixr.php" line="445"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-IXR.php" line="445"/>
    <codefragment>                if (!method_exists($method[0], $method[1])) {
                    return new IXR_Error(-32601, 'server error. requested object method "'.$method[1].'" does not exist.');
                }
            } else if (!function_exists($method)) {
                return new IXR_Error(-32601, 'server error. requested function "'.$method.'" does not exist.');
            }

            // Call the function
            $result = call_user_func($method, $args);
        }
        return $result;
    }

    function error($error, $message = false)
    {
        // Accepts either an error object or an error code and message
        if ($message &amp;&amp; !is_object($error)) {
            $error = new IXR_Error($error, $message);
        }
        $this-&gt;output($error-&gt;getXml());
    }

    function output($xml)
    {
        $xml = '&lt;?xml version="1.0"?&gt;'."\n".$xml;
        $length = strlen($xml);
        header('Connection: close');
        header('Content-Length: '.$length);
        header('Content-Type: text/xml');
        header('Date: '.date('r'));
        echo $xml;
        exit;
    }

    function hasMethod($method)
    {
        return in_array($method, array_keys($this-&gt;callbacks));
    }

    function setCapabilities()
    {
        // Initialises capabilities array
        $this-&gt;capabilities = array(
            'xmlrpc' =&gt; array(
                'specUrl' =&gt; 'http://www.xmlrpc.com/spec',
                'specVersion' =&gt; 1
        ),
            'faults_interop' =&gt; array(
                'specUrl' =&gt; 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',
                'specVersion' =&gt; 20010516
        ),
            'system.multicall' =&gt; array(
                'specUrl' =&gt; 'http://www.xmlrpc.com/discuss/msgReader$1208',
                'specVersion' =&gt; 1
        ),
        );
    }

    function getCapabilities($args)
    {
        return $this-&gt;capabilities;
    }

    function setCallbacks()
    {
        $this-&gt;callbacks['system.getCapabilities'] = 'this:getCapabilities';
        $this-&gt;callbacks['system.listMethods'] = 'this:listMethods';
        $this-&gt;callbacks['system.multicall'] = 'this:multiCall';
    }

    function listMethods($args)
    {
        // Returns a list of methods - uses array_reverse to ensure user defined
        // methods are listed before server defined methods
        return array_reverse(array_keys($this-&gt;callbacks));
    }

    function multiCall($methodcalls)
    {
        // See http://www.xmlrpc.com/discuss/msgReader$1208
        $return = array();
        foreach ($methodcalls as $call) {
            $method = $call['methodName'];
            $params = $call['params'];
            if ($method == 'system.multicall') {
                $result = new IXR_Error(-32600, 'Recursive calls to system.multicall are forbidden');
            } else {
                $result = $this-&gt;call($method, $params);
            }
            if (is_a($result, 'IXR_Error')) {
                $return[] = array(
                    'faultCode' =&gt; $result-&gt;code,
                    'faultString' =&gt; $result-&gt;message
                );
            } else {
                $return[] = array($result);
            }
        }
        return $return;
    }
}

/**
 * IXR_Request
 *
 * @package IXR
 * @since 1.5
 */
class IXR_Request
{
    var $method;
    var $args;
    var $xml;

    function IXR_Request($method, $args)
    {
        $this-&gt;method = $method;
        $this-&gt;args = $args;
        $this-&gt;xml = &lt;&lt;&lt;EOD
&lt;?xml version="1.0"?&gt;
&lt;methodCall&gt;
&lt;methodName&gt;{$this-&gt;method}&lt;/methodName&gt;
&lt;params&gt;

EOD;
        foreach ($this-&gt;args as $arg) {
            $this-&gt;xml .= '&lt;param&gt;&lt;value&gt;';
            $v = new IXR_Value($arg);
            $this-&gt;xml .= $v-&gt;getXml();
            $this-&gt;xml .= "&lt;/value&gt;&lt;/param&gt;\n";
        }
        $this-&gt;xml .= '&lt;/params&gt;&lt;/methodCall&gt;';
    }

    function getLength()
    {
        return strlen($this-&gt;xml);
    }

    function getXml()
    {
        return $this-&gt;xml;
    }
}

/**
 * IXR_Client
 *
 * @package IXR
 * @since 1.5
 *
 */
class IXR_Client
{
    var $server;
    var $port;
    var $path;
    var $useragent;
    var $response;
    var $message = false;
    var $debug = false;
    var $timeout;
    var $headers = array();

    // Storage place for an error message
    var $error = false;

    function IXR_Client($server, $path = false, $port = 80, $timeout = 15)
    {
        if (!$path) {
            // Assume we have been given a URL instead
            $bits = parse_url($server);
            $this-&gt;server = $bits['host'];
            $this-&gt;port = isset($bits['port']) ? $bits['port'] : 80;
            $this-&gt;path = isset($bits['path']) ? $bits['path'] : '/';

            // Make absolutely sure we have a path
            if (!$this-&gt;path) {
                $this-&gt;path = '/';
            }
        } else {
            $this-&gt;server = $server;
            $this-&gt;path = $path;
            $this-&gt;port = $port;
        }
        $this-&gt;useragent = 'The Incutio XML-RPC PHP Library';
        $this-&gt;timeout = $timeout;
    }

    function query()
    {
        $args = func_get_args();
        $method = array_shift($args);
        $request = new IXR_Request($method, $args);
        $length = $request-&gt;getLength();
        $xml = $request-&gt;getXml();
        $r = "\r\n";
        $request  = "POST {$this-&gt;path} HTTP/1.0$r";

        // Merged from WP #8145 - allow custom headers
        $this-&gt;headers['Host']          = $this-&gt;server;
        $this-&gt;headers['Content-Type']  = 'text/xml';
        $this-&gt;headers['User-Agent']    = $this-&gt;useragent;
        $this-&gt;headers['Content-Length']= $length;

        foreach( $this-&gt;headers as $header =&gt; $value ) {
            $request .= "{$header}: {$value}{$r}";
        }
        $request .= $r;

        $request .= $xml;

        // Now send the request
        if ($this-&gt;debug) {
            echo '&lt;pre class="ixr_request"&gt;'.htmlspecialchars($request)."\n&lt;/pre&gt;\n\n";
        }

        if ($this-&gt;timeout) {
            $fp = @fsockopen($this-&gt;server, $this-&gt;port, $errno, $errstr, $this-&gt;timeout);
        } else {
            $fp = @fsockopen($this-&gt;server, $this-&gt;port, $errno, $errstr);
        }
        if (!$fp) {
            $this-&gt;error = new IXR_Error(-32300, 'transport error - could not open socket');
            return false;
        }
        fputs($fp, $request);
        $contents = '';
        $debugContents = '';
        $gotFirstLine = false;
        $gettingHeaders = true;
        while (!feof($fp)) {
            $line = fgets($fp, 4096);
            if (!$gotFirstLine) {
                // Check line for '200'
                if (strstr($line, '200') === false) {
                    $this-&gt;error = new IXR_Error(-32300, 'transport error - HTTP status code was not 200');
                    return false;
                }
                $gotFirstLine = true;
            }
            if (trim($line) == '') {
                $gettingHeaders = false;
            }
            if (!$gettingHeaders) {
            	// merged from WP #12559 - remove trim
                $contents .= $line;
            }
            if ($this-&gt;debug) {
            	$debugContents .= $line;
            }
        }
        if ($this-&gt;debug) {
            echo '&lt;pre class="ixr_response"&gt;'.htmlspecialchars($debugContents)."\n&lt;/pre&gt;\n\n";
        }

        // Now parse what we've got back
        $this-&gt;message = new IXR_Message($contents);
        if (!$this-&gt;message-&gt;parse()) {
            // XML error
            $this-&gt;error = new IXR_Error(-32700, 'parse error. not well formed');
            return false;
        }

        // Is the message a fault?
        if ($this-&gt;message-&gt;messageType == 'fault') {
            $this-&gt;error = new IXR_Error($this-&gt;message-&gt;faultCode, $this-&gt;message-&gt;faultString);
            return false;
        }

        // Message must be OK
        return true;
    }

    function getResponse()
    {
        // methodResponses can only have one param - return that
        return $this-&gt;message-&gt;params[0];
    }

    function isError()
    {
        return (is_object($this-&gt;error));
    }

    function getErrorCode()
    {
        return $this-&gt;error-&gt;code;
    }

    function getErrorMessage()
    {
        return $this-&gt;error-&gt;message;
    }
}


/**
 * IXR_Error
 *
 * @package IXR
 * @since 1.5
 */
class IXR_Error
{
    var $code;
    var $message;

    function IXR_Error($code, $message)
    {
        $this-&gt;code = $code;
        $this-&gt;message = htmlspecialchars($message);
    }

    function getXml()
    {
        $xml = &lt;&lt;&lt;EOD
&lt;methodResponse&gt;
  &lt;fault&gt;
    &lt;value&gt;
      &lt;struct&gt;
        &lt;member&gt;
          &lt;name&gt;faultCode&lt;/name&gt;
          &lt;value&gt;&lt;int&gt;{$this-&gt;code}&lt;/int&gt;&lt;/value&gt;
        &lt;/member&gt;
        &lt;member&gt;
          &lt;name&gt;faultString&lt;/name&gt;
          &lt;value&gt;&lt;string&gt;{$this-&gt;message}&lt;/string&gt;&lt;/value&gt;
        &lt;/member&gt;
      &lt;/struct&gt;
    &lt;/value&gt;
  &lt;/fault&gt;
&lt;/methodResponse&gt;

EOD;
        return $xml;
    }
}

/**
 * IXR_Date
 *
 * @package IXR
 * @since 1.5
 */
class IXR_Date {
    var $year;
    var $month;
    var $day;
    var $hour;
    var $minute;
    var $second;
    var $timezone;

    function IXR_Date($time)
    {
        // $time can be a PHP timestamp or an ISO one
        if (is_numeric($time)) {
            $this-&gt;parseTimestamp($time);
        } else {
            $this-&gt;parseIso($time);
        }
    }

    function parseTimestamp($timestamp)
    {
        $this-&gt;year = date('Y', $timestamp);
        $this-&gt;month = date('m', $timestamp);
        $this-&gt;day = date('d', $timestamp);
        $this-&gt;hour = date('H', $timestamp);
        $this-&gt;minute = date('i', $timestamp);
        $this-&gt;second = date('s', $timestamp);
        $this-&gt;timezone = '';
    }

    function parseIso($iso)
    {
        $this-&gt;year = substr($iso, 0, 4);
        $this-&gt;month = substr($iso, 4, 2);
        $this-&gt;day = substr($iso, 6, 2);
        $this-&gt;hour = substr($iso, 9, 2);
        $this-&gt;minute = substr($iso, 12, 2);
        $this-&gt;second = substr($iso, 15, 2);
        $this-&gt;timezone = substr($iso, 17);
    }

    function getIso()
    {
        return $this-&gt;year.$this-&gt;month.$this-&gt;day.'T'.$this-&gt;hour.':'.$this-&gt;minute.':'.$this-&gt;second.$this-&gt;timezone;
    }

    function getXml()
    {
        return '&lt;dateTime.iso8601&gt;'.$this-&gt;getIso().'&lt;/dateTime.iso8601&gt;';
    }

    function getTimestamp()
    {
        return mktime($this-&gt;hour, $this-&gt;minute, $this-&gt;second, $this-&gt;month, $this-&gt;day, $this-&gt;year);
    }
}

/**
 * IXR_Base64
 *
 * @package IXR
 * @since 1.5
 */
class IXR_Base64
{
    var $data;

    function IXR_Base64($data)
    {
        $this-&gt;data = $data;
    }

    function getXml()
    {
        return '&lt;base64&gt;'.base64_encode($this-&gt;data).'&lt;/base64&gt;';
    }
}

/**
 * IXR_IntrospectionServer
 *
 * @package IXR
 * @since 1.5
 */
class IXR_IntrospectionServer extends IXR_Server
{
    var $signatures;
    var $help;

    function IXR_IntrospectionServer()
    {
        $this-&gt;setCallbacks();
        $this-&gt;setCapabilities();
        $this-&gt;capabilities['introspection'] = array(
            'specUrl' =&gt; 'http://xmlrpc.usefulinc.com/doc/reserved.html',
            'specVersion' =&gt; 1
        );
        $this-&gt;addCallback(
            'system.methodSignature',
            'this:methodSignature',
            array('array', 'string'),
            'Returns an array describing the return type and required parameters of a method'
        );
        $this-&gt;addCallback(
            'system.getCapabilities',
            'this:getCapabilities',
            array('struct'),
            'Returns a struct describing the XML-RPC specifications supported by this server'
        );
        $this-&gt;addCallback(
            'system.listMethods',
            'this:listMethods',
            array('array'),
            'Returns an array of available methods on this server'
        );
        $this-&gt;addCallback(
            'system.methodHelp',
            'this:methodHelp',
            array('string', 'string'),
            'Returns a documentation string for the specified method'
        );
    }

    function addCallback($method, $callback, $args, $help)
    {
        $this-&gt;callbacks[$method] = $callback;
        $this-&gt;signatures[$method] = $args;
        $this-&gt;help[$method] = $help;
    }

    function call($methodname, $args)
    {
        // Make sure it's in an array
        if ($args &amp;&amp; !is_array($args)) {
            $args = array($args);
        }

        // Over-rides default call method, adds signature check
        if (!$this-&gt;hasMethod($methodname)) {
            return new IXR_Error(-32601, 'server error. requested method "'.$this-&gt;message-&gt;methodName.'" not specified.');
        }
        $method = $this-&gt;callbacks[$methodname];
        $signature = $this-&gt;signatures[$methodname];
        $returnType = array_shift($signature);

        // Check the number of arguments
        if (count($args) != count($signature)) {
            return new IXR_Error(-32602, 'server error. wrong number of method parameters');
        }

        // Check the argument types
        $ok = true;
        $argsbackup = $args;
        for ($i = 0, $j = count($args); $i &lt; $j; $i++) {
            $arg = array_shift($args);
            $type = array_shift($signature);
            switch ($type) {
                case 'int':
                case 'i4':
                    if (is_array($arg) || !is_int($arg)) {
                        $ok = false;
                    }
                    break;
                case 'base64':
                case 'string':
                    if (!is_string($arg)) {
                        $ok = false;
                    }
                    break;
                case 'boolean':
                    if ($arg !== false &amp;&amp; $arg !== true) {
                        $ok = false;
                    }
                    break;
                case 'float':
                case 'double':
                    if (!is_float($arg)) {
                        $ok = false;
                    }
                    break;
                case 'date':
                case 'dateTime.iso8601':
                    if (!is_a($arg, 'IXR_Date')) {
                        $ok = false;
                    }
                    break;
            }
            if (!$ok) {
                return new IXR_Error(-32602, 'server error. invalid method parameters');
            }
        }
        // It passed the test - run the "real" method call
        return parent::call($methodname, $argsbackup);
    }

    function methodSignature($method)
    {
        if (!$this-&gt;hasMethod($method)) {
            return new IXR_Error(-32601, 'server error. requested method "'.$method.'" not specified.');
        }
        // We should be returning an array of types
        $types = $this-&gt;signatures[$method];
        $return = array();
        foreach ($types as $type) {
            switch ($type) {
                case 'string':
                    $return[] = 'string';
                    break;
                case 'int':
                case 'i4':
                    $return[] = 42;
                    break;
                case 'double':
                    $return[] = 3.1415;
                    break;
                case 'dateTime.iso8601':
                    $return[] = new IXR_Date(time());
                    break;
                case 'boolean':
                    $return[] = true;
                    break;
                case 'base64':
                    $return[] = new IXR_Base64('base64');
                    break;
                case 'array':
                    $return[] = array('array');
                    break;
                case 'struct':
                    $return[] = array('struct' =&gt; 'struct');
</codefragment>
  </duplication>
  <duplication lines="27" tokens="40">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="454"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-http.php" line="416"/>
    <codefragment>	function buildCookieHeader( &amp;$r ) {
		if ( ! empty($r['cookies']) ) {
			$cookies_header = '';
			foreach ( (array) $r['cookies'] as $cookie ) {
				$cookies_header .= $cookie-&gt;getHeaderValue() . '; ';
			}
			$cookies_header = substr( $cookies_header, 0, -2 );
			$r['headers']['cookie'] = $cookies_header;
		}
	}

	/**
	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.
	 *
	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support
	 * returning footer headers. Shouldn't be too difficult to support it though.
	 *
	 * @todo Add support for footer chunked headers.
	 * @access public
	 * @since 2.7.0
	 * @static
	 *
	 * @param string $body Body content
	 * @return string Chunked decoded body on success or raw body on failure.
	 */
	function chunkTransferDecode($body) {
		$body = str_replace(array("\r\n", "\r"), "\n", $body);
</codefragment>
  </duplication>
  <duplication lines="43" tokens="49">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="560"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-http.php" line="536"/>
    <codefragment>		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.
	}
}

/**
 * HTTP request method uses fsockopen function to retrieve the url.
 *
 * This would be the preferred method, but the fsockopen implementation has the most overhead of all
 * the HTTP transport implementations.
 *
 * @package WordPress
 * @subpackage HTTP
 * @since 2.7.0
 */
class WP_Http_Fsockopen {
	/**
	 * Send a HTTP request to a URI using fsockopen().
	 *
	 * Does not support non-blocking mode.
	 *
	 * @see WP_Http::request For default options descriptions.
	 *
	 * @since 2.7
	 * @access public
	 * @param string $url URI resource.
	 * @param str|array $args Optional. Override the defaults.
	 * @return array 'headers', 'body', 'cookies' and 'response' keys.
	 */
	function request($url, $args = array()) {
		$defaults = array(
			'method' =&gt; 'GET', 'timeout' =&gt; 5,
			'redirection' =&gt; 5, 'httpversion' =&gt; '1.0',
			'blocking' =&gt; true,
			'headers' =&gt; array(), 'body' =&gt; null, 'cookies' =&gt; array()
		);

		$r = wp_parse_args( $args, $defaults );

		if ( isset($r['headers']['User-Agent']) ) {
			$r['user-agent'] = $r['headers']['User-Agent'];
			unset($r['headers']['User-Agent']);
		} else if( isset($r['headers']['user-agent']) ) {
			$r['user-agent'] = $r['headers']['user-agent'];
</codefragment>
  </duplication>
  <duplication lines="20" tokens="79">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="662"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-http.php" line="648"/>
    <codefragment>		if ( $proxy-&gt;is_enabled() &amp;&amp; $proxy-&gt;send_through_proxy( $url ) ) //Some proxies require full URL in this field.
			$requestPath = $url;
		else
			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );

		if ( empty($requestPath) )
			$requestPath .= '/';

		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";

		if ( $proxy-&gt;is_enabled() &amp;&amp; $proxy-&gt;send_through_proxy( $url ) )
			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";
		else
			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";

		if ( isset($r['user-agent']) )
			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";

		if ( is_array($r['headers']) ) {
			foreach ( (array) $r['headers'] as $header =&gt; $headerValue )
</codefragment>
  </duplication>
  <duplication lines="59" tokens="110">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="879"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-http.php" line="771"/>
    <codefragment>		return apply_filters('use_fopen_transport', $use, $args);
	}
}

/**
 * HTTP request method uses Streams to retrieve the url.
 *
 * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting
 * to be enabled.
 *
 * Second preferred method for getting the URL, for PHP 5.
 *
 * @package WordPress
 * @subpackage HTTP
 * @since 2.7.0
 */
class WP_Http_Streams {
	/**
	 * Send a HTTP request to a URI using streams with fopen().
	 *
	 * @access public
	 * @since 2.7.0
	 *
	 * @param string $url
	 * @param str|array $args Optional. Override the defaults.
	 * @return array 'headers', 'body', 'cookies' and 'response' keys.
	 */
	function request($url, $args = array()) {
		$defaults = array(
			'method' =&gt; 'GET', 'timeout' =&gt; 5,
			'redirection' =&gt; 5, 'httpversion' =&gt; '1.0',
			'blocking' =&gt; true,
			'headers' =&gt; array(), 'body' =&gt; null, 'cookies' =&gt; array()
		);

		$r = wp_parse_args( $args, $defaults );

		if ( isset($r['headers']['User-Agent']) ) {
			$r['user-agent'] = $r['headers']['User-Agent'];
			unset($r['headers']['User-Agent']);
		} else if( isset($r['headers']['user-agent']) ) {
			$r['user-agent'] = $r['headers']['user-agent'];
			unset($r['headers']['user-agent']);
		}

		// Construct Cookie: header if any cookies are set
		WP_Http::buildCookieHeader( $r );

		$arrURL = parse_url($url);

		if ( false === $arrURL )
			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));

		if ( 'http' != $arrURL['scheme'] &amp;&amp; 'https' != $arrURL['scheme'] )
			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);

		// Convert Header array to string.
		$strHeaders = '';
		if ( is_array( $r['headers'] ) )
</codefragment>
  </duplication>
  <duplication lines="52" tokens="149">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="1651"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-http.php" line="1466"/>
    <codefragment>				$key = strtolower( trim( $key ) );
				if ( 'expires' == $key )
					$val = strtotime( $val );
				$this-&gt;$key = $val;
			}
		} else {
			if ( !isset( $data['name'] ) )
				return false;

			// Set properties based directly on parameters
			$this-&gt;name   = $data['name'];
			$this-&gt;value  = isset( $data['value'] ) ? $data['value'] : '';
			$this-&gt;path   = isset( $data['path'] ) ? $data['path'] : '';
			$this-&gt;domain = isset( $data['domain'] ) ? $data['domain'] : '';

			if ( isset( $data['expires'] ) )
				$this-&gt;expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );
			else
				$this-&gt;expires = null;
		}
	}

	/**
	 * Confirms that it's OK to send this cookie to the URL checked against.
	 *
	 * Decision is based on RFC 2109/2965, so look there for details on validity.
	 *
	 * @access public
	 * @since 2.8.0
	 *
	 * @param string $url URL you intend to send this cookie to
	 * @return boolean TRUE if allowed, FALSE otherwise.
	 */
	function test( $url ) {
		// Expires - if expired then nothing else matters
		if ( time() &gt; $this-&gt;expires )
			return false;

		// Get details on the URL we're thinking about sending to
		$url = parse_url( $url );
		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;
		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';

		// Values to use for comparison against the URL
		$path   = isset( $this-&gt;path )   ? $this-&gt;path   : '/';
		$port   = isset( $this-&gt;port )   ? $this-&gt;port   : 80;
		$domain = isset( $this-&gt;domain ) ? strtolower( $this-&gt;domain ) : strtolower( $url['host'] );
		if ( false === stripos( $domain, '.' ) )
			$domain .= '.local';

		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)
		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;
</codefragment>
  </duplication>
  <duplication lines="57" tokens="158">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.passwordhash.php" line="38"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpass.php" line="36"/>
    <codefragment>class PasswordHash {
	var $itoa64;
	var $iteration_count_log2;
	var $portable_hashes;
	var $random_state;

	function PasswordHash($iteration_count_log2, $portable_hashes)
	{
		$this-&gt;itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

		if ($iteration_count_log2 &lt; 4 || $iteration_count_log2 &gt; 31)
			$iteration_count_log2 = 8;
		$this-&gt;iteration_count_log2 = $iteration_count_log2;

		$this-&gt;portable_hashes = $portable_hashes;

		$this-&gt;random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons
	}

	function get_random_bytes($count)
	{
		$output = '';
		if ( @is_readable('/dev/urandom') &amp;&amp;
		    ($fh = @fopen('/dev/urandom', 'rb'))) {
			$output = fread($fh, $count);
			fclose($fh);
		}

		if (strlen($output) &lt; $count) {
			$output = '';
			for ($i = 0; $i &lt; $count; $i += 16) {
				$this-&gt;random_state =
				    md5(microtime() . $this-&gt;random_state);
				$output .=
				    pack('H*', md5($this-&gt;random_state));
			}
			$output = substr($output, 0, $count);
		}

		return $output;
	}

	function encode64($input, $count)
	{
		$output = '';
		$i = 0;
		do {
			$value = ord($input[$i++]);
			$output .= $this-&gt;itoa64[$value &amp; 0x3f];
			if ($i &lt; $count)
				$value |= ord($input[$i]) &lt;&lt; 8;
			$output .= $this-&gt;itoa64[($value &gt;&gt; 6) &amp; 0x3f];
			if ($i++ &gt;= $count)
				break;
			if ($i &lt; $count)
				$value |= ord($input[$i]) &lt;&lt; 16;
			$output .= $this-&gt;itoa64[($value &gt;&gt; 12) &amp; 0x3f];
</codefragment>
  </duplication>
  <duplication lines="110" tokens="286">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.passwordhash.php" line="120"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpass.php" line="120"/>
    <codefragment>			return $output;

		$count_log2 = strpos($this-&gt;itoa64, $setting[3]);
		if ($count_log2 &lt; 7 || $count_log2 &gt; 30)
			return $output;

		$count = 1 &lt;&lt; $count_log2;

		$salt = substr($setting, 4, 8);
		if (strlen($salt) != 8)
			return $output;

		# We're kind of forced to use MD5 here since it's the only
		# cryptographic primitive available in all versions of PHP
		# currently in use.  To implement our own low-level crypto
		# in PHP would result in much worse performance and
		# consequently in lower iteration counts and hashes that are
		# quicker to crack (by non-PHP code).
		if (PHP_VERSION &gt;= '5') {
			$hash = md5($salt . $password, TRUE);
			do {
				$hash = md5($hash . $password, TRUE);
			} while (--$count);
		} else {
			$hash = pack('H*', md5($salt . $password));
			do {
				$hash = pack('H*', md5($hash . $password));
			} while (--$count);
		}

		$output = substr($setting, 0, 12);
		$output .= $this-&gt;encode64($hash, 16);

		return $output;
	}

	function gensalt_extended($input)
	{
		$count_log2 = min($this-&gt;iteration_count_log2 + 8, 24);
		# This should be odd to not reveal weak DES keys, and the
		# maximum valid value is (2**24 - 1) which is odd anyway.
		$count = (1 &lt;&lt; $count_log2) - 1;

		$output = '_';
		$output .= $this-&gt;itoa64[$count &amp; 0x3f];
		$output .= $this-&gt;itoa64[($count &gt;&gt; 6) &amp; 0x3f];
		$output .= $this-&gt;itoa64[($count &gt;&gt; 12) &amp; 0x3f];
		$output .= $this-&gt;itoa64[($count &gt;&gt; 18) &amp; 0x3f];

		$output .= $this-&gt;encode64($input, 3);

		return $output;
	}

	function gensalt_blowfish($input)
	{
		# This one needs to use a different order of characters and a
		# different encoding scheme from the one in encode64() above.
		# We care because the last character in our encoded string will
		# only represent 2 bits.  While two known implementations of
		# bcrypt will happily accept and correct a salt string which
		# has the 4 unused bits set to non-zero, we do not want to take
		# chances and we also do not want to waste an additional byte
		# of entropy.
		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

		$output = '$2a$';
		$output .= chr(ord('0') + $this-&gt;iteration_count_log2 / 10);
		$output .= chr(ord('0') + $this-&gt;iteration_count_log2 % 10);
		$output .= '$';

		$i = 0;
		do {
			$c1 = ord($input[$i++]);
			$output .= $itoa64[$c1 &gt;&gt; 2];
			$c1 = ($c1 &amp; 0x03) &lt;&lt; 4;
			if ($i &gt;= 16) {
				$output .= $itoa64[$c1];
				break;
			}

			$c2 = ord($input[$i++]);
			$c1 |= $c2 &gt;&gt; 4;
			$output .= $itoa64[$c1];
			$c1 = ($c2 &amp; 0x0f) &lt;&lt; 2;

			$c2 = ord($input[$i++]);
			$c1 |= $c2 &gt;&gt; 6;
			$output .= $itoa64[$c1];
			$output .= $itoa64[$c2 &amp; 0x3f];
		} while (1);

		return $output;
	}

	function HashPassword($password)
	{
		$random = '';

		if (CRYPT_BLOWFISH == 1 &amp;&amp; !$this-&gt;portable_hashes) {
			$random = $this-&gt;get_random_bytes(16);
			$hash =
			    crypt($password, $this-&gt;gensalt_blowfish($random));
			if (strlen($hash) == 60)
				return $hash;
		}

		if (CRYPT_EXT_DES == 1 &amp;&amp; !$this-&gt;portable_hashes) {
			if (strlen($random) &lt; 3)
				$random = $this-&gt;get_random_bytes(3);
</codefragment>
  </duplication>
  <duplication lines="45" tokens="176">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="719"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="932"/>
    <codefragment>  function WrapText($message, $length, $qp_mode = false) {
    $soft_break = ($qp_mode) ? sprintf(" =%s", $this-&gt;LE) : $this-&gt;LE;
    // If utf-8 encoding is used, we will need to make sure we don't
    // split multibyte characters when we wrap
    $is_utf8 = (strtolower($this-&gt;CharSet) == "utf-8");

    $message = $this-&gt;FixEOL($message);
    if (substr($message, -1) == $this-&gt;LE) {
      $message = substr($message, 0, -1);
    }

    $line = explode($this-&gt;LE, $message);
    $message = '';
    for ($i=0 ;$i &lt; count($line); $i++) {
      $line_part = explode(' ', $line[$i]);
      $buf = '';
      for ($e = 0; $e&lt;count($line_part); $e++) {
        $word = $line_part[$e];
        if ($qp_mode and (strlen($word) &gt; $length)) {
          $space_left = $length - strlen($buf) - 1;
          if ($e != 0) {
            if ($space_left &gt; 20) {
              $len = $space_left;
              if ($is_utf8) {
                $len = $this-&gt;UTF8CharBoundary($word, $len);
              } elseif (substr($word, $len - 1, 1) == "=") {
                $len--;
              } elseif (substr($word, $len - 2, 1) == "=") {
                $len -= 2;
              }
              $part = substr($word, 0, $len);
              $word = substr($word, $len);
              $buf .= ' ' . $part;
              $message .= $buf . sprintf("=%s", $this-&gt;LE);
            } else {
              $message .= $buf . $soft_break;
            }
            $buf = '';
          }
          while (strlen($word) &gt; 0) {
            $len = $length;
            if ($is_utf8) {
              $len = $this-&gt;UTF8CharBoundary($word, $len);
            } elseif (substr($word, $len - 1, 1) == "=") {
              $len--;
</codefragment>
  </duplication>
  <duplication lines="11" tokens="45">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="937"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="1156"/>
    <codefragment>  function GetMailMIME() {
    $result = '';
    switch($this-&gt;message_type) {
      case 'plain':
        $result .= $this-&gt;HeaderLine('Content-Transfer-Encoding', $this-&gt;Encoding);
        $result .= sprintf("Content-Type: %s; charset=\"%s\"", $this-&gt;ContentType, $this-&gt;CharSet);
        break;
      case 'attachments':
        /* fall through */
      case 'alt_attachments':
        if($this-&gt;InlineImageExists()){
</codefragment>
  </duplication>
  <duplication lines="9" tokens="46">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="1177"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="1419"/>
    <codefragment>      $mime[] = sprintf("--%s%s", $this-&gt;boundary[1], $this-&gt;LE);
      $mime[] = sprintf("Content-Type: %s; name=\"%s\"%s", $type, $this-&gt;EncodeHeader($this-&gt;SecureHeader($name)), $this-&gt;LE);
      $mime[] = sprintf("Content-Transfer-Encoding: %s%s", $encoding, $this-&gt;LE);

      if($disposition == 'inline') {
        $mime[] = sprintf("Content-ID: &lt;%s&gt;%s", $cid, $this-&gt;LE);
      }

      $mime[] = sprintf("Content-Disposition: %s; filename=\"%s\"%s", $disposition, $this-&gt;EncodeHeader($this-&gt;SecureHeader($name)), $this-&gt;LE.$this-&gt;LE);
</codefragment>
  </duplication>
  <duplication lines="34" tokens="83">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="1266"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="1522"/>
    <codefragment>  function EncodeHeader ($str, $position = 'text') {
    $x = 0;

    switch (strtolower($position)) {
      case 'phrase':
        if (!preg_match('/[\200-\377]/', $str)) {
          /* Can't use addslashes as we don't know what value has magic_quotes_sybase. */
          $encoded = addcslashes($str, "\0..\37\177\\\"");
          if (($str == $encoded) &amp;&amp; !preg_match('/[^A-Za-z0-9!#$%&amp;\'*+\/=?^_`{|}~ -]/', $str)) {
            return ($encoded);
          } else {
            return ("\"$encoded\"");
          }
        }
        $x = preg_match_all('/[^\040\041\043-\133\135-\176]/', $str, $matches);
        break;
      case 'comment':
        $x = preg_match_all('/[()"]/', $str, $matches);
        /* Fall-through */
      case 'text':
      default:
        $x += preg_match_all('/[\000-\010\013\014\016-\037\177-\377]/', $str, $matches);
        break;
    }

    if ($x == 0) {
      return ($str);
    }

    $maxlen = 75 - 7 - strlen($this-&gt;CharSet);
    /* Try to select the encoding which should produce the shortest output */
    if (strlen($str)/3 &lt; $x) {
      $encoding = 'B';
      if (function_exists('mb_strlen') &amp;&amp; $this-&gt;HasMultiBytes($str)) {
</codefragment>
  </duplication>
  <duplication lines="6" tokens="14">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="1343"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="1599"/>
    <codefragment>  function Base64EncodeWrapMB($str) {
    $start = "=?".$this-&gt;CharSet."?B?";
    $end = "?=";
    $encoded = "";

    $mb_length = mb_strlen($str, $this-&gt;CharSet);
</codefragment>
  </duplication>
  <duplication lines="16" tokens="70">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php" line="1380"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-phpmailer.php" line="1639"/>
    <codefragment>  function EncodeQP( $input = '', $line_max = 76, $space_conv = false ) {
    $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
    $lines = preg_split('/(?:\r\n|\r|\n)/', $input);
    $eol = "\r\n";
    $escape = '=';
    $output = '';
    while( list(, $line) = each($lines) ) {
      $linlen = strlen($line);
      $newline = '';
      for($i = 0; $i &lt; $linlen; $i++) {
        $c = substr( $line, $i, 1 );
        $dec = ord( $c );
        if ( ( $i == 0 ) &amp;&amp; ( $dec == 46 ) ) { // convert first point in the line into =2E
          $c = '=2E';
        }
        if ( $dec == 32 ) {
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2512"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3414"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)
		{
			$name = null;
			$uri = null;
			$email = null;
			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2534"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3436"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)
		{
			$name = null;
			$url = null;
			$email = null;
			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2429"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3472"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)
		{
			$name = null;
			$uri = null;
			$email = null;
			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="28">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2451"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3494"/>
    <codefragment>		if ($author = $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))
		{
			$name = null;
			$url = null;
			$email = null;
			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="13" tokens="60">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2626"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3724"/>
    <codefragment>				$this-&gt;data['links']['alternate'][] = $this-&gt;sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this-&gt;get_base($links[0]));
			}

			$keys = array_keys($this-&gt;data['links']);
			foreach ($keys as $key)
			{
				if (SimplePie_Misc::is_isegment_nz_nc($key))
				{
					if (isset($this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))
					{
						$this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this-&gt;data['links'][$key], $this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);
						$this-&gt;data['links'][$key] =&amp; $this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];
					}
</codefragment>
  </duplication>
  <duplication lines="12" tokens="31">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3811"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3843"/>
    <codefragment>			if ($captions = $this-&gt;get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))
			{
				foreach ($captions as $caption)
				{
					$caption_type = null;
					$caption_lang = null;
					$caption_startTime = null;
					$caption_endTime = null;
					$caption_text = null;
					if (isset($caption['attribs']['']['type']))
					{
						$caption_type = $this-&gt;sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="15">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="3813"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4526"/>
    <codefragment>				foreach ($captions as $caption)
				{
					$caption_type = null;
					$caption_lang = null;
					$caption_startTime = null;
					$caption_endTime = null;
					$caption_text = null;
					if (isset($caption['attribs']['']['type']))
</codefragment>
  </duplication>
  <duplication lines="14" tokens="39">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4526"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4562"/>
    <codefragment>							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)
							{
								$caption_type = null;
								$caption_lang = null;
								$caption_startTime = null;
								$caption_endTime = null;
								$caption_text = null;
								if (isset($caption['attribs']['']['type']))
								{
									$caption_type = $this-&gt;sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($caption['attribs']['']['lang']))
								{
									$caption_lang = $this-&gt;sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="137" tokens="377">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4432"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5053"/>
    <codefragment>				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)
				{
					if (isset($content['attribs']['']['url']))
					{
						// Attributes
						$bitrate = null;
						$channels = null;
						$duration = null;
						$expression = null;
						$framerate = null;
						$height = null;
						$javascript = null;
						$lang = null;
						$length = null;
						$medium = null;
						$samplingrate = null;
						$type = null;
						$url = null;
						$width = null;

						// Elements
						$captions = null;
						$categories = null;
						$copyrights = null;
						$credits = null;
						$description = null;
						$hashes = null;
						$keywords = null;
						$player = null;
						$ratings = null;
						$restrictions = null;
						$thumbnails = null;
						$title = null;

						// Start checking the attributes of media:content
						if (isset($content['attribs']['']['bitrate']))
						{
							$bitrate = $this-&gt;sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['channels']))
						{
							$channels = $this-&gt;sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['duration']))
						{
							$duration = $this-&gt;sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						else
						{
							$duration = $duration_parent;
						}
						if (isset($content['attribs']['']['expression']))
						{
							$expression = $this-&gt;sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['framerate']))
						{
							$framerate = $this-&gt;sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['height']))
						{
							$height = $this-&gt;sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['lang']))
						{
							$lang = $this-&gt;sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['fileSize']))
						{
							$length = ceil($content['attribs']['']['fileSize']);
						}
						if (isset($content['attribs']['']['medium']))
						{
							$medium = $this-&gt;sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['samplingrate']))
						{
							$samplingrate = $this-&gt;sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['type']))
						{
							$type = $this-&gt;sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						if (isset($content['attribs']['']['width']))
						{
							$width = $this-&gt;sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);
						}
						$url = $this-&gt;sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);

						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel

						// CAPTIONS
						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))
						{
							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)
							{
								$caption_type = null;
								$caption_lang = null;
								$caption_startTime = null;
								$caption_endTime = null;
								$caption_text = null;
								if (isset($caption['attribs']['']['type']))
								{
									$caption_type = $this-&gt;sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($caption['attribs']['']['lang']))
								{
									$caption_lang = $this-&gt;sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($caption['attribs']['']['start']))
								{
									$caption_startTime = $this-&gt;sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($caption['attribs']['']['end']))
								{
									$caption_endTime = $this-&gt;sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($caption['data']))
								{
									$caption_text = $this-&gt;sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								$captions[] =&amp; new $this-&gt;feed-&gt;caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);
							}
							if (is_array($captions))
							{
								$captions = array_values(SimplePie_Misc::array_unique($captions));
							}
						}
						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))
						{
							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)
							{
								$caption_type = null;
								$caption_lang = null;
								$caption_startTime = null;
								$caption_endTime = null;
								$caption_text = null;
</codefragment>
  </duplication>
  <duplication lines="12" tokens="29">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4630"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5189"/>
    <codefragment>							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)
							{
								$term = null;
								$scheme = null;
								$label = null;
								if (isset($category['data']))
								{
									$term = $this-&gt;sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($category['attribs']['']['scheme']))
								{
									$scheme = $this-&gt;sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="20" tokens="52">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4692"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5241"/>
    <codefragment>								$copyright_label = $this-&gt;sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
							}
							$copyrights =&amp; new $this-&gt;feed-&gt;copyright_class($copyright_url, $copyright_label);
						}
						else
						{
							$copyrights = $copyrights_parent;
						}

						// CREDITS
						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))
						{
							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)
							{
								$credit_role = null;
								$credit_scheme = null;
								$credit_name = null;
								if (isset($credit['attribs']['']['role']))
								{
									$credit_role = $this-&gt;sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="11" tokens="31">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4809"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5299"/>
    <codefragment>							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)
							{
								$value = null;
								$algo = null;
								if (isset($hash['data']))
								{
									$value = $this-&gt;sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($hash['attribs']['']['algo']))
								{
									$algo = $this-&gt;sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="43" tokens="104">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="4917"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5362"/>
    <codefragment>							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)
							{
								$rating_scheme = null;
								$rating_value = null;
								if (isset($rating['attribs']['']['scheme']))
								{
									$rating_scheme = $this-&gt;sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								else
								{
									$rating_scheme = 'urn:simple';
								}
								if (isset($rating['data']))
								{
									$rating_value = $this-&gt;sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								$ratings[] =&amp; new $this-&gt;feed-&gt;rating_class($rating_scheme, $rating_value);
							}
							if (is_array($ratings))
							{
								$ratings = array_values(SimplePie_Misc::array_unique($ratings));
							}
						}
						else
						{
							$ratings = $ratings_parent;
						}

						// RESTRICTIONS
						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))
						{
							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)
							{
								$restriction_relationship = null;
								$restriction_type = null;
								$restriction_value = null;
								if (isset($restriction['attribs']['']['relationship']))
								{
									$restriction_relationship = $this-&gt;sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);
								}
								if (isset($restriction['attribs']['']['type']))
								{
									$restriction_type = $this-&gt;sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="21" tokens="62">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5454"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5489"/>
    <codefragment>			foreach ((array) $this-&gt;get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)
			{
				if (isset($link['attribs']['']['href']) &amp;&amp; !empty($link['attribs']['']['rel']) &amp;&amp; $link['attribs']['']['rel'] === 'enclosure')
				{
					// Attributes
					$bitrate = null;
					$channels = null;
					$duration = null;
					$expression = null;
					$framerate = null;
					$height = null;
					$javascript = null;
					$lang = null;
					$length = null;
					$medium = null;
					$samplingrate = null;
					$type = null;
					$url = null;
					$width = null;

					$url = $this-&gt;sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this-&gt;get_base($link));
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2429"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5891"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)
		{
			$name = null;
			$uri = null;
			$email = null;
			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="28">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2451"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5913"/>
    <codefragment>		if ($author = $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))
		{
			$name = null;
			$url = null;
			$email = null;
			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2512"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5974"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)
		{
			$name = null;
			$uri = null;
			$email = null;
			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="8" tokens="23">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2534"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="5996"/>
    <codefragment>		foreach ((array) $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)
		{
			$name = null;
			$url = null;
			$email = null;
			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))
			{
				$name = $this-&gt;sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);
</codefragment>
  </duplication>
  <duplication lines="14" tokens="62">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="2624"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="6086"/>
    <codefragment>			if ($links = $this-&gt;get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))
			{
				$this-&gt;data['links']['alternate'][] = $this-&gt;sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this-&gt;get_base($links[0]));
			}

			$keys = array_keys($this-&gt;data['links']);
			foreach ($keys as $key)
			{
				if (SimplePie_Misc::is_isegment_nz_nc($key))
				{
					if (isset($this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))
					{
						$this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this-&gt;data['links'][$key], $this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);
						$this-&gt;data['links'][$key] =&amp; $this-&gt;data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];
</codefragment>
  </duplication>
  <duplication lines="25" tokens="67">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="9108"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="11777"/>
    <codefragment>	function remove_dot_segments($input)
	{
		$output = '';
		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')
		{
			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,
			if (strpos($input, '../') === 0)
			{
				$input = substr($input, 3);
			}
			elseif (strpos($input, './') === 0)
			{
				$input = substr($input, 2);
			}
			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,
			elseif (strpos($input, '/./') === 0)
			{
				$input = substr_replace($input, '/', 0, 3);
			}
			elseif ($input === '/.')
			{
				$input = '/';
			}
			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,
			elseif (strpos($input, '/../') === 0)
</codefragment>
  </duplication>
  <duplication lines="12" tokens="27">
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="10874"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-simplepie.php" line="13185"/>
    <codefragment>	function uncomment_rfc822($string)
	{
		$string = (string) $string;
		$position = 0;
		$length = strlen($string);
		$depth = 0;

		$output = '';

		while ($position &lt; $length &amp;&amp; ($pos = strpos($string, '(', $position)) !== false)
		{
			$output .= substr($string, $position, $pos - $position);
</codefragment>
  </duplication>
  <duplication lines="17" tokens="10">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer-smtp.php" line="311"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-smtp.php" line="352"/>
    <codefragment>      return false;
    }

    # the server is ready to accept data!
    # according to rfc 821 we should not send more than 1000
    # including the CRLF
    # characters on a single line so we will break the data up
    # into lines by \r and/or \n then if needed we will break
    # each of those into smaller lines to fit within the limit.
    # in addition we will be looking for lines that start with
    # a period '.' and append and additional period '.' to that
    # line. NOTE: this does not count towards are limit.

    # normalize the line breaks so we know the explode works
    $msg_data = str_replace("\r\n","\n",$msg_data);
    $msg_data = str_replace("\r","\n",$msg_data);
    $lines = explode("\n",$msg_data);
</codefragment>
  </duplication>
  <duplication lines="7" tokens="17">
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="165"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="225"/>
    <codefragment>					if($this-&gt;_redirectaddr)
					{
						/* url was redirected, check if we've hit the max depth */
						if($this-&gt;maxredirs &gt; $this-&gt;_redirectdepth)
						{
							// only follow redirect if it's on this site, or offsiteok is true
							if(preg_match("|^http://".preg_quote($this-&gt;host)."|i",$this-&gt;_redirectaddr) || $this-&gt;offsiteok)
</codefragment>
  </duplication>
  <duplication lines="6" tokens="24">
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="181"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="339"/>
    <codefragment>					if($this-&gt;_framedepth &lt; $this-&gt;maxframes &amp;&amp; count($this-&gt;_frameurls) &gt; 0)
					{
						$frameurls = $this-&gt;_frameurls;
						$this-&gt;_frameurls = array();

						while(list(,$frameurl) = each($frameurls))
</codefragment>
  </duplication>
  <duplication lines="14" tokens="56">
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="317"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-snoopy.php" line="384"/>
    <codefragment>					if($this-&gt;_redirectaddr)
					{
						/* url was redirected, check if we've hit the max depth */
						if($this-&gt;maxredirs &gt; $this-&gt;_redirectdepth)
						{
							if(!preg_match("|^".$URI_PARTS["scheme"]."://|", $this-&gt;_redirectaddr))
								$this-&gt;_redirectaddr = $this-&gt;_expandlinks($this-&gt;_redirectaddr,$URI_PARTS["scheme"]."://".$URI_PARTS["host"]);

							// only follow redirect if it's on this site, or offsiteok is true
							if(preg_match("|^http://".preg_quote($this-&gt;host)."|i",$this-&gt;_redirectaddr) || $this-&gt;offsiteok)
							{
								/* follow the redirect */
								$this-&gt;_redirectdepth++;
								$this-&gt;lastredirectaddr=$this-&gt;_redirectaddr;
</codefragment>
  </duplication>
  <duplication lines="80" tokens="167">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-ajax-response.php" line="29"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-wp-ajax-response.php" line="27"/>
    <codefragment>	function WP_Ajax_Response( $args = '' ) {
		if ( !empty($args) )
			$this-&gt;add($args);
	}

	/**
	 * Append to XML response based on given arguments.
	 *
	 * The arguments that can be passed in the $args parameter are below. It is
	 * also possible to pass a WP_Error object in either the 'id' or 'data'
	 * argument. The parameter isn't actually optional, content should be given
	 * in order to send the correct response.
	 *
	 * 'what' argument is a string that is the XMLRPC response type.
	 * 'action' argument is a boolean or string that acts like a nonce.
	 * 'id' argument can be WP_Error or an integer.
	 * 'old_id' argument is false by default or an integer of the previous ID.
	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,
	 * html ID = after, -html ID = before.
	 * 'data' argument is a string with the content or message.
	 * 'supplemental' argument is an array of strings that will be children of
	 * the supplemental element.
	 *
	 * @since 2.1.0
	 *
	 * @param string|array $args Override defaults.
	 * @return string XML response.
	 */
	function add( $args = '' ) {
		$defaults = array(
			'what' =&gt; 'object', 'action' =&gt; false,
			'id' =&gt; '0', 'old_id' =&gt; false,
			'position' =&gt; 1,
			'data' =&gt; '', 'supplemental' =&gt; array()
		);

		$r = wp_parse_args( $args, $defaults );
		extract( $r, EXTR_SKIP );
		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );

		if ( is_wp_error($id) ) {
			$data = $id;
			$id = 0;
		}

		$response = '';
		if ( is_wp_error($data) ) {
			foreach ( (array) $data-&gt;get_error_codes() as $code ) {
				$response .= "&lt;wp_error code='$code'&gt;&lt;![CDATA[" . $data-&gt;get_error_message($code) . "]]&gt;&lt;/wp_error&gt;";
				if ( !$error_data = $data-&gt;get_error_data($code) )
					continue;
				$class = '';
				if ( is_object($error_data) ) {
					$class = ' class="' . get_class($error_data) . '"';
					$error_data = get_object_vars($error_data);
				}

				$response .= "&lt;wp_error_data code='$code'$class&gt;";

				if ( is_scalar($error_data) ) {
					$response .= "&lt;![CDATA[$error_data]]&gt;";
				} elseif ( is_array($error_data) ) {
					foreach ( $error_data as $k =&gt; $v )
						$response .= "&lt;$k&gt;&lt;![CDATA[$v]]&gt;&lt;/$k&gt;";
				}

				$response .= "&lt;/wp_error_data&gt;";
			}
		} else {
			$response = "&lt;response_data&gt;&lt;![CDATA[$data]]&gt;&lt;/response_data&gt;";
		}

		$s = '';
		if ( is_array($supplemental) ) {
			foreach ( $supplemental as $k =&gt; $v )
				$s .= "&lt;$k&gt;&lt;![CDATA[$v]]&gt;&lt;/$k&gt;";
			$s = "&lt;supplemental&gt;$s&lt;/supplemental&gt;";
		}

		if ( false === $action )
</codefragment>
  </duplication>
  <duplication lines="96" tokens="120">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-error.php" line="51"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class-wp-error.php" line="57"/>
    <codefragment>	function WP_Error($code = '', $message = '', $data = '') {
		if ( empty($code) )
			return;

		$this-&gt;errors[$code][] = $message;

		if ( ! empty($data) )
			$this-&gt;error_data[$code] = $data;
	}

	/**
	 * Retrieve all error codes.
	 *
	 * @since 2.1.0
	 * @access public
	 *
	 * @return array List of error codes, if avaiable.
	 */
	function get_error_codes() {
		if ( empty($this-&gt;errors) )
			return array();

		return array_keys($this-&gt;errors);
	}

	/**
	 * Retrieve first error code available.
	 *
	 * @since 2.1.0
	 * @access public
	 *
	 * @return string|int Empty string, if no error codes.
	 */
	function get_error_code() {
		$codes = $this-&gt;get_error_codes();

		if ( empty($codes) )
			return '';

		return $codes[0];
	}

	/**
	 * Retrieve all error messages or error messages matching code.
	 *
	 * @since 2.1.0
	 *
	 * @param string|int $code Optional. Retrieve messages matching code, if exists.
	 * @return array Error strings on success, or empty array on failure (if using codee parameter).
	 */
	function get_error_messages($code = '') {
		// Return all messages if no code specified.
		if ( empty($code) ) {
			$all_messages = array();
			foreach ( (array) $this-&gt;errors as $code =&gt; $messages )
				$all_messages = array_merge($all_messages, $messages);

			return $all_messages;
		}

		if ( isset($this-&gt;errors[$code]) )
			return $this-&gt;errors[$code];
		else
			return array();
	}

	/**
	 * Get single error message.
	 *
	 * This will get the first message available for the code. If no code is
	 * given then the first code available will be used.
	 *
	 * @since 2.1.0
	 *
	 * @param string|int $code Optional. Error code to retrieve message.
	 * @return string
	 */
	function get_error_message($code = '') {
		if ( empty($code) )
			$code = $this-&gt;get_error_code();
		$messages = $this-&gt;get_error_messages($code);
		if ( empty($messages) )
			return '';
		return $messages[0];
	}

	/**
	 * Retrieve error data for error code.
	 *
	 * @since 2.1.0
	 *
	 * @param string|int $code Optional. Error code.
	 * @return mixed Null, if no errors.
	 */
	function get_error_data($code = '') {
		if ( empty($code) )
</codefragment>
  </duplication>
  <duplication lines="53" tokens="142">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-dependencies.php" line="49"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class.wp-dependencies.php" line="42"/>
    <codefragment>			if ( !in_array($handle, $this-&gt;done) &amp;&amp; isset($this-&gt;registered[$handle]) ) {

				if ( ! $this-&gt;registered[$handle]-&gt;src ) { // Defines a group.
					$this-&gt;done[] = $handle;
					continue;
				}

				if ( $this-&gt;do_item( $handle, $group ) )
					$this-&gt;done[] = $handle;

				unset( $this-&gt;to_do[$key] );
			}
		}

		return $this-&gt;done;
	}

	function do_item( $handle ) {
		return isset($this-&gt;registered[$handle]);
	}

	/**
	 * Determines dependencies
	 *
	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.
	 *

	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names
	 * @param bool recursion Used internally when function calls itself
	 */
	function all_deps( $handles, $recursion = false, $group = false ) {
		if ( !$handles = (array) $handles )
			return false;

		foreach ( $handles as $handle ) {
			$handle_parts = explode('?', $handle);
			$handle = $handle_parts[0];
			$queued = in_array($handle, $this-&gt;to_do, true);

			if ( in_array($handle, $this-&gt;done, true) ) // Already done
				continue;

			$moved = $this-&gt;set_group( $handle, $recursion, $group );

			if ( $queued &amp;&amp; !$moved ) // already queued and in the right group
				continue;

			$keep_going = true;
			if ( !isset($this-&gt;registered[$handle]) )
				$keep_going = false; // Script doesn't exist
			elseif ( $this-&gt;registered[$handle]-&gt;deps &amp;&amp; array_diff($this-&gt;registered[$handle]-&gt;deps, array_keys($this-&gt;registered)) )
				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)
			elseif ( $this-&gt;registered[$handle]-&gt;deps &amp;&amp; !$this-&gt;all_deps( $this-&gt;registered[$handle]-&gt;deps, true, $group ) )
</codefragment>
  </duplication>
  <duplication lines="42" tokens="132">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-dependencies.php" line="157"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class.wp-dependencies.php" line="172"/>
    <codefragment>	function remove( $handles ) {
		foreach ( (array) $handles as $handle )
			unset($this-&gt;registered[$handle]);
	}

	function enqueue( $handles ) {
		foreach ( (array) $handles as $handle ) {
			$handle = explode('?', $handle);
			if ( !in_array($handle[0], $this-&gt;queue) &amp;&amp; isset($this-&gt;registered[$handle[0]]) ) {
				$this-&gt;queue[] = $handle[0];
				if ( isset($handle[1]) )
					$this-&gt;args[$handle[0]] = $handle[1];
			}
		}
	}

	function dequeue( $handles ) {
		foreach ( (array) $handles as $handle ) {
			$handle = explode('?', $handle);
			$key = array_search($handle[0], $this-&gt;queue);
			if ( false !== $key ) {
				unset($this-&gt;queue[$key]);
				unset($this-&gt;args[$handle[0]]);
			}
		}
	}

	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do
		switch ( $list ) :
		case 'registered':
		case 'scripts': // back compat
			if ( isset($this-&gt;registered[$handle]) )
				return $this-&gt;registered[$handle];
			break;
		case 'to_print': // back compat
		case 'printed': // back compat
			if ( 'to_print' == $list )
				$list = 'to_do';
			else
				$list = 'printed';
		default:
			if ( in_array($handle, $this-&gt;$list) )
</codefragment>
  </duplication>
  <duplication lines="13" tokens="53">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-scripts.php" line="81"/>
    <file path="/mnt/share/buddypress/src/wp-includes/class.wp-scripts.php" line="72"/>
    <codefragment>	function do_item( $handle, $group = false ) {
		if ( !parent::do_item($handle) )
			return false;

		if ( 0 === $group &amp;&amp; $this-&gt;groups[$handle] &gt; 0 ) {
			$this-&gt;in_footer[] = $handle;
			return false;
		}

		if ( false === $group &amp;&amp; in_array($handle, $this-&gt;in_footer, true) )
			$this-&gt;in_footer = array_diff( $this-&gt;in_footer, (array) $handle );

		if ( null === $this-&gt;registered[$handle]-&gt;ver )
</codefragment>
  </duplication>
  <duplication lines="29" tokens="42">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.wp-cron.php" line="62"/>
    <file path="/mnt/share/buddypress/src/wp-includes/cron.php" line="80"/>
    <codefragment>	uksort( $crons, "strnatcasecmp" );
	_set_cron_array( $crons );
}

/**
 * Reschedule a recurring event.
 *
 * @since 2.1.0
 *
 * @param int $timestamp Timestamp for when to run the event.
 * @param string $recurrence How often the event should recur.
 * @param string $hook Action hook to execute when cron is run.
 * @param array $args Optional. Arguments to pass to the hook's callback function.
 * @return bool|null False on failure. Null when event is rescheduled.
 */
function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {
	$crons = _get_cron_array();
	$schedules = wp_get_schedules();
	$key = md5(serialize($args));
	$interval = 0;

	// First we try to get it from the schedule
	if ( 0 == $interval )
		$interval = $schedules[$recurrence]['interval'];
	// Now we try to get it from the saved interval in case the schedule disappears
	if ( 0 == $interval )
		$interval = $crons[$timestamp][$hook][$key]['interval'];
	// Now we assume something is wrong and fail to schedule
	if ( 0 == $interval )
</codefragment>
  </duplication>
  <duplication lines="56" tokens="71">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.wp-cron.php" line="249"/>
    <file path="/mnt/share/buddypress/src/wp-includes/cron.php" line="261"/>
    <codefragment>	if ( strpos($_SERVER['REQUEST_URI'], $cron_uri['path'] ) !== false || ( defined('DISABLE_WP_CRON') &amp;&amp; DISABLE_WP_CRON ) )
		return;

	if ( false === $crons = _get_cron_array() )
		return;

	$local_time = time();
	$keys = array_keys( $crons );
	if ( isset($keys[0]) &amp;&amp; $keys[0] &gt; $local_time )
		return;

	$schedules = wp_get_schedules();
	foreach ( $crons as $timestamp =&gt; $cronhooks ) {
		if ( $timestamp &gt; $local_time ) break;
		foreach ( (array) $cronhooks as $hook =&gt; $args ) {
			if ( isset($schedules[$hook]['callback']) &amp;&amp; !call_user_func( $schedules[$hook]['callback'] ) )
				continue;
			spawn_cron( $local_time );
			break 2;
		}
	}
}

/**
 * Retrieve supported and filtered Cron recurrences.
 *
 * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by
 * hooking into the 'cron_schedules' filter. The filter accepts an array of
 * arrays. The outer array has a key that is the name of the schedule or for
 * example 'weekly'. The value is an array with two keys, one is 'interval' and
 * the other is 'display'.
 *
 * The 'interval' is a number in seconds of when the cron job should run. So for
 * 'hourly', the time is 3600 or 60*60. For weekly, the value would be
 * 60*60*24*7 or 604800. The value of 'interval' would then be 604800.
 *
 * The 'display' is the description. For the 'weekly' key, the 'display' would
 * be &lt;code&gt;__('Once Weekly')&lt;/code&gt;.
 *
 * For your plugin, you will be passed an array. you can easily add your
 * schedule by doing the following.
 * &lt;code&gt;
 * // filter parameter variable name is 'array'
 *	$array['weekly'] = array(
 *		'interval' =&gt; 604800,
 *		'display' =&gt; __('Once Weekly')
 *	);
 * &lt;/code&gt;
 *
 * @since 2.1.0
 *
 * @return array
 */
function wp_get_schedules() {
	$schedules = array(
		'hourly' =&gt; array( 'interval' =&gt; 3600, 'display' =&gt; __('Once Hourly') ),
</codefragment>
  </duplication>
  <duplication lines="26" tokens="105">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="312"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="408"/>
    <codefragment>function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {
	$string = (string) $string;

	if ( 0 === strlen( $string ) ) {
		return '';
	}

	// Don't bother if there are no entities - saves a lot of processing
	if ( strpos( $string, '&amp;' ) === false ) {
		return $string;
	}

	// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value
	if ( empty( $quote_style ) ) {
		$quote_style = ENT_NOQUOTES;
	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {
		$quote_style = ENT_QUOTES;
	}

	// More complete than get_html_translation_table( HTML_SPECIALCHARS )
	$single = array( '&amp;#039;'  =&gt; '\'', '&amp;#x27;' =&gt; '\'' );
	$single_preg = array( '/&amp;#0*39;/'  =&gt; '&amp;#039;', '/&amp;#x0*27;/i' =&gt; '&amp;#x27;' );
	$double = array( '&amp;quot;' =&gt; '"', '&amp;#034;'  =&gt; '"', '&amp;#x22;' =&gt; '"' );
	$double_preg = array( '/&amp;#0*34;/'  =&gt; '&amp;#034;', '/&amp;#x0*22;/i' =&gt; '&amp;#x22;' );
	$others = array( '&amp;lt;'   =&gt; '&lt;', '&amp;#060;'  =&gt; '&lt;', '&amp;gt;'   =&gt; '&gt;', '&amp;#062;'  =&gt; '&gt;', '&amp;amp;'  =&gt; '&amp;', '&amp;#038;'  =&gt; '&amp;', '&amp;#x26;' =&gt; '&amp;' );
	$others_preg = array( '/&amp;#0*60;/'  =&gt; '&amp;#060;', '/&amp;#0*62;/'  =&gt; '&amp;#062;', '/&amp;#0*38;/'  =&gt; '&amp;#038;', '/&amp;#x0*26;/i' =&gt; '&amp;#x26;' );
</codefragment>
  </duplication>
  <duplication lines="16" tokens="42">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="421"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="513"/>
    <codefragment>function utf8_uri_encode( $utf8_string, $length = 0 ) {
	$unicode = '';
	$values = array();
	$num_octets = 1;
	$unicode_length = 0;

	$string_length = strlen( $utf8_string );
	for ($i = 0; $i &lt; $string_length; $i++ ) {

		$value = ord( $utf8_string[ $i ] );

		if ( $value &lt; 128 ) {
			if ( $length &amp;&amp; ( $unicode_length &gt;= $length ) )
				break;
			$unicode .= chr($value);
			$unicode_length++;
</codefragment>
  </duplication>
  <duplication lines="59" tokens="701">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="510"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="604"/>
    <codefragment>		chr(196).chr(128) =&gt; 'A', chr(196).chr(129) =&gt; 'a',
		chr(196).chr(130) =&gt; 'A', chr(196).chr(131) =&gt; 'a',
		chr(196).chr(132) =&gt; 'A', chr(196).chr(133) =&gt; 'a',
		chr(196).chr(134) =&gt; 'C', chr(196).chr(135) =&gt; 'c',
		chr(196).chr(136) =&gt; 'C', chr(196).chr(137) =&gt; 'c',
		chr(196).chr(138) =&gt; 'C', chr(196).chr(139) =&gt; 'c',
		chr(196).chr(140) =&gt; 'C', chr(196).chr(141) =&gt; 'c',
		chr(196).chr(142) =&gt; 'D', chr(196).chr(143) =&gt; 'd',
		chr(196).chr(144) =&gt; 'D', chr(196).chr(145) =&gt; 'd',
		chr(196).chr(146) =&gt; 'E', chr(196).chr(147) =&gt; 'e',
		chr(196).chr(148) =&gt; 'E', chr(196).chr(149) =&gt; 'e',
		chr(196).chr(150) =&gt; 'E', chr(196).chr(151) =&gt; 'e',
		chr(196).chr(152) =&gt; 'E', chr(196).chr(153) =&gt; 'e',
		chr(196).chr(154) =&gt; 'E', chr(196).chr(155) =&gt; 'e',
		chr(196).chr(156) =&gt; 'G', chr(196).chr(157) =&gt; 'g',
		chr(196).chr(158) =&gt; 'G', chr(196).chr(159) =&gt; 'g',
		chr(196).chr(160) =&gt; 'G', chr(196).chr(161) =&gt; 'g',
		chr(196).chr(162) =&gt; 'G', chr(196).chr(163) =&gt; 'g',
		chr(196).chr(164) =&gt; 'H', chr(196).chr(165) =&gt; 'h',
		chr(196).chr(166) =&gt; 'H', chr(196).chr(167) =&gt; 'h',
		chr(196).chr(168) =&gt; 'I', chr(196).chr(169) =&gt; 'i',
		chr(196).chr(170) =&gt; 'I', chr(196).chr(171) =&gt; 'i',
		chr(196).chr(172) =&gt; 'I', chr(196).chr(173) =&gt; 'i',
		chr(196).chr(174) =&gt; 'I', chr(196).chr(175) =&gt; 'i',
		chr(196).chr(176) =&gt; 'I', chr(196).chr(177) =&gt; 'i',
		chr(196).chr(178) =&gt; 'IJ',chr(196).chr(179) =&gt; 'ij',
		chr(196).chr(180) =&gt; 'J', chr(196).chr(181) =&gt; 'j',
		chr(196).chr(182) =&gt; 'K', chr(196).chr(183) =&gt; 'k',
		chr(196).chr(184) =&gt; 'k', chr(196).chr(185) =&gt; 'L',
		chr(196).chr(186) =&gt; 'l', chr(196).chr(187) =&gt; 'L',
		chr(196).chr(188) =&gt; 'l', chr(196).chr(189) =&gt; 'L',
		chr(196).chr(190) =&gt; 'l', chr(196).chr(191) =&gt; 'L',
		chr(197).chr(128) =&gt; 'l', chr(197).chr(129) =&gt; 'L',
		chr(197).chr(130) =&gt; 'l', chr(197).chr(131) =&gt; 'N',
		chr(197).chr(132) =&gt; 'n', chr(197).chr(133) =&gt; 'N',
		chr(197).chr(134) =&gt; 'n', chr(197).chr(135) =&gt; 'N',
		chr(197).chr(136) =&gt; 'n', chr(197).chr(137) =&gt; 'N',
		chr(197).chr(138) =&gt; 'n', chr(197).chr(139) =&gt; 'N',
		chr(197).chr(140) =&gt; 'O', chr(197).chr(141) =&gt; 'o',
		chr(197).chr(142) =&gt; 'O', chr(197).chr(143) =&gt; 'o',
		chr(197).chr(144) =&gt; 'O', chr(197).chr(145) =&gt; 'o',
		chr(197).chr(146) =&gt; 'OE',chr(197).chr(147) =&gt; 'oe',
		chr(197).chr(148) =&gt; 'R',chr(197).chr(149) =&gt; 'r',
		chr(197).chr(150) =&gt; 'R',chr(197).chr(151) =&gt; 'r',
		chr(197).chr(152) =&gt; 'R',chr(197).chr(153) =&gt; 'r',
		chr(197).chr(154) =&gt; 'S',chr(197).chr(155) =&gt; 's',
		chr(197).chr(156) =&gt; 'S',chr(197).chr(157) =&gt; 's',
		chr(197).chr(158) =&gt; 'S',chr(197).chr(159) =&gt; 's',
		chr(197).chr(160) =&gt; 'S', chr(197).chr(161) =&gt; 's',
		chr(197).chr(162) =&gt; 'T', chr(197).chr(163) =&gt; 't',
		chr(197).chr(164) =&gt; 'T', chr(197).chr(165) =&gt; 't',
		chr(197).chr(166) =&gt; 'T', chr(197).chr(167) =&gt; 't',
		chr(197).chr(168) =&gt; 'U', chr(197).chr(169) =&gt; 'u',
		chr(197).chr(170) =&gt; 'U', chr(197).chr(171) =&gt; 'u',
		chr(197).chr(172) =&gt; 'U', chr(197).chr(173) =&gt; 'u',
		chr(197).chr(174) =&gt; 'U', chr(197).chr(175) =&gt; 'u',
		chr(197).chr(176) =&gt; 'U', chr(197).chr(177) =&gt; 'u',
		chr(197).chr(178) =&gt; 'U', chr(197).chr(179) =&gt; 'u',
		chr(197).chr(180) =&gt; 'W', chr(197).chr(181) =&gt; 'w',
</codefragment>
  </duplication>
  <duplication lines="16" tokens="135">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="575"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="672"/>
    <codefragment>		chr(226).chr(130).chr(172) =&gt; 'E',
		// GBP (Pound) Sign
		chr(194).chr(163) =&gt; '');

		$string = strtr($string, $chars);
	} else {
		// Assume ISO-8859-1 if not UTF-8
		$chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)
			.chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)
			.chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)
			.chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)
			.chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)
			.chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)
			.chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)
			.chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)
			.chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)
</codefragment>
  </duplication>
  <duplication lines="21" tokens="61">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-formatting.php" line="355"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="960"/>
    <codefragment>	$wp_htmltranswinuni = array(
	'&amp;#128;' =&gt; '&amp;#8364;', // the Euro sign
	'&amp;#129;' =&gt; '',
	'&amp;#130;' =&gt; '&amp;#8218;', // these are Windows CP1252 specific characters
	'&amp;#131;' =&gt; '&amp;#402;',  // they would look weird on non-Windows browsers
	'&amp;#132;' =&gt; '&amp;#8222;',
	'&amp;#133;' =&gt; '&amp;#8230;',
	'&amp;#134;' =&gt; '&amp;#8224;',
	'&amp;#135;' =&gt; '&amp;#8225;',
	'&amp;#136;' =&gt; '&amp;#710;',
	'&amp;#137;' =&gt; '&amp;#8240;',
	'&amp;#138;' =&gt; '&amp;#352;',
	'&amp;#139;' =&gt; '&amp;#8249;',
	'&amp;#140;' =&gt; '&amp;#338;',
	'&amp;#141;' =&gt; '',
	'&amp;#142;' =&gt; '&amp;#382;',
	'&amp;#143;' =&gt; '',
	'&amp;#144;' =&gt; '',
	'&amp;#145;' =&gt; '&amp;#8216;',
	'&amp;#146;' =&gt; '&amp;#8217;',
	'&amp;#147;' =&gt; '&amp;#8220;',
</codefragment>
  </duplication>
  <duplication lines="27" tokens="74">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="747"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="1062"/>
    <codefragment>	while (preg_match("/&lt;(\/?\w*)\s*([^&gt;]*)&gt;/",$text,$regex)) {
		$newtext .= $tagqueue;

		$i = strpos($text,$regex[0]);
		$l = strlen($regex[0]);

		// clear the shifter
		$tagqueue = '';
		// Pop or Push
		if ( isset($regex[1][0]) &amp;&amp; '/' == $regex[1][0] ) { // End Tag
			$tag = strtolower(substr($regex[1],1));
			// if too many closing tags
			if($stacksize &lt;= 0) {
				$tag = '';
				//or close to be safe $tag = '/' . $tag;
			}
			// if stacktop value = tag close value then pop
			else if ($tagstack[$stacksize - 1] == $tag) { // found closing tag
				$tag = '&lt;/' . $tag . '&gt;'; // Close Tag
				// Pop
				array_pop ($tagstack);
				$stacksize--;
			} else { // closing tag not at top, search for it
				for ($j=$stacksize-1;$j&gt;=0;$j--) {
					if ($tagstack[$j] == $tag) {
					// add tag to tagqueue
						for ($k=$stacksize-1;$k&gt;=$j;$k--){
</codefragment>
  </duplication>
  <duplication lines="15" tokens="34">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="1095"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="1550"/>
    <codefragment>	if ( strlen( $email ) &lt; 3 ) {
		return apply_filters( 'is_email', false, $email, 'email_too_short' );
	}

	// Test for an @ character after the first position
	if ( strpos( $email, '@', 1 ) === false ) {
		return apply_filters( 'is_email', false, $email, 'email_no_at' );
	}

	// Split out the local and domain parts
	list( $local, $domain ) = explode( '@', $email, 2 );

	// LOCAL PART
	// Test for invalid characters
	if ( !preg_match( '/^[a-zA-Z0-9!#$%&amp;\'*+\/=?^_`{|}~\.-]+$/', $local ) ) {
</codefragment>
  </duplication>
  <duplication lines="17" tokens="35">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="1172"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="1766"/>
    <codefragment>function sanitize_email( $email ) {
	// Test for the minimum length the email can be
	if ( strlen( $email ) &lt; 3 ) {
		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );
	}

	// Test for an @ character after the first position
	if ( strpos( $email, '@', 1 ) === false ) {
		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );
	}

	// Split out the local and domain parts
	list( $local, $domain ) = explode( '@', $email, 2 );

	// LOCAL PART
	// Test for invalid characters
	$local = preg_replace( '/[^a-zA-Z0-9!#$%&amp;\'*+\/=?^_`{|}~\.-]/', '', $local );
</codefragment>
  </duplication>
  <duplication lines="238" tokens="712">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.formatting.php" line="1260"/>
    <file path="/mnt/share/buddypress/src/wp-includes/formatting.php" line="1951"/>
    <codefragment>	$to_ncr = array(
		'&amp;quot;' =&gt; '&amp;#34;',
		'&amp;amp;' =&gt; '&amp;#38;',
		'&amp;frasl;' =&gt; '&amp;#47;',
		'&amp;lt;' =&gt; '&amp;#60;',
		'&amp;gt;' =&gt; '&amp;#62;',
		'|' =&gt; '&amp;#124;',
		'&amp;nbsp;' =&gt; '&amp;#160;',
		'&amp;iexcl;' =&gt; '&amp;#161;',
		'&amp;cent;' =&gt; '&amp;#162;',
		'&amp;pound;' =&gt; '&amp;#163;',
		'&amp;curren;' =&gt; '&amp;#164;',
		'&amp;yen;' =&gt; '&amp;#165;',
		'&amp;brvbar;' =&gt; '&amp;#166;',
		'&amp;brkbar;' =&gt; '&amp;#166;',
		'&amp;sect;' =&gt; '&amp;#167;',
		'&amp;uml;' =&gt; '&amp;#168;',
		'&amp;die;' =&gt; '&amp;#168;',
		'&amp;copy;' =&gt; '&amp;#169;',
		'&amp;ordf;' =&gt; '&amp;#170;',
		'&amp;laquo;' =&gt; '&amp;#171;',
		'&amp;not;' =&gt; '&amp;#172;',
		'&amp;shy;' =&gt; '&amp;#173;',
		'&amp;reg;' =&gt; '&amp;#174;',
		'&amp;macr;' =&gt; '&amp;#175;',
		'&amp;hibar;' =&gt; '&amp;#175;',
		'&amp;deg;' =&gt; '&amp;#176;',
		'&amp;plusmn;' =&gt; '&amp;#177;',
		'&amp;sup2;' =&gt; '&amp;#178;',
		'&amp;sup3;' =&gt; '&amp;#179;',
		'&amp;acute;' =&gt; '&amp;#180;',
		'&amp;micro;' =&gt; '&amp;#181;',
		'&amp;para;' =&gt; '&amp;#182;',
		'&amp;middot;' =&gt; '&amp;#183;',
		'&amp;cedil;' =&gt; '&amp;#184;',
		'&amp;sup1;' =&gt; '&amp;#185;',
		'&amp;ordm;' =&gt; '&amp;#186;',
		'&amp;raquo;' =&gt; '&amp;#187;',
		'&amp;frac14;' =&gt; '&amp;#188;',
		'&amp;frac12;' =&gt; '&amp;#189;',
		'&amp;frac34;' =&gt; '&amp;#190;',
		'&amp;iquest;' =&gt; '&amp;#191;',
		'&amp;Agrave;' =&gt; '&amp;#192;',
		'&amp;Aacute;' =&gt; '&amp;#193;',
		'&amp;Acirc;' =&gt; '&amp;#194;',
		'&amp;Atilde;' =&gt; '&amp;#195;',
		'&amp;Auml;' =&gt; '&amp;#196;',
		'&amp;Aring;' =&gt; '&amp;#197;',
		'&amp;AElig;' =&gt; '&amp;#198;',
		'&amp;Ccedil;' =&gt; '&amp;#199;',
		'&amp;Egrave;' =&gt; '&amp;#200;',
		'&amp;Eacute;' =&gt; '&amp;#201;',
		'&amp;Ecirc;' =&gt; '&amp;#202;',
		'&amp;Euml;' =&gt; '&amp;#203;',
		'&amp;Igrave;' =&gt; '&amp;#204;',
		'&amp;Iacute;' =&gt; '&amp;#205;',
		'&amp;Icirc;' =&gt; '&amp;#206;',
		'&amp;Iuml;' =&gt; '&amp;#207;',
		'&amp;ETH;' =&gt; '&amp;#208;',
		'&amp;Ntilde;' =&gt; '&amp;#209;',
		'&amp;Ograve;' =&gt; '&amp;#210;',
		'&amp;Oacute;' =&gt; '&amp;#211;',
		'&amp;Ocirc;' =&gt; '&amp;#212;',
		'&amp;Otilde;' =&gt; '&amp;#213;',
		'&amp;Ouml;' =&gt; '&amp;#214;',
		'&amp;times;' =&gt; '&amp;#215;',
		'&amp;Oslash;' =&gt; '&amp;#216;',
		'&amp;Ugrave;' =&gt; '&amp;#217;',
		'&amp;Uacute;' =&gt; '&amp;#218;',
		'&amp;Ucirc;' =&gt; '&amp;#219;',
		'&amp;Uuml;' =&gt; '&amp;#220;',
		'&amp;Yacute;' =&gt; '&amp;#221;',
		'&amp;THORN;' =&gt; '&amp;#222;',
		'&amp;szlig;' =&gt; '&amp;#223;',
		'&amp;agrave;' =&gt; '&amp;#224;',
		'&amp;aacute;' =&gt; '&amp;#225;',
		'&amp;acirc;' =&gt; '&amp;#226;',
		'&amp;atilde;' =&gt; '&amp;#227;',
		'&amp;auml;' =&gt; '&amp;#228;',
		'&amp;aring;' =&gt; '&amp;#229;',
		'&amp;aelig;' =&gt; '&amp;#230;',
		'&amp;ccedil;' =&gt; '&amp;#231;',
		'&amp;egrave;' =&gt; '&amp;#232;',
		'&amp;eacute;' =&gt; '&amp;#233;',
		'&amp;ecirc;' =&gt; '&amp;#234;',
		'&amp;euml;' =&gt; '&amp;#235;',
		'&amp;igrave;' =&gt; '&amp;#236;',
		'&amp;iacute;' =&gt; '&amp;#237;',
		'&amp;icirc;' =&gt; '&amp;#238;',
		'&amp;iuml;' =&gt; '&amp;#239;',
		'&amp;eth;' =&gt; '&amp;#240;',
		'&amp;ntilde;' =&gt; '&amp;#241;',
		'&amp;ograve;' =&gt; '&amp;#242;',
		'&amp;oacute;' =&gt; '&amp;#243;',
		'&amp;ocirc;' =&gt; '&amp;#244;',
		'&amp;otilde;' =&gt; '&amp;#245;',
		'&amp;ouml;' =&gt; '&amp;#246;',
		'&amp;divide;' =&gt; '&amp;#247;',
		'&amp;oslash;' =&gt; '&amp;#248;',
		'&amp;ugrave;' =&gt; '&amp;#249;',
		'&amp;uacute;' =&gt; '&amp;#250;',
		'&amp;ucirc;' =&gt; '&amp;#251;',
		'&amp;uuml;' =&gt; '&amp;#252;',
		'&amp;yacute;' =&gt; '&amp;#253;',
		'&amp;thorn;' =&gt; '&amp;#254;',
		'&amp;yuml;' =&gt; '&amp;#255;',
		'&amp;OElig;' =&gt; '&amp;#338;',
		'&amp;oelig;' =&gt; '&amp;#339;',
		'&amp;Scaron;' =&gt; '&amp;#352;',
		'&amp;scaron;' =&gt; '&amp;#353;',
		'&amp;Yuml;' =&gt; '&amp;#376;',
		'&amp;fnof;' =&gt; '&amp;#402;',
		'&amp;circ;' =&gt; '&amp;#710;',
		'&amp;tilde;' =&gt; '&amp;#732;',
		'&amp;Alpha;' =&gt; '&amp;#913;',
		'&amp;Beta;' =&gt; '&amp;#914;',
		'&amp;Gamma;' =&gt; '&amp;#915;',
		'&amp;Delta;' =&gt; '&amp;#916;',
		'&amp;Epsilon;' =&gt; '&amp;#917;',
		'&amp;Zeta;' =&gt; '&amp;#918;',
		'&amp;Eta;' =&gt; '&amp;#919;',
		'&amp;Theta;' =&gt; '&amp;#920;',
		'&amp;Iota;' =&gt; '&amp;#921;',
		'&amp;Kappa;' =&gt; '&amp;#922;',
		'&amp;Lambda;' =&gt; '&amp;#923;',
		'&amp;Mu;' =&gt; '&amp;#924;',
		'&amp;Nu;' =&gt; '&amp;#925;',
		'&amp;Xi;' =&gt; '&amp;#926;',
		'&amp;Omicron;' =&gt; '&amp;#927;',
		'&amp;Pi;' =&gt; '&amp;#928;',
		'&amp;Rho;' =&gt; '&amp;#929;',
		'&amp;Sigma;' =&gt; '&amp;#931;',
		'&amp;Tau;' =&gt; '&amp;#932;',
		'&amp;Upsilon;' =&gt; '&amp;#933;',
		'&amp;Phi;' =&gt; '&amp;#934;',
		'&amp;Chi;' =&gt; '&amp;#935;',
		'&amp;Psi;' =&gt; '&amp;#936;',
		'&amp;Omega;' =&gt; '&amp;#937;',
		'&amp;alpha;' =&gt; '&amp;#945;',
		'&amp;beta;' =&gt; '&amp;#946;',
		'&amp;gamma;' =&gt; '&amp;#947;',
		'&amp;delta;' =&gt; '&amp;#948;',
		'&amp;epsilon;' =&gt; '&amp;#949;',
		'&amp;zeta;' =&gt; '&amp;#950;',
		'&amp;eta;' =&gt; '&amp;#951;',
		'&amp;theta;' =&gt; '&amp;#952;',
		'&amp;iota;' =&gt; '&amp;#953;',
		'&amp;kappa;' =&gt; '&amp;#954;',
		'&amp;lambda;' =&gt; '&amp;#955;',
		'&amp;mu;' =&gt; '&amp;#956;',
		'&amp;nu;' =&gt; '&amp;#957;',
		'&amp;xi;' =&gt; '&amp;#958;',
		'&amp;omicron;' =&gt; '&amp;#959;',
		'&amp;pi;' =&gt; '&amp;#960;',
		'&amp;rho;' =&gt; '&amp;#961;',
		'&amp;sigmaf;' =&gt; '&amp;#962;',
		'&amp;sigma;' =&gt; '&amp;#963;',
		'&amp;tau;' =&gt; '&amp;#964;',
		'&amp;upsilon;' =&gt; '&amp;#965;',
		'&amp;phi;' =&gt; '&amp;#966;',
		'&amp;chi;' =&gt; '&amp;#967;',
		'&amp;psi;' =&gt; '&amp;#968;',
		'&amp;omega;' =&gt; '&amp;#969;',
		'&amp;thetasym;' =&gt; '&amp;#977;',
		'&amp;upsih;' =&gt; '&amp;#978;',
		'&amp;piv;' =&gt; '&amp;#982;',
		'&amp;ensp;' =&gt; '&amp;#8194;',
		'&amp;emsp;' =&gt; '&amp;#8195;',
		'&amp;thinsp;' =&gt; '&amp;#8201;',
		'&amp;zwnj;' =&gt; '&amp;#8204;',
		'&amp;zwj;' =&gt; '&amp;#8205;',
		'&amp;lrm;' =&gt; '&amp;#8206;',
		'&amp;rlm;' =&gt; '&amp;#8207;',
		'&amp;ndash;' =&gt; '&amp;#8211;',
		'&amp;mdash;' =&gt; '&amp;#8212;',
		'&amp;lsquo;' =&gt; '&amp;#8216;',
		'&amp;rsquo;' =&gt; '&amp;#8217;',
		'&amp;sbquo;' =&gt; '&amp;#8218;',
		'&amp;ldquo;' =&gt; '&amp;#8220;',
		'&amp;rdquo;' =&gt; '&amp;#8221;',
		'&amp;bdquo;' =&gt; '&amp;#8222;',
		'&amp;dagger;' =&gt; '&amp;#8224;',
		'&amp;Dagger;' =&gt; '&amp;#8225;',
		'&amp;bull;' =&gt; '&amp;#8226;',
		'&amp;hellip;' =&gt; '&amp;#8230;',
		'&amp;permil;' =&gt; '&amp;#8240;',
		'&amp;prime;' =&gt; '&amp;#8242;',
		'&amp;Prime;' =&gt; '&amp;#8243;',
		'&amp;lsaquo;' =&gt; '&amp;#8249;',
		'&amp;rsaquo;' =&gt; '&amp;#8250;',
		'&amp;oline;' =&gt; '&amp;#8254;',
		'&amp;frasl;' =&gt; '&amp;#8260;',
		'&amp;euro;' =&gt; '&amp;#8364;',
		'&amp;image;' =&gt; '&amp;#8465;',
		'&amp;weierp;' =&gt; '&amp;#8472;',
		'&amp;real;' =&gt; '&amp;#8476;',
		'&amp;trade;' =&gt; '&amp;#8482;',
		'&amp;alefsym;' =&gt; '&amp;#8501;',
		'&amp;crarr;' =&gt; '&amp;#8629;',
		'&amp;lArr;' =&gt; '&amp;#8656;',
		'&amp;uArr;' =&gt; '&amp;#8657;',
		'&amp;rArr;' =&gt; '&amp;#8658;',
		'&amp;dArr;' =&gt; '&amp;#8659;',
		'&amp;hArr;' =&gt; '&amp;#8660;',
		'&amp;forall;' =&gt; '&amp;#8704;',
		'&amp;part;' =&gt; '&amp;#8706;',
		'&amp;exist;' =&gt; '&amp;#8707;',
		'&amp;empty;' =&gt; '&amp;#8709;',
		'&amp;nabla;' =&gt; '&amp;#8711;',
		'&amp;isin;' =&gt; '&amp;#8712;',
		'&amp;notin;' =&gt; '&amp;#8713;',
		'&amp;ni;' =&gt; '&amp;#8715;',
		'&amp;prod;' =&gt; '&amp;#8719;',
		'&amp;sum;' =&gt; '&amp;#8721;',
		'&amp;minus;' =&gt; '&amp;#8722;',
		'&amp;lowast;' =&gt; '&amp;#8727;',
		'&amp;radic;' =&gt; '&amp;#8730;',
		'&amp;prop;' =&gt; '&amp;#8733;',
		'&amp;infin;' =&gt; '&amp;#8734;',
		'&amp;ang;' =&gt; '&amp;#8736;',
		'&amp;and;' =&gt; '&amp;#8743;',
		'&amp;or;' =&gt; '&amp;#8744;',
		'&amp;cap;' =&gt; '&amp;#8745;',
		'&amp;cup;' =&gt; '&amp;#8746;',
		'&amp;int;' =&gt; '&amp;#8747;',
		'&amp;there4;' =&gt; '&amp;#8756;',
		'&amp;sim;' =&gt; '&amp;#8764;',
		'&amp;cong;' =&gt; '&amp;#8773;',
		'&amp;asymp;' =&gt; '&amp;#8776;',
		'&amp;ne;' =&gt; '&amp;#8800;',
		'&amp;equiv;' =&gt; '&amp;#8801;',
		'&amp;le;' =&gt; '&amp;#8804;',
		'&amp;ge;' =&gt; '&amp;#8805;',
		'&amp;sub;' =&gt; '&amp;#8834;',
		'&amp;sup;' =&gt; '&amp;#8835;',
		'&amp;nsub;' =&gt; '&amp;#8836;',
		'&amp;sube;' =&gt; '&amp;#8838;',
		'&amp;supe;' =&gt; '&amp;#8839;',
</codefragment>
  </duplication>
  <duplication lines="6" tokens="25">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.compat.php" line="21"/>
    <file path="/mnt/share/buddypress/src/wp-includes/functions.php" line="1386"/>
    <codefragment>	function _http_build_query($data, $prefix = null, $sep = null, $key = '', $urlencode = true)
	{
		$ret = array();

		foreach ( (array) $data as $k =&gt; $v ) {
			if ( $urlencode) {
</codefragment>
  </duplication>
  <duplication lines="37" tokens="109">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.core.php" line="216"/>
    <file path="/mnt/share/buddypress/src/wp-includes/functions.php" line="1433"/>
    <codefragment>function add_query_arg() {
	$ret = '';
	if ( is_array( func_get_arg(0) ) ) {
		if ( @func_num_args() &lt; 2 || false === @func_get_arg( 1 ) )
			$uri = $_SERVER['REQUEST_URI'];
		else
			$uri = @func_get_arg( 1 );
	} else {
		if ( @func_num_args() &lt; 3 || false === @func_get_arg( 2 ) )
			$uri = $_SERVER['REQUEST_URI'];
		else
			$uri = @func_get_arg( 2 );
	}

	if ( $frag = strstr( $uri, '#' ) )
		$uri = substr( $uri, 0, -strlen( $frag ) );
	else
		$frag = '';

	if ( preg_match( '|^https?://|i', $uri, $matches ) ) {
		$protocol = $matches[0];
		$uri = substr( $uri, strlen( $protocol ) );
	} else {
		$protocol = '';
	}

	if ( strpos( $uri, '?' ) !== false ) {
		$parts = explode( '?', $uri, 2 );
		if ( 1 == count( $parts ) ) {
			$base = '?';
			$query = $parts[0];
		} else {
			$base = $parts[0] . '?';
			$query = $parts[1];
		}
	} elseif ( !empty( $protocol ) || strpos( $uri, '=' ) === false ) {
		$base = $uri . '?';
</codefragment>
  </duplication>
  <duplication lines="42" tokens="108">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.core.php" line="343"/>
    <file path="/mnt/share/buddypress/src/wp-includes/functions.php" line="1584"/>
    <codefragment>function get_status_header_desc( $code ) {
	global $wp_header_to_desc;

	$code = absint( $code );

	if ( !isset( $wp_header_to_desc ) ) {
		$wp_header_to_desc = array(
			100 =&gt; 'Continue',
			101 =&gt; 'Switching Protocols',
			102 =&gt; 'Processing',

			200 =&gt; 'OK',
			201 =&gt; 'Created',
			202 =&gt; 'Accepted',
			203 =&gt; 'Non-Authoritative Information',
			204 =&gt; 'No Content',
			205 =&gt; 'Reset Content',
			206 =&gt; 'Partial Content',
			207 =&gt; 'Multi-Status',
			226 =&gt; 'IM Used',

			300 =&gt; 'Multiple Choices',
			301 =&gt; 'Moved Permanently',
			302 =&gt; 'Found',
			303 =&gt; 'See Other',
			304 =&gt; 'Not Modified',
			305 =&gt; 'Use Proxy',
			306 =&gt; 'Reserved',
			307 =&gt; 'Temporary Redirect',

			400 =&gt; 'Bad Request',
			401 =&gt; 'Unauthorized',
			402 =&gt; 'Payment Required',
			403 =&gt; 'Forbidden',
			404 =&gt; 'Not Found',
			405 =&gt; 'Method Not Allowed',
			406 =&gt; 'Not Acceptable',
			407 =&gt; 'Proxy Authentication Required',
			408 =&gt; 'Request Timeout',
			409 =&gt; 'Conflict',
			410 =&gt; 'Gone',
			411 =&gt; 'Length Required',
</codefragment>
  </duplication>
  <duplication lines="12" tokens="54">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.core.php" line="864"/>
    <file path="/mnt/share/buddypress/src/wp-includes/functions.php" line="4208"/>
    <codefragment>function _wp_timezone_choice_usort_callback( $a, $b ) {
	// Don't use translated versions of Etc
	if ( 'Etc' === $a['continent'] &amp;&amp; 'Etc' === $b['continent'] ) {
		// Make the order of these more like the old dropdown
		if ( 'GMT+' === substr( $a['city'], 0, 4 ) &amp;&amp; 'GMT+' === substr( $b['city'], 0, 4 ) ) {
			return -1 * ( strnatcasecmp( $a['city'], $b['city'] ) );
		}
		if ( 'UTC' === $a['city'] ) {
			if ( 'GMT+' === substr( $b['city'], 0, 4 ) ) {
				return 1;
			}
			return -1;
</codefragment>
  </duplication>
  <duplication lines="6" tokens="36">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.core.php" line="943"/>
    <file path="/mnt/share/buddypress/src/wp-includes/functions.php" line="4284"/>
    <codefragment>		$zonen[] = array(
			'continent'   =&gt; ( $exists[0] ? $zone[0] : '' ),
			'city'        =&gt; ( $exists[1] ? $zone[1] : '' ),
			'subcity'     =&gt; ( $exists[2] ? $zone[2] : '' ),
			't_continent' =&gt; ( $exists[3] ? translate( str_replace( '_', ' ', $zone[0] ), 'continents-cities' ) : '' ),
			't_city'      =&gt; ( $exists[4] ? translate( str_replace( '_', ' ', $zone[1] ), 'continents-cities' ) : '' ),
</codefragment>
  </duplication>
  <duplication lines="115" tokens="98">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-http.php" line="1882"/>
    <file path="/mnt/share/buddypress/src/wp-includes/http.php" line="22"/>
    <codefragment>function &amp;_wp_http_get_object() {
	static $http;

	if ( is_null($http) )
		$http = new WP_Http();

	return $http;
}

/**
 * Retrieve the raw response from the HTTP request.
 *
 * The array structure is a little complex.
 *
 * &lt;code&gt;
 * $res = array( 'headers' =&gt; array(), 'response' =&gt; array('code' =&gt; int, 'message' =&gt; string) );
 * &lt;/code&gt;
 *
 * All of the headers in $res['headers'] are with the name as the key and the
 * value as the value. So to get the User-Agent, you would do the following.
 *
 * &lt;code&gt;
 * $user_agent = $res['headers']['user-agent'];
 * &lt;/code&gt;
 *
 * The body is the raw response content and can be retrieved from $res['body'].
 *
 * This function is called first to make the request and there are other API
 * functions to abstract out the above convoluted setup.
 *
 * @since 2.7.0
 *
 * @param string $url Site URL to retrieve.
 * @param array $args Optional. Override the defaults.
 * @return WP_Error|array The response or WP_Error on failure.
 */
function wp_remote_request($url, $args = array()) {
	$objFetchSite = _wp_http_get_object();
	return $objFetchSite-&gt;request($url, $args);
}

/**
 * Retrieve the raw response from the HTTP request using the GET method.
 *
 * @see wp_remote_request() For more information on the response array format.
 *
 * @since 2.7.0
 *
 * @param string $url Site URL to retrieve.
 * @param array $args Optional. Override the defaults.
 * @return WP_Error|array The response or WP_Error on failure.
 */
function wp_remote_get($url, $args = array()) {
	$objFetchSite = _wp_http_get_object();
	return $objFetchSite-&gt;get($url, $args);
}

/**
 * Retrieve the raw response from the HTTP request using the POST method.
 *
 * @see wp_remote_request() For more information on the response array format.
 *
 * @since 2.7.0
 *
 * @param string $url Site URL to retrieve.
 * @param array $args Optional. Override the defaults.
 * @return WP_Error|array The response or WP_Error on failure.
 */
function wp_remote_post($url, $args = array()) {
	$objFetchSite = _wp_http_get_object();
	return $objFetchSite-&gt;post($url, $args);
}

/**
 * Retrieve the raw response from the HTTP request using the HEAD method.
 *
 * @see wp_remote_request() For more information on the response array format.
 *
 * @since 2.7.0
 *
 * @param string $url Site URL to retrieve.
 * @param array $args Optional. Override the defaults.
 * @return WP_Error|array The response or WP_Error on failure.
 */
function wp_remote_head($url, $args = array()) {
	$objFetchSite = _wp_http_get_object();
	return $objFetchSite-&gt;head($url, $args);
}

/**
 * Retrieve only the headers from the raw response.
 *
 * @since 2.7.0
 *
 * @param array $response HTTP response.
 * @return array The headers of the response. Empty array if incorrect parameter given.
 */
function wp_remote_retrieve_headers(&amp;$response) {
	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))
		return array();

	return $response['headers'];
}

/**
 * Retrieve a single header by name from the raw response.
 *
 * @since 2.7.0
 *
 * @param array $response
 * @param string $header Header name to retrieve value from.
 * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist.
 */
function wp_remote_retrieve_header(&amp;$response, $header) {
	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))
</codefragment>
  </duplication>
  <duplication lines="418" tokens="1249">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.kses.php" line="53"/>
    <file path="/mnt/share/buddypress/src/wp-includes/kses.php" line="51"/>
    <codefragment>	$allowedposttags = array(
		'address' =&gt; array(),
		'a' =&gt; array(
			'class' =&gt; array (),
			'href' =&gt; array (),
			'id' =&gt; array (),
			'title' =&gt; array (),
			'rel' =&gt; array (),
			'rev' =&gt; array (),
			'name' =&gt; array (),
			'target' =&gt; array()),
		'abbr' =&gt; array(
			'class' =&gt; array (),
			'title' =&gt; array ()),
		'acronym' =&gt; array(
			'title' =&gt; array ()),
		'article' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'aside' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'b' =&gt; array(),
		'big' =&gt; array(),
		'blockquote' =&gt; array(
			'id' =&gt; array (),
			'cite' =&gt; array (),
			'class' =&gt; array(),
			'lang' =&gt; array(),
			'xml:lang' =&gt; array()),
		'br' =&gt; array (
			'class' =&gt; array ()),
		'button' =&gt; array(
			'disabled' =&gt; array (),
			'name' =&gt; array (),
			'type' =&gt; array (),
			'value' =&gt; array ()),
		'caption' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array ()),
		'cite' =&gt; array (
			'class' =&gt; array(),
			'dir' =&gt; array(),
			'lang' =&gt; array(),
			'title' =&gt; array ()),
		'code' =&gt; array (
			'style' =&gt; array()),
		'col' =&gt; array(
			'align' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'span' =&gt; array (),
			'dir' =&gt; array(),
			'style' =&gt; array (),
			'valign' =&gt; array (),
			'width' =&gt; array ()),
		'del' =&gt; array(
			'datetime' =&gt; array ()),
		'dd' =&gt; array(),
		'details' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'open' =&gt; array (),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'div' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array()),
		'dl' =&gt; array(),
		'dt' =&gt; array(),
		'em' =&gt; array(),
		'fieldset' =&gt; array(),
		'figure' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'figcaption' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'font' =&gt; array(
			'color' =&gt; array (),
			'face' =&gt; array (),
			'size' =&gt; array ()),
		'footer' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'form' =&gt; array(
			'action' =&gt; array (),
			'accept' =&gt; array (),
			'accept-charset' =&gt; array (),
			'enctype' =&gt; array (),
			'method' =&gt; array (),
			'name' =&gt; array (),
			'target' =&gt; array ()),
		'h1' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'h2' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'h3' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'h4' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'h5' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'h6' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'id'    =&gt; array (),
			'style' =&gt; array ()),
		'header' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'hgroup' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'hr' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array (),
			'noshade' =&gt; array (),
			'size' =&gt; array (),
			'width' =&gt; array ()),
		'i' =&gt; array(),
		'img' =&gt; array(
			'alt' =&gt; array (),
			'align' =&gt; array (),
			'border' =&gt; array (),
			'class' =&gt; array (),
			'height' =&gt; array (),
			'hspace' =&gt; array (),
			'longdesc' =&gt; array (),
			'vspace' =&gt; array (),
			'src' =&gt; array (),
			'style' =&gt; array (),
			'width' =&gt; array ()),
		'ins' =&gt; array(
			'datetime' =&gt; array (),
			'cite' =&gt; array ()),
		'kbd' =&gt; array(),
		'label' =&gt; array(
			'for' =&gt; array ()),
		'legend' =&gt; array(
			'align' =&gt; array ()),
		'li' =&gt; array (
			'align' =&gt; array (),
			'class' =&gt; array ()),
		'menu' =&gt; array (
			'class' =&gt; array (),
			'style' =&gt; array (),
			'type' =&gt; array ()),
		'nav' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'p' =&gt; array(
			'class' =&gt; array (),
			'align' =&gt; array (),
			'dir' =&gt; array(),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array()),
		'pre' =&gt; array(
			'style' =&gt; array(),
			'width' =&gt; array ()),
		'q' =&gt; array(
			'cite' =&gt; array ()),
		's' =&gt; array(),
		'span' =&gt; array (
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'align' =&gt; array (),
			'lang' =&gt; array (),
			'style' =&gt; array (),
			'title' =&gt; array (),
			'xml:lang' =&gt; array()),
		'section' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'strike' =&gt; array(),
		'strong' =&gt; array(),
		'sub' =&gt; array(),
		'summary' =&gt; array(
			'align' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array (),
			'lang' =&gt; array(),
			'style' =&gt; array (),
			'xml:lang' =&gt; array(),
		),
		'sup' =&gt; array(),
		'table' =&gt; array(
			'align' =&gt; array (),
			'bgcolor' =&gt; array (),
			'border' =&gt; array (),
			'cellpadding' =&gt; array (),
			'cellspacing' =&gt; array (),
			'class' =&gt; array (),
			'dir' =&gt; array(),
			'id' =&gt; array(),
			'rules' =&gt; array (),
			'style' =&gt; array (),
			'summary' =&gt; array (),
			'width' =&gt; array ()),
		'tbody' =&gt; array(
			'align' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'valign' =&gt; array ()),
		'td' =&gt; array(
			'abbr' =&gt; array (),
			'align' =&gt; array (),
			'axis' =&gt; array (),
			'bgcolor' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'class' =&gt; array (),
			'colspan' =&gt; array (),
			'dir' =&gt; array(),
			'headers' =&gt; array (),
			'height' =&gt; array (),
			'nowrap' =&gt; array (),
			'rowspan' =&gt; array (),
			'scope' =&gt; array (),
			'style' =&gt; array (),
			'valign' =&gt; array (),
			'width' =&gt; array ()),
		'textarea' =&gt; array(
			'cols' =&gt; array (),
			'rows' =&gt; array (),
			'disabled' =&gt; array (),
			'name' =&gt; array (),
			'readonly' =&gt; array ()),
		'tfoot' =&gt; array(
			'align' =&gt; array (),
			'char' =&gt; array (),
			'class' =&gt; array (),
			'charoff' =&gt; array (),
			'valign' =&gt; array ()),
		'th' =&gt; array(
			'abbr' =&gt; array (),
			'align' =&gt; array (),
			'axis' =&gt; array (),
			'bgcolor' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'class' =&gt; array (),
			'colspan' =&gt; array (),
			'headers' =&gt; array (),
			'height' =&gt; array (),
			'nowrap' =&gt; array (),
			'rowspan' =&gt; array (),
			'scope' =&gt; array (),
			'valign' =&gt; array (),
			'width' =&gt; array ()),
		'thead' =&gt; array(
			'align' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'class' =&gt; array (),
			'valign' =&gt; array ()),
		'title' =&gt; array(),
		'tr' =&gt; array(
			'align' =&gt; array (),
			'bgcolor' =&gt; array (),
			'char' =&gt; array (),
			'charoff' =&gt; array (),
			'class' =&gt; array (),
			'style' =&gt; array (),
			'valign' =&gt; array ()),
		'tt' =&gt; array(),
		'u' =&gt; array(),
		'ul' =&gt; array (
			'class' =&gt; array (),
			'style' =&gt; array (),
			'type' =&gt; array ()),
		'ol' =&gt; array (
			'class' =&gt; array (),
			'start' =&gt; array (),
			'style' =&gt; array (),
			'type' =&gt; array ()),
		'var' =&gt; array ());

	/**
	 * Kses allowed HTML elements.
	 *
	 * @global array $allowedtags
	 * @since 1.0.0
	 */
	$allowedtags = array(
		'a' =&gt; array(
			'href' =&gt; array (),
			'title' =&gt; array ()),
		'abbr' =&gt; array(
			'title' =&gt; array ()),
		'acronym' =&gt; array(
			'title' =&gt; array ()),
		'b' =&gt; array(),
		'blockquote' =&gt; array(
			'cite' =&gt; array ()),
		//	'br' =&gt; array(),
		'cite' =&gt; array (),
		'code' =&gt; array(),
		'del' =&gt; array(
			'datetime' =&gt; array ()),
		//	'dd' =&gt; array(),
		//	'dl' =&gt; array(),
		//	'dt' =&gt; array(),
		'em' =&gt; array (), 'i' =&gt; array (),
		//	'ins' =&gt; array('datetime' =&gt; array(), 'cite' =&gt; array()),
		//	'li' =&gt; array(),
		//	'ol' =&gt; array(),
		//	'p' =&gt; array(),
		'q' =&gt; array(
			'cite' =&gt; array ()),
		'strike' =&gt; array(),
		'strong' =&gt; array(),
		//	'sub' =&gt; array(),
		//	'sup' =&gt; array(),
		//	'u' =&gt; array(),
		//	'ul' =&gt; array(),
	);

	$allowedentitynames = array(
		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',
		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',
		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',
		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',
		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',
		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',
		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',
		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',
		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',
		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',
		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',
		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',
		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',
		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',
		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',
		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',
		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',
		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',
		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',
		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',
		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',
		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',
		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',
		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',
		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',
		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',
		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',
		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',
		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',
		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',
		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',
</codefragment>
  </duplication>
  <duplication lines="521" tokens="764">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.kses.php" line="676"/>
    <file path="/mnt/share/buddypress/src/wp-includes/kses.php" line="673"/>
    <codefragment>		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];
		if ($current == '')
			continue; # the attribute is not allowed

		if (!is_array($current))
			$attr2 .= ' '.$arreach['whole'];
		# there are no checks

		else {
			# there are some checks
			$ok = true;
			foreach ($current as $currkey =&gt; $currval)
				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {
					$ok = false;
					break;
				}

			if ( strtolower($arreach['name']) == 'style' ) {
				$orig_value = $arreach['value'];

				$value = safecss_filter_attr($orig_value);

				if ( empty($value) )
					continue;

				$arreach['value'] = $value;

				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);
			}

			if ($ok)
				$attr2 .= ' '.$arreach['whole']; # it passed them
		} # if !is_array($current)
	} # foreach

	# Remove any "&lt;" or "&gt;" characters

	$attr2 = preg_replace('/[&lt;&gt;]/', '', $attr2);

	return "&lt;$element$attr2$xhtml_slash&gt;";
}

/**
 * Builds an attribute list from string containing attributes.
 *
 * This function does a lot of work. It parses an attribute list into an array
 * with attribute data, and tries to do the right thing even if it gets weird
 * input. It will add quotes around attribute values that don't have any quotes
 * or apostrophes around them, to make it easier to produce HTML code that will
 * conform to W3C's HTML specification. It will also remove bad URL protocols
 * from attribute values.  It also reduces duplicate attributes by using the
 * attribute defined first (foo='bar' foo='baz' will result in foo='bar').
 *
 * @since 1.0.0
 *
 * @param string $attr Attribute list from HTML element to closing HTML element tag
 * @param array $allowed_protocols Allowed protocols to keep
 * @return array List of attributes after parsing
 */
function wp_kses_hair($attr, $allowed_protocols) {
	$attrarr = array ();
	$mode = 0;
	$attrname = '';
	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');

	# Loop through the whole attribute list

	while (strlen($attr) != 0) {
		$working = 0; # Was the last operation successful?

		switch ($mode) {
			case 0 : # attribute name, href for instance

				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {
					$attrname = $match[1];
					$working = $mode = 1;
					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);
				}

				break;

			case 1 : # equals sign or valueless ("selected")

				if (preg_match('/^\s*=\s*/', $attr)) # equals sign
					{
					$working = 1;
					$mode = 2;
					$attr = preg_replace('/^\s*=\s*/', '', $attr);
					break;
				}

				if (preg_match('/^\s+/', $attr)) # valueless
					{
					$working = 1;
					$mode = 0;
					if(FALSE === array_key_exists($attrname, $attrarr)) {
						$attrarr[$attrname] = array ('name' =&gt; $attrname, 'value' =&gt; '', 'whole' =&gt; $attrname, 'vless' =&gt; 'y');
					}
					$attr = preg_replace('/^\s+/', '', $attr);
				}

				break;

			case 2 : # attribute value, a URL after href= for instance

				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))
					# "value"
					{
					$thisval = $match[1];
					if ( in_array(strtolower($attrname), $uris) )
						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);

					if(FALSE === array_key_exists($attrname, $attrarr)) {
						$attrarr[$attrname] = array ('name' =&gt; $attrname, 'value' =&gt; $thisval, 'whole' =&gt; "$attrname=\"$thisval\"", 'vless' =&gt; 'n');
					}
					$working = 1;
					$mode = 0;
					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);
					break;
				}

				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))
					# 'value'
					{
					$thisval = $match[1];
					if ( in_array(strtolower($attrname), $uris) )
						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);

					if(FALSE === array_key_exists($attrname, $attrarr)) {
						$attrarr[$attrname] = array ('name' =&gt; $attrname, 'value' =&gt; $thisval, 'whole' =&gt; "$attrname='$thisval'", 'vless' =&gt; 'n');
					}
					$working = 1;
					$mode = 0;
					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);
					break;
				}

				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))
					# value
					{
					$thisval = $match[1];
					if ( in_array(strtolower($attrname), $uris) )
						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);

					if(FALSE === array_key_exists($attrname, $attrarr)) {
						$attrarr[$attrname] = array ('name' =&gt; $attrname, 'value' =&gt; $thisval, 'whole' =&gt; "$attrname=\"$thisval\"", 'vless' =&gt; 'n');
					}
					# We add quotes to conform to W3C's HTML spec.
					$working = 1;
					$mode = 0;
					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);
				}

				break;
		} # switch

		if ($working == 0) # not well formed, remove and try again
		{
			$attr = wp_kses_html_error($attr);
			$mode = 0;
		}
	} # while

	if ($mode == 1 &amp;&amp; FALSE === array_key_exists($attrname, $attrarr))
		# special case, for when the attribute list ends with a valueless
		# attribute like "selected"
		$attrarr[$attrname] = array ('name' =&gt; $attrname, 'value' =&gt; '', 'whole' =&gt; $attrname, 'vless' =&gt; 'y');

	return $attrarr;
}

/**
 * Performs different checks for attribute values.
 *
 * The currently implemented checks are "maxlen", "minlen", "maxval", "minval"
 * and "valueless" with even more checks to come soon.
 *
 * @since 1.0.0
 *
 * @param string $value Attribute value
 * @param string $vless Whether the value is valueless. Use 'y' or 'n'
 * @param string $checkname What $checkvalue is checking for.
 * @param mixed $checkvalue What constraint the value should pass
 * @return bool Whether check passes
 */
function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {
	$ok = true;

	switch (strtolower($checkname)) {
		case 'maxlen' :
			# The maxlen check makes sure that the attribute value has a length not
			# greater than the given value. This can be used to avoid Buffer Overflows
			# in WWW clients and various Internet servers.

			if (strlen($value) &gt; $checkvalue)
				$ok = false;
			break;

		case 'minlen' :
			# The minlen check makes sure that the attribute value has a length not
			# smaller than the given value.

			if (strlen($value) &lt; $checkvalue)
				$ok = false;
			break;

		case 'maxval' :
			# The maxval check does two things: it checks that the attribute value is
			# an integer from 0 and up, without an excessive amount of zeroes or
			# whitespace (to avoid Buffer Overflows). It also checks that the attribute
			# value is not greater than the given value.
			# This check can be used to avoid Denial of Service attacks.

			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))
				$ok = false;
			if ($value &gt; $checkvalue)
				$ok = false;
			break;

		case 'minval' :
			# The minval check checks that the attribute value is a positive integer,
			# and that it is not smaller than the given value.

			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))
				$ok = false;
			if ($value &lt; $checkvalue)
				$ok = false;
			break;

		case 'valueless' :
			# The valueless check checks if the attribute has a value
			# (like &lt;a href="blah"&gt;) or not (&lt;option selected&gt;). If the given value
			# is a "y" or a "Y", the attribute must not have a value.
			# If the given value is an "n" or an "N", the attribute must have one.

			if (strtolower($checkvalue) != $vless)
				$ok = false;
			break;
	} # switch

	return $ok;
}

/**
 * Sanitize string from bad protocols.
 *
 * This function removes all non-allowed protocols from the beginning of
 * $string. It ignores whitespace and the case of the letters, and it does
 * understand HTML entities. It does its work in a while loop, so it won't be
 * fooled by a string like "javascript:javascript:alert(57)".
 *
 * @since 1.0.0
 *
 * @param string $string Content to filter bad protocols from
 * @param array $allowed_protocols Allowed protocols to keep
 * @return string Filtered content
 */
function wp_kses_bad_protocol($string, $allowed_protocols) {
	$string = wp_kses_no_null($string);
	$string2 = $string.'a';

	while ($string != $string2) {
		$string2 = $string;
		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);
	} # while

	return $string;
}

/**
 * Removes any NULL characters in $string.
 *
 * @since 1.0.0
 *
 * @param string $string
 * @return string
 */
function wp_kses_no_null($string) {
	$string = preg_replace('/\0+/', '', $string);
	$string = preg_replace('/(\\\\0)+/', '', $string);

	return $string;
}

/**
 * Strips slashes from in front of quotes.
 *
 * This function changes the character sequence  \"  to just  ". It leaves all
 * other slashes alone. It's really weird, but the quoting from
 * preg_replace(//e) seems to require this.
 *
 * @since 1.0.0
 *
 * @param string $string String to strip slashes
 * @return string Fixed strings with quoted slashes
 */
function wp_kses_stripslashes($string) {
	return preg_replace('%\\\\"%', '"', $string);
}

/**
 * Goes through an array and changes the keys to all lower case.
 *
 * @since 1.0.0
 *
 * @param array $inarray Unfiltered array
 * @return array Fixed array with all lowercase keys
 */
function wp_kses_array_lc($inarray) {
	$outarray = array ();

	foreach ( (array) $inarray as $inkey =&gt; $inval) {
		$outkey = strtolower($inkey);
		$outarray[$outkey] = array ();

		foreach ( (array) $inval as $inkey2 =&gt; $inval2) {
			$outkey2 = strtolower($inkey2);
			$outarray[$outkey][$outkey2] = $inval2;
		} # foreach $inval
	} # foreach $inarray

	return $outarray;
}

/**
 * Removes the HTML JavaScript entities found in early versions of Netscape 4.
 *
 * @since 1.0.0
 *
 * @param string $string
 * @return string
 */
function wp_kses_js_entities($string) {
	return preg_replace('%&amp;\s*\{[^}]*(\}\s*;?|$)%', '', $string);
}

/**
 * Handles parsing errors in wp_kses_hair().
 *
 * The general plan is to remove everything to and including some whitespace,
 * but it deals with quotes and apostrophes as well.
 *
 * @since 1.0.0
 *
 * @param string $string
 * @return string
 */
function wp_kses_html_error($string) {
	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);
}

/**
 * Sanitizes content from bad protocols and other characters.
 *
 * This function searches for URL protocols at the beginning of $string, while
 * handling whitespace and HTML entities.
 *
 * @since 1.0.0
 *
 * @param string $string Content to check for bad protocols
 * @param string $allowed_protocols Allowed protocols
 * @return string Sanitized content
 */
function wp_kses_bad_protocol_once($string, $allowed_protocols) {
	$string2 = preg_split( '/:|&amp;#0*58;|&amp;#x0*3a;/i', $string, 2 );
	if ( isset($string2[1]) &amp;&amp; ! preg_match('%/\?%', $string2[0]) )
		$string = wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols ) . trim( $string2[1] );

	return $string;
}

/**
 * Callback for wp_kses_bad_protocol_once() regular expression.
 *
 * This function processes URL protocols, checks to see if they're in the
 * white-list or not, and returns different data depending on the answer.
 *
 * @access private
 * @since 1.0.0
 *
 * @param string $string URI scheme to check against the whitelist
 * @param string $allowed_protocols Allowed protocols
 * @return string Sanitized content
 */
function wp_kses_bad_protocol_once2( $string, $allowed_protocols ) {
	$string2 = wp_kses_decode_entities($string);
	$string2 = preg_replace('/\s/', '', $string2);
	$string2 = wp_kses_no_null($string2);
	$string2 = strtolower($string2);

	$allowed = false;
	foreach ( (array) $allowed_protocols as $one_protocol )
		if ( strtolower($one_protocol) == $string2 ) {
			$allowed = true;
			break;
		}

	if ($allowed)
		return "$string2:";
	else
		return '';
}

/**
 * Converts and fixes HTML entities.
 *
 * This function normalizes HTML entities. It will convert "AT&amp;T" to the correct
 * "AT&amp;amp;T", "&amp;#00058;" to "&amp;#58;", "&amp;#XYZZY;" to "&amp;amp;#XYZZY;" and so on.
 *
 * @since 1.0.0
 *
 * @param string $string Content to normalize entities
 * @return string Content with normalized entities
 */
function wp_kses_normalize_entities($string) {
	# Disarm all entities by converting &amp; to &amp;amp;

	$string = str_replace('&amp;', '&amp;amp;', $string);

	# Change back the allowed entities in our entity whitelist

	$string = preg_replace_callback('/&amp;amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);
	$string = preg_replace_callback('/&amp;amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);
	$string = preg_replace_callback('/&amp;amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);

	return $string;
}

/**
 * Callback for wp_kses_normalize_entities() regular expression.
 *
 * This function only accepts valid named entity references, which are finite,
 * case-sensitive, and highly scrutinized by HTML and XML validators.
 *
 * @since 3.0.0
 *
 * @param array $matches preg_replace_callback() matches array
 * @return string Correctly encoded entity
 */
function wp_kses_named_entities($matches) {
	global $allowedentitynames;

	if ( empty($matches[1]) )
		return '';

	$i = $matches[1];
	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;amp;$i;" : "&amp;$i;" );
}

/**
 * Callback for wp_kses_normalize_entities() regular expression.
 *
 * This function helps wp_kses_normalize_entities() to only accept 16 bit values
 * and nothing more for &amp;#number; entities.
 *
 * @access private
 * @since 1.0.0
 *
 * @param array $matches preg_replace_callback() matches array
 * @return string Correctly encoded entity
 */
function wp_kses_normalize_entities2($matches) {
	if ( empty($matches[1]) )
		return '';

	$i = $matches[1];
	if (valid_unicode($i)) {
		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);
		$i = "&amp;#$i;";
	} else {
		$i = "&amp;amp;#$i;";
	}

	return $i;
}

/**
 * Callback for wp_kses_normalize_entities() for regular expression.
 *
 * This function helps wp_kses_normalize_entities() to only accept valid Unicode
 * numeric entities in hex form.
 *
 * @access private
 *
 * @param array $matches preg_replace_callback() matches array
 * @return string Correctly encoded entity
 */
function wp_kses_normalize_entities3($matches) {
	if ( empty($matches[1]) )
		return '';

	$hexchars = $matches[1];
	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;amp;#x$hexchars;" : '&amp;#x'.ltrim($hexchars,'0').';' );
}

/**
 * Helper function to determine if a Unicode value is valid.
 *
 * @param int $i Unicode value
 * @return bool true if the value was a valid Unicode number
 */
function valid_unicode($i) {
	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||
			($i &gt;= 0x20 &amp;&amp; $i &lt;= 0xd7ff) ||
			($i &gt;= 0xe000 &amp;&amp; $i &lt;= 0xfffd) ||
			($i &gt;= 0x10000 &amp;&amp; $i &lt;= 0x10ffff) );
}

/**
 * Convert all entities to their character counterparts.
 *
 * This function decodes numeric HTML entities (&amp;#65; and &amp;#x41;). It doesn't do
 * anything with other entities like &amp;auml;, but we don't need them in the URL
 * protocol whitelisting system anyway.
 *
 * @since 1.0.0
 *
 * @param string $string Content to change entities
 * @return string Content after decoded entities
 */
function wp_kses_decode_entities($string) {
</codefragment>
  </duplication>
  <duplication lines="20" tokens="81">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.kses.php" line="1306"/>
    <file path="/mnt/share/buddypress/src/wp-includes/kses.php" line="1369"/>
    <codefragment>function safecss_filter_attr( $css, $deprecated = '' ) {
	if ( !empty( $deprecated ) )
		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented

	$css = wp_kses_no_null($css);
	$css = str_replace(array("\n","\r","\t"), '', $css);

	if ( preg_match( '%[\\(&amp;=}]|/\*%', $css ) ) // remove any inline css containing \ ( &amp; } = or comments
		return '';

	$css_array = explode( ';', trim( $css ) );
	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',
	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',
	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',
	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',
	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',
	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',
	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',
	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',
	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',
</codefragment>
  </duplication>
  <duplication lines="70" tokens="292">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/class.bb-locale.php" line="102"/>
    <file path="/mnt/share/buddypress/src/wp-includes/locale.php" line="94"/>
    <codefragment>	var $locale_vars = array('text_direction');

	/**
	 * Sets up the translated strings and object properties.
	 *
	 * The method creates the translatable strings for various
	 * calendar elements. Which allows for specifying locale
	 * specific calendar names and text direction.
	 *
	 * @access private
	 */
	function init() {
		// The Weekdays
		$this-&gt;weekday[0] = __('Sunday');
		$this-&gt;weekday[1] = __('Monday');
		$this-&gt;weekday[2] = __('Tuesday');
		$this-&gt;weekday[3] = __('Wednesday');
		$this-&gt;weekday[4] = __('Thursday');
		$this-&gt;weekday[5] = __('Friday');
		$this-&gt;weekday[6] = __('Saturday');

		// The first letter of each day.  The _%day%_initial suffix is a hack to make
		// sure the day initials are unique.
		$this-&gt;weekday_initial[__('Sunday')]    = __('S_Sunday_initial');
		$this-&gt;weekday_initial[__('Monday')]    = __('M_Monday_initial');
		$this-&gt;weekday_initial[__('Tuesday')]   = __('T_Tuesday_initial');
		$this-&gt;weekday_initial[__('Wednesday')] = __('W_Wednesday_initial');
		$this-&gt;weekday_initial[__('Thursday')]  = __('T_Thursday_initial');
		$this-&gt;weekday_initial[__('Friday')]    = __('F_Friday_initial');
		$this-&gt;weekday_initial[__('Saturday')]  = __('S_Saturday_initial');

		foreach ($this-&gt;weekday_initial as $weekday_ =&gt; $weekday_initial_) {
			$this-&gt;weekday_initial[$weekday_] = preg_replace('/_.+_initial$/', '', $weekday_initial_);
		}

		// Abbreviations for each day.
		$this-&gt;weekday_abbrev[__('Sunday')]    = __('Sun');
		$this-&gt;weekday_abbrev[__('Monday')]    = __('Mon');
		$this-&gt;weekday_abbrev[__('Tuesday')]   = __('Tue');
		$this-&gt;weekday_abbrev[__('Wednesday')] = __('Wed');
		$this-&gt;weekday_abbrev[__('Thursday')]  = __('Thu');
		$this-&gt;weekday_abbrev[__('Friday')]    = __('Fri');
		$this-&gt;weekday_abbrev[__('Saturday')]  = __('Sat');

		// The Months
		$this-&gt;month['01'] = __('January');
		$this-&gt;month['02'] = __('February');
		$this-&gt;month['03'] = __('March');
		$this-&gt;month['04'] = __('April');
		$this-&gt;month['05'] = __('May');
		$this-&gt;month['06'] = __('June');
		$this-&gt;month['07'] = __('July');
		$this-&gt;month['08'] = __('August');
		$this-&gt;month['09'] = __('September');
		$this-&gt;month['10'] = __('October');
		$this-&gt;month['11'] = __('November');
		$this-&gt;month['12'] = __('December');

		// Abbreviations for each month. Uses the same hack as above to get around the
		// 'May' duplication.
		$this-&gt;month_abbrev[__('January')] = __('Jan_January_abbreviation');
		$this-&gt;month_abbrev[__('February')] = __('Feb_February_abbreviation');
		$this-&gt;month_abbrev[__('March')] = __('Mar_March_abbreviation');
		$this-&gt;month_abbrev[__('April')] = __('Apr_April_abbreviation');
		$this-&gt;month_abbrev[__('May')] = __('May_May_abbreviation');
		$this-&gt;month_abbrev[__('June')] = __('Jun_June_abbreviation');
		$this-&gt;month_abbrev[__('July')] = __('Jul_July_abbreviation');
		$this-&gt;month_abbrev[__('August')] = __('Aug_August_abbreviation');
		$this-&gt;month_abbrev[__('September')] = __('Sep_September_abbreviation');
		$this-&gt;month_abbrev[__('October')] = __('Oct_October_abbreviation');
</codefragment>
  </duplication>
  <duplication lines="69" tokens="111">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.plugin-api.php" line="212"/>
    <file path="/mnt/share/buddypress/src/wp-includes/plugin.php" line="217"/>
    <codefragment>	if ( !isset( $merged_filters[ $tag ] ) ) {
		ksort($wp_filter[$tag]);
		$merged_filters[ $tag ] = true;
	}

	reset( $wp_filter[ $tag ] );

	do {
		foreach( (array) current($wp_filter[$tag]) as $the_ )
			if ( !is_null($the_['function']) )
				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));

	} while ( next($wp_filter[$tag]) !== false );

	array_pop( $wp_current_filter );

	return $args[0];
}

/**
 * Removes a function from a specified filter hook.
 *
 * This function removes a function attached to a specified filter hook. This
 * method can be used to remove default functions attached to a specific filter
 * hook and possibly replace them with a substitute.
 *
 * To remove a hook, the $function_to_remove and $priority arguments must match
 * when the hook was added. This goes for both filters and actions. No warning
 * will be given on removal failure.
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 1.2
 *
 * @param string $tag The filter hook to which the function to be removed is hooked.
 * @param callback $function_to_remove The name of the function which should be removed.
 * @param int $priority optional. The priority of the function (default: 10).
 * @param int $accepted_args optional. The number of arguments the function accpets (default: 1).
 * @return boolean Whether the function existed before it was removed.
 */
function remove_filter($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {
	$function_to_remove = _wp_filter_build_unique_id($tag, $function_to_remove, $priority);

	$r = isset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);

	if ( true === $r) {
		unset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);
		if ( empty($GLOBALS['wp_filter'][$tag][$priority]) )
			unset($GLOBALS['wp_filter'][$tag][$priority]);
		unset($GLOBALS['merged_filters'][$tag]);
	}

	return $r;
}

/**
 * Remove all of the hooks from a filter.
 *
 * @since 2.7
 *
 * @param string $tag The filter to remove hooks from.
 * @param int $priority The priority number to remove.
 * @return bool True when finished.
 */
function remove_all_filters($tag, $priority = false) {
	global $wp_filter, $merged_filters;

	if( isset($wp_filter[$tag]) ) {
		if( false !== $priority &amp;&amp; isset($wp_filter[$tag][$priority]) )
</codefragment>
  </duplication>
  <duplication lines="18" tokens="50">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.plugin-api.php" line="378"/>
    <file path="/mnt/share/buddypress/src/wp-includes/plugin.php" line="386"/>
    <codefragment>	$args = array();
	if ( is_array($arg) &amp;&amp; 1 == count($arg) &amp;&amp; isset($arg[0]) &amp;&amp; is_object($arg[0]) ) // array(&amp;$this)
		$args[] =&amp; $arg[0];
	else
		$args[] = $arg;
	for ( $a = 2; $a &lt; func_num_args(); $a++ )
		$args[] = func_get_arg($a);

	// Sort
	if ( !isset( $merged_filters[ $tag ] ) ) {
		ksort($wp_filter[$tag]);
		$merged_filters[ $tag ] = true;
	}

	reset( $wp_filter[ $tag ] );

	do {
		foreach ( (array) current($wp_filter[$tag]) as $the_ )
</codefragment>
  </duplication>
  <duplication lines="92" tokens="99">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.plugin-api.php" line="465"/>
    <file path="/mnt/share/buddypress/src/wp-includes/plugin.php" line="476"/>
    <codefragment>	if ( !isset( $merged_filters[ $tag ] ) ) {
		ksort($wp_filter[$tag]);
		$merged_filters[ $tag ] = true;
	}

	reset( $wp_filter[ $tag ] );

	do {
		foreach( (array) current($wp_filter[$tag]) as $the_ )
			if ( !is_null($the_['function']) )
				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));

	} while ( next($wp_filter[$tag]) !== false );

	array_pop($wp_current_filter);
}

/**
 * Check if any action has been registered for a hook.
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 2.5
 * @see has_filter() has_action() is an alias of has_filter().
 *
 * @param string $tag The name of the action hook.
 * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached.
 * @return int|boolean Optionally returns the priority on that hook for the specified function.
 */
function has_action($tag, $function_to_check = false) {
	return has_filter($tag, $function_to_check);
}

/**
 * Removes a function from a specified action hook.
 *
 * This function removes a function attached to a specified action hook. This
 * method can be used to remove default functions attached to a specific filter
 * hook and possibly replace them with a substitute.
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 1.2
 *
 * @param string $tag The action hook to which the function to be removed is hooked.
 * @param callback $function_to_remove The name of the function which should be removed.
 * @param int $priority optional The priority of the function (default: 10).
 * @param int $accepted_args optional. The number of arguments the function accpets (default: 1).
 * @return boolean Whether the function is removed.
 */
function remove_action($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {
	return remove_filter($tag, $function_to_remove, $priority, $accepted_args);
}

/**
 * Remove all of the hooks from an action.
 *
 * @since 2.7
 *
 * @param string $tag The action to remove hooks from.
 * @param int $priority The priority number to remove them from.
 * @return bool True when finished.
 */
function remove_all_actions($tag, $priority = false) {
	return remove_all_filters($tag, $priority);
}

//
// Functions for handling plugins.
//

/**
 * Gets the basename of a plugin.
 *
 * This method extracts the name of a plugin from its filename.
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 1.5
 *
 * @access private
 *
 * @param string $file The filename of plugin.
 * @return string The name of a plugin.
 * @uses WP_PLUGIN_DIR
 */
function plugin_basename($file) {
	$file = str_replace('\\','/',$file); // sanitize for Win32 installs
	$file = preg_replace('|/+|','/', $file); // remove any duplicate slash
	$plugin_dir = str_replace('\\','/',WP_PLUGIN_DIR); // sanitize for Win32 installs
	$plugin_dir = preg_replace('|/+|','/', $plugin_dir); // remove any duplicate slash
	$mu_plugin_dir = str_replace('\\','/',WPMU_PLUGIN_DIR); // sanitize for Win32 installs
</codefragment>
  </duplication>
  <duplication lines="80" tokens="61">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.plugin-api.php" line="669"/>
    <file path="/mnt/share/buddypress/src/wp-includes/plugin.php" line="685"/>
    <codefragment>	backpress_update_option('uninstall_plugins', $uninstallable_plugins);
}

/**
 * Calls the 'all' hook, which will process the functions hooked into it.
 *
 * The 'all' hook passes all of the arguments or parameters that were used for
 * the hook, which this function was called for.
 *
 * This function is used internally for apply_filters(), do_action(), and
 * do_action_ref_array() and is not meant to be used from outside those
 * functions. This function does not check for the existence of the all hook, so
 * it will fail unless the all hook exists prior to this function call.
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 2.5
 * @access private
 *
 * @uses $wp_filter Used to process all of the functions in the 'all' hook
 *
 * @param array $args The collected parameters from the hook that was called.
 * @param string $hook Optional. The hook name that was used to call the 'all' hook.
 */
function _wp_call_all_hook($args) {
	global $wp_filter;

	reset( $wp_filter['all'] );
	do {
		foreach( (array) current($wp_filter['all']) as $the_ )
			if ( !is_null($the_['function']) )
				call_user_func_array($the_['function'], $args);

	} while ( next($wp_filter['all']) !== false );
}

/**
 * Build Unique ID for storage and retrieval.
 *
 * The old way to serialize the callback caused issues and this function is the
 * solution. It works by checking for objects and creating an a new property in
 * the class to keep track of the object and new objects of the same class that
 * need to be added.
 *
 * It also allows for the removal of actions and filters for objects after they
 * change class properties. It is possible to include the property $wp_filter_id
 * in your class and set it to "null" or a number to bypass the workaround.
 * However this will prevent you from adding new classes and any new classes
 * will overwrite the previous hook by the same class.
 *
 * Functions and static method callbacks are just returned as strings and
 * shouldn't have any speed penalty.
 *
 * @package WordPress
 * @subpackage Plugin
 * @access private
 * @since 2.2.3
 * @link http://trac.wordpress.org/ticket/3875
 *
 * @global array $wp_filter Storage for all of the filters and actions
 * @param string $tag Used in counting how many hooks were applied
 * @param callback $function Used for creating unique id
 * @param int|bool $priority Used in counting how many hooks were applied.  If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise.
 * @param string $type filter or action
 * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a uniqe id.
 */
function _wp_filter_build_unique_id($tag, $function, $priority) {
	global $wp_filter;
	static $filter_id_count = 0;

	if ( is_string($function) )
		return $function;

	if ( is_object($function) ) {
		// Closures are currently implemented as objects
		$function = array( $function, '' );
	} else {
		$function = (array) $function;
	}

</codefragment>
  </duplication>
  <duplication lines="22" tokens="71">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/mo.php" line="33"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/mo.php" line="47"/>
    <codefragment>		$entries = array_filter($this-&gt;entries, create_function('$e', 'return !empty($e-&gt;translations);'));
		ksort($entries);
		$magic = 0x950412de;
		$revision = 0;
		$total = count($entries) + 1; // all the headers are one entry
		$originals_lenghts_addr = 28;
		$translations_lenghts_addr = $originals_lenghts_addr + 8 * $total;
		$size_of_hash = 0;
		$hash_addr = $translations_lenghts_addr + 8 * $total;
		$current_addr = $hash_addr;
		fwrite($fh, pack('V*', $magic, $revision, $total, $originals_lenghts_addr,
			$translations_lenghts_addr, $size_of_hash, $hash_addr));
		fseek($fh, $originals_lenghts_addr);
		
		// headers' msgid is an empty string
		fwrite($fh, pack('VV', 0, $current_addr));
		$current_addr++;
		$originals_table = chr(0);

		foreach($entries as $entry) {
			$originals_table .= $this-&gt;export_original($entry) . chr(0);
			$length = strlen($this-&gt;export_original($entry));
</codefragment>
  </duplication>
  <duplication lines="9" tokens="3">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/po.php" line="33"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/po.php" line="39"/>
    <codefragment>		return rtrim("msgid \"\"\nmsgstr $poified");
	}

	/**
	 * Exports all entries to PO format
	 *
	 * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end
	 */
	function export_entries() {
</codefragment>
  </duplication>
  <duplication lines="214" tokens="640">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/po.php" line="85"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/po.php" line="100"/>
    <codefragment>	function poify($string) {
		$quote = '"';
		$slash = '\\';
		$newline = "\n";

		$replaces = array(
			"$slash" 	=&gt; "$slash$slash",
			"$quote"	=&gt; "$slash$quote",
			"\t" 		=&gt; '\t',
		);

		$string = str_replace(array_keys($replaces), array_values($replaces), $string);

		$po = $quote.implode("${slash}n$quote$newline$quote", explode($newline, $string)).$quote;
		// add empty string on first line for readbility
		if (false !== strpos($string, $newline) &amp;&amp;
				(substr_count($string, $newline) &gt; 1 || !($newline === substr($string, -strlen($newline))))) {
			$po = "$quote$quote$newline$po";
		}
		// remove empty strings
		$po = str_replace("$newline$quote$quote", '', $po);
		return $po;
	}
	
	/**
	 * Gives back the original string from a PO-formatted string
	 * 
	 * @static
	 * @param string $string PO-formatted string
	 * @return string enascaped string
	 */
	function unpoify($string) {
		$escapes = array('t' =&gt; "\t", 'n' =&gt; "\n", '\\' =&gt; '\\');
		$lines = array_map('trim', explode("\n", $string));
		$lines = array_map(array('PO', 'trim_quotes'), $lines);
		$unpoified = '';
		$previous_is_backslash = false;
		foreach($lines as $line) {
			preg_match_all('/./u', $line, $chars);
			$chars = $chars[0];
			foreach($chars as $char) {
				if (!$previous_is_backslash) {
					if ('\\' == $char)
						$previous_is_backslash = true;
					else
						$unpoified .= $char;
				} else {
					$previous_is_backslash = false;
					$unpoified .= isset($escapes[$char])? $escapes[$char] : $char;
				}
			}
		}
		return $unpoified;
	}

	/**
	 * Inserts $with in the beginning of every new line of $string and 
	 * returns the modified string
	 *
	 * @static
	 * @param string $string prepend lines in this string
	 * @param string $with prepend lines with this string
	 */
	function prepend_each_line($string, $with) {
		$php_with = var_export($with, true);
		$lines = explode("\n", $string);
		// do not prepend the string on the last empty line, artefact by explode
		if ("\n" == substr($string, -1)) unset($lines[count($lines) - 1]);
		$res = implode("\n", array_map(create_function('$x', "return $php_with.\$x;"), $lines));
		// give back the empty line, we ignored above
		if ("\n" == substr($string, -1)) $res .= "\n";
		return $res;
	}

	/**
	 * Prepare a text as a comment -- wraps the lines and prepends #
	 * and a special character to each line
	 *
	 * @access private
	 * @param string $text the comment text
	 * @param string $char character to denote a special PO comment,
	 * 	like :, default is a space
	 */
	function comment_block($text, $char=' ') {
		$text = wordwrap($text, PO_MAX_LINE_LEN - 3);
		return PO::prepend_each_line($text, "#$char ");
	}

	/**
	 * Builds a string from the entry for inclusion in PO file
	 *
	 * @static
	 * @param object &amp;$entry the entry to convert to po string
	 * @return string|bool PO-style formatted string for the entry or
	 * 	false if the entry is empty
	 */
	function export_entry(&amp;$entry) {
		if (is_null($entry-&gt;singular)) return false;
		$po = array();
		if (!empty($entry-&gt;translator_comments)) $po[] = PO::comment_block($entry-&gt;translator_comments);
		if (!empty($entry-&gt;extracted_comments)) $po[] = PO::comment_block($entry-&gt;extracted_comments, '.');
		if (!empty($entry-&gt;references)) $po[] = PO::comment_block(implode(' ', $entry-&gt;references), ':');
		if (!empty($entry-&gt;flags)) $po[] = PO::comment_block(implode(", ", $entry-&gt;flags), ',');
		if (!is_null($entry-&gt;context)) $po[] = 'msgctxt '.PO::poify($entry-&gt;context);
		$po[] = 'msgid '.PO::poify($entry-&gt;singular);
		if (!$entry-&gt;is_plural) {
			$translation = empty($entry-&gt;translations)? '' : $entry-&gt;translations[0];
			$po[] = 'msgstr '.PO::poify($translation);
		} else {
			$po[] = 'msgid_plural '.PO::poify($entry-&gt;plural);
			$translations = empty($entry-&gt;translations)? array('', '') : $entry-&gt;translations;
			foreach($translations as $i =&gt; $translation) {
				$po[] = "msgstr[$i] ".PO::poify($translation);
			}
		}
		return implode("\n", $po);
	}

	function import_from_file($filename) {
		$f = fopen($filename, 'r');
		if (!$f) return false;
		$lineno = 0;
		while (true) {
			$res = $this-&gt;read_entry($f, $lineno);
			if (!$res) break;
			if ($res['entry']-&gt;singular == '') {
				$this-&gt;set_headers($this-&gt;make_headers($res['entry']-&gt;translations[0]));
			} else {
				$this-&gt;add_entry($res['entry']);
			}
		}
		PO::read_line($f, 'clear');
		return $res !== false;
	}
	
	function read_entry($f, $lineno = 0) {
		$entry = new Translation_Entry();
		// where were we in the last step
		// can be: comment, msgctxt, msgid, msgid_plural, msgstr, msgstr_plural
		$context = '';
		$msgstr_index = 0;
		$is_final = create_function('$context', 'return $context == "msgstr" || $context == "msgstr_plural";');
		while (true) {
			$lineno++;
			$line = PO::read_line($f);
			if (!$line)  {
				if (feof($f)) {
					if ($is_final($context))
						break;
					elseif (!$context) // we haven't read a line and eof came
						return null;
					else
						return false;
				} else {
					return false;
				}
			}
			if ($line == "\n") continue;
			$line = trim($line);
			if (preg_match('/^#/', $line, $m)) {
				// the comment is the start of a new entry
				if ($is_final($context)) {
					PO::read_line($f, 'put-back');
					$lineno--;
					break;
				}
				// comments have to be at the beginning
				if ($context &amp;&amp; $context != 'comment') {
					return false;
				}
				// add comment
				$this-&gt;add_comment_to_entry($entry, $line);;
			} elseif (preg_match('/^msgctxt\s+(".*")/', $line, $m)) {
				if ($is_final($context)) {
					PO::read_line($f, 'put-back');
					$lineno--;
					break;
				}
				if ($context &amp;&amp; $context != 'comment') {
					return false;
				}
				$context = 'msgctxt';
				$entry-&gt;context .= PO::unpoify($m[1]);
			} elseif (preg_match('/^msgid\s+(".*")/', $line, $m)) {
				if ($is_final($context)) {
					PO::read_line($f, 'put-back');
					$lineno--;
					break;
				}
				if ($context &amp;&amp; $context != 'msgctxt' &amp;&amp; $context != 'comment') {
					return false;
				}
				$context = 'msgid';
				$entry-&gt;singular .= PO::unpoify($m[1]);
			} elseif (preg_match('/^msgid_plural\s+(".*")/', $line, $m)) {
				if ($context != 'msgid') {
					return false;
				}
				$context = 'msgid_plural';
				$entry-&gt;is_plural = true;
				$entry-&gt;plural .= PO::unpoify($m[1]);
			} elseif (preg_match('/^msgstr\s+(".*")/', $line, $m)) {
				if ($context != 'msgid') {
					return false;
				}
				$context = 'msgstr';
				$entry-&gt;translations = array(PO::unpoify($m[1]));
			} elseif (preg_match('/^msgstr\[(\d+)\]\s+(".*")/', $line, $m)) {
				if ($context != 'msgid_plural' &amp;&amp; $context != 'msgstr_plural') {
					return false;
				}
				$context = 'msgstr_plural';
				$msgstr_index = $m[1];
				$entry-&gt;translations[$m[1]] = PO::unpoify($m[2]);
</codefragment>
  </duplication>
  <duplication lines="27" tokens="75">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/po.php" line="319"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/po.php" line="335"/>
    <codefragment>		if (array() == array_filter($entry-&gt;translations)) $entry-&gt;translations = array();
		return array('entry' =&gt; $entry, 'lineno' =&gt; $lineno);
	}
	
	function read_line($f, $action = 'read') {
		static $last_line = '';
		static $use_last_line = false;
		if ('clear' == $action) {
			$last_line = '';
			return true;
		}
		if ('put-back' == $action) {
			$use_last_line = true;
			return true;
		}
		$line = $use_last_line? $last_line : fgets($f);
		$last_line = $line;
		$use_last_line = false;
		return $line;
	}
	
	function add_comment_to_entry(&amp;$entry, $po_comment_line) {
		$first_two = substr($po_comment_line, 0, 2);
		$comment = trim(substr($po_comment_line, 2));
		if ('#:' == $first_two) {
			$entry-&gt;references = array_merge($entry-&gt;references, preg_split('/\s+/', $comment));
		} elseif ('#.' == $first_two) {
</codefragment>
  </duplication>
  <duplication lines="59" tokens="108">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/translations.php" line="28"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/translations.php" line="42"/>
    <codefragment>		$this-&gt;entries[$key] = $entry;
		return true;
	}

	/**
	 * Sets $header PO header to $value
	 *
	 * If the header already exists, it will be overwritten
	 *
	 * TODO: this should be out of this class, it is gettext specific
	 *
	 * @param string $header header name, without trailing :
	 * @param string $value header value, without trailing \n
	 */
	function set_header($header, $value) {
		$this-&gt;headers[$header] = $value;
	}

	function set_headers(&amp;$headers) {
		foreach($headers as $header =&gt; $value) {
			$this-&gt;set_header($header, $value);
		}
	}

	function get_header($header) {
		return isset($this-&gt;headers[$header])? $this-&gt;headers[$header] : false;
	}

	function translate_entry(&amp;$entry) {
		$key = $entry-&gt;key();
		return isset($this-&gt;entries[$key])? $this-&gt;entries[$key] : false;
	}

	function translate($singular, $context=null) {
		$entry = new Translation_Entry(array('singular' =&gt; $singular, 'context' =&gt; $context));
		$translated = $this-&gt;translate_entry($entry);
		return ($translated &amp;&amp; !empty($translated-&gt;translations))? $translated-&gt;translations[0] : $singular;
	}

	/**
	 * Given the number of items, returns the 0-based index of the plural form to use
	 *
	 * Here, in the base Translations class, the commong logic for English is implmented:
	 * 	0 if there is one element, 1 otherwise
	 *
	 * This function should be overrided by the sub-classes. For example MO/PO can derive the logic
	 * from their headers.
	 *
	 * @param integer $count number of items
	 */
	function select_plural_form($count) {
		return 1 == $count? 0 : 1;
	}

	function get_plural_forms_count() {
		return 2;
	}

	function translate_plural($singular, $plural, $count, $context = null) {
</codefragment>
  </duplication>
  <duplication lines="15" tokens="36">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/pomo/translations.php" line="152"/>
    <file path="/mnt/share/buddypress/src/wp-includes/pomo/translations.php" line="181"/>
    <codefragment>	function _parenthesize_plural_exression($expression) {
		$expression .= ';';
		$res = '';
		$depth = 0;
		for ($i = 0; $i &lt; strlen($expression); ++$i) {
			$char = $expression[$i];
			switch ($char) {
				case '?':
					$res .= ' ? (';
					$depth++;
					break;
				case ':':
					$res .= ') : (';
					break;
				case ';':
</codefragment>
  </duplication>
  <duplication lines="29" tokens="60">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.shortcodes.php" line="211"/>
    <file path="/mnt/share/buddypress/src/wp-includes/shortcodes.php" line="238"/>
    <codefragment>		return $m[1] . call_user_func($shortcode_tags[$tag], $attr, NULL, $m[2]) . $m[6];
	}
}

/**
 * Retrieve all attributes from the shortcodes tag.
 *
 * The attributes list has the attribute name as the key and the value of the
 * attribute as the value in the key/value pair. This allows for easier
 * retrieval of the attributes, since all attributes have to be known.
 *
 * @since 2.5
 *
 * @param string $text
 * @return array List of attributes and their value.
 */
function shortcode_parse_atts($text) {
	$atts = array();
	$pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
	$text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);
	if ( preg_match_all($pattern, $text, $match, PREG_SET_ORDER) ) {
		foreach ($match as $m) {
			if (!empty($m[1]))
				$atts[strtolower($m[1])] = stripcslashes($m[2]);
			elseif (!empty($m[3]))
				$atts[strtolower($m[3])] = stripcslashes($m[4]);
			elseif (!empty($m[5]))
				$atts[strtolower($m[5])] = stripcslashes($m[6]);
			elseif (isset($m[7]) and strlen($m[7]))
</codefragment>
  </duplication>
  <duplication lines="8" tokens="21">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-taxonomy.php" line="623"/>
    <file path="/mnt/share/buddypress/src/wp-includes/taxonomy.php" line="1202"/>
    <codefragment>			$hierarchy = $this-&gt;_get_term_hierarchy($taxonomies[0]);
			if ( !isset($hierarchy[$parent]) )
				return $empty_array;
		}

		// $args can be whatever, only use the args defined in defaults to compute the key
		$filter_key = ( has_filter('list_terms_exclusions') ) ? serialize($GLOBALS['wp_filter']['list_terms_exclusions']) : '';
		$key = md5( serialize( compact(array_keys($defaults)) ) . serialize( $taxonomies ) . $filter_key );
</codefragment>
  </duplication>
  <duplication lines="15" tokens="49">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.wp-taxonomy.php" line="1191"/>
    <file path="/mnt/share/buddypress/src/wp-includes/taxonomy.php" line="1857"/>
    <codefragment>			$t = $this-&gt;get_taxonomy($taxonomies[0]);
			if ( isset($t-&gt;args) &amp;&amp; is_array($t-&gt;args) )
				$args = array_merge($args, $t-&gt;args);
		}

		extract($args, EXTR_SKIP);

		if ( 'count' == $orderby )
			$orderby = 'tt.count';
		else if ( 'name' == $orderby )
			$orderby = 't.name';
		else if ( 'slug' == $orderby )
			$orderby = 't.slug';
		else if ( 'term_group' == $orderby )
			$orderby = 't.term_group';
</codefragment>
  </duplication>
  <duplication lines="37" tokens="42">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.bpdb.php" line="386"/>
    <file path="/mnt/share/buddypress/src/wp-includes/wp-db.php" line="770"/>
    <codefragment>	function _weak_escape( $string )
	{
		return addslashes( $string );
	}

	function _real_escape( $string )
	{
		if ( $this-&gt;dbh &amp;&amp; $this-&gt;real_escape ) {
			return mysql_real_escape_string( $string, $this-&gt;dbh );
		} else {
			return addslashes( $string );
		}
	}

	function _escape( $data )
	{
		if ( is_array( $data ) ) {
			foreach ( (array) $data as $k =&gt; $v ) {
				if ( is_array( $v ) ) {
					$data[$k] = $this-&gt;_escape( $v );
				} else {
					$data[$k] = $this-&gt;_real_escape( $v );
				}
			}
		} else {
			$data = $this-&gt;_real_escape( $data );
		}

		return $data;
	}

	/**
	 * Escapes content for insertion into the database using addslashes(), for security
	 *
	 * @since 1.0
	 *
	 * @param string|array $data
</codefragment>
  </duplication>
  <duplication lines="35" tokens="67">
    <file path="/mnt/share/buddypress/src/wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.bpdb.php" line="832"/>
    <file path="/mnt/share/buddypress/src/wp-includes/wp-db.php" line="1286"/>
    <codefragment>		$this-&gt;func_call = "\$db-&gt;get_var(\"$query\",$x,$y)";
		if ( $query ) {
			$this-&gt;query( $query );
		}

		// Extract var out of cached results based x,y vals
		if ( !empty( $this-&gt;last_result[$y] ) ) {
			$values = array_values( get_object_vars( $this-&gt;last_result[$y] ) );
		}

		// If there is a value return it else return null
		return ( isset($values[$x]) &amp;&amp; $values[$x]!=='' ) ? $values[$x] : null;
	}

	/**
	 * Retrieve one row from the database.
	 *
	 * Executes a SQL query and returns the row from the SQL result.
	 *
	 * @since 1.0
	 *
	 * @param string|null $query SQL query.
	 * @param string $output (optional) one of ARRAY_A | ARRAY_N | OBJECT constants.  Return an associative array (column =&gt; value, ...), a numerically indexed array (0 =&gt; value, ...) or an object ( -&gt;column = value ), respectively.
	 * @param int $y (optional) Row to return.  Indexed from 0.
	 * @return mixed Database query result in format specifed by $output
	 */
	function get_row( $query = null, $output = OBJECT, $y = 0 )
	{
		$this-&gt;func_call = "\$db-&gt;get_row(\"$query\",$output,$y)";
		if ( $query ) {
			$this-&gt;query( $query );
		} else {
			return null;
		}

</codefragment>
  </duplication>
</pmd-cpd>
